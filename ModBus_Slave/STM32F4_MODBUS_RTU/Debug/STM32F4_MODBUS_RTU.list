
STM32F4_MODBUS_RTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007440  08007440  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007448  08007448  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800744c  0800744c  0001744c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00004224  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004320  20004320  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016eb0  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b98  00000000  00000000  00036fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001428  00000000  00000000  0003ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001230  00000000  00000000  0003bfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025fad  00000000  00000000  0003d1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bc65  00000000  00000000  0006317d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6dc2  00000000  00000000  0007ede2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00155ba4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005968  00000000  00000000  00155bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000fc 	.word	0x200000fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f9c 	.word	0x08006f9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000100 	.word	0x20000100
 80001cc:	08006f9c 	.word	0x08006f9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	4a07      	ldr	r2, [pc, #28]	; (80005a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000584:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <vApplicationGetIdleTaskMemory+0x30>)
 800058a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000118 	.word	0x20000118
 80005a4:	2000016c 	.word	0x2000016c

080005a8 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fda3 	bl	80010f8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f81f 	bl	80005f4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f8e5 	bl	8000784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 f8b9 	bl	8000730 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 80005be:	f000 f889 	bl	80006d4 <MX_TIM7_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x44>)
 80005c4:	1d3c      	adds	r4, r7, #4
 80005c6:	461d      	mov	r5, r3
 80005c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f003 f992 	bl	8003902 <osThreadCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a03      	ldr	r2, [pc, #12]	; (80005f0 <main+0x48>)
 80005e2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80005e4:	f003 f986 	bl	80038f4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x40>
 80005ea:	bf00      	nop
 80005ec:	08006fd0 	.word	0x08006fd0
 80005f0:	200003f8 	.word	0x200003f8

080005f4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b094      	sub	sp, #80	; 0x50
 80005f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	4b32      	ldr	r3, [pc, #200]	; (80006c8 <SystemClock_Config+0xd4>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <SystemClock_Config+0xd4>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
 800060a:	4b2f      	ldr	r3, [pc, #188]	; (80006c8 <SystemClock_Config+0xd4>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <SystemClock_Config+0xd8>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2b      	ldr	r2, [pc, #172]	; (80006cc <SystemClock_Config+0xd8>)
 8000620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000624:	6013      	str	r3, [r2, #0]
 8000626:	4b29      	ldr	r3, [pc, #164]	; (80006cc <SystemClock_Config+0xd8>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000632:	2301      	movs	r3, #1
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000640:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000644:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000646:	2304      	movs	r3, #4
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800064a:	23a8      	movs	r3, #168	; 0xa8
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000652:	2307      	movs	r3, #7
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f001 f904 	bl	8001868 <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000666:	f000 fa0f 	bl	8000a88 <Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f001 fb65 	bl	8001d58 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000694:	f000 f9f8 	bl	8000a88 <Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000698:	f001 fd4a 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 800069c:	4603      	mov	r3, r0
 800069e:	4a0c      	ldr	r2, [pc, #48]	; (80006d0 <SystemClock_Config+0xdc>)
 80006a0:	fba2 2303 	umull	r2, r3, r2, r3
 80006a4:	099b      	lsrs	r3, r3, #6
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fe6d 	bl	8001386 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006ac:	2004      	movs	r0, #4
 80006ae:	f000 fe77 	bl	80013a0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80006b2:	2200      	movs	r2, #0
 80006b4:	210f      	movs	r1, #15
 80006b6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ba:	f000 fe3a 	bl	8001332 <HAL_NVIC_SetPriority>
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000
 80006d0:	10624dd3 	.word	0x10624dd3

080006d4 <MX_TIM7_Init>:

/* TIM7 init function */
static void MX_TIM7_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;

  htim7.Instance = TIM7;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_TIM7_Init+0x54>)
 80006dc:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_TIM7_Init+0x58>)
 80006de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_TIM7_Init+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_TIM7_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_TIM7_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80006f2:	480d      	ldr	r0, [pc, #52]	; (8000728 <MX_TIM7_Init+0x54>)
 80006f4:	f001 fd82 	bl	80021fc <HAL_TIM_Base_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM7_Init+0x2e>
  {
    Error_Handler();
 80006fe:	f000 f9c3 	bl	8000a88 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000702:	2320      	movs	r3, #32
 8000704:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <MX_TIM7_Init+0x54>)
 8000710:	f002 f834 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM7_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f9b5 	bl	8000a88 <Error_Handler>
  }

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	2000036c 	.word	0x2000036c
 800072c:	40001400 	.word	0x40001400

08000730 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_USART2_UART_Init+0x50>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800073c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_USART2_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_USART2_UART_Init+0x4c>)
 8000768:	f002 f898 	bl	800289c <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000772:	f000 f989 	bl	8000a88 <Error_Handler>
  }

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200003b4 	.word	0x200003b4
 8000780:	40004400 	.word	0x40004400

08000784 <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4ba2      	ldr	r3, [pc, #648]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4aa1      	ldr	r2, [pc, #644]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000794:	f043 0310 	orr.w	r3, r3, #16
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b9f      	ldr	r3, [pc, #636]	; (8000a18 <MX_GPIO_Init+0x294>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0310 	and.w	r3, r3, #16
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b9b      	ldr	r3, [pc, #620]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a9a      	ldr	r2, [pc, #616]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b98      	ldr	r3, [pc, #608]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b94      	ldr	r3, [pc, #592]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a93      	ldr	r2, [pc, #588]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b91      	ldr	r3, [pc, #580]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b8d      	ldr	r3, [pc, #564]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a8c      	ldr	r2, [pc, #560]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b8a      	ldr	r3, [pc, #552]	; (8000a18 <MX_GPIO_Init+0x294>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b86      	ldr	r3, [pc, #536]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a85      	ldr	r2, [pc, #532]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b83      	ldr	r3, [pc, #524]	; (8000a18 <MX_GPIO_Init+0x294>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b7f      	ldr	r3, [pc, #508]	; (8000a18 <MX_GPIO_Init+0x294>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a7e      	ldr	r2, [pc, #504]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000820:	f043 0308 	orr.w	r3, r3, #8
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b7c      	ldr	r3, [pc, #496]	; (8000a18 <MX_GPIO_Init+0x294>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0308 	and.w	r3, r3, #8
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2108      	movs	r1, #8
 8000836:	4879      	ldr	r0, [pc, #484]	; (8000a1c <MX_GPIO_Init+0x298>)
 8000838:	f000 fffc 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	4877      	ldr	r0, [pc, #476]	; (8000a20 <MX_GPIO_Init+0x29c>)
 8000842:	f000 fff7 	bl	8001834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000846:	2200      	movs	r2, #0
 8000848:	f24f 0110 	movw	r1, #61456	; 0xf010
 800084c:	4875      	ldr	r0, [pc, #468]	; (8000a24 <MX_GPIO_Init+0x2a0>)
 800084e:	f000 fff1 	bl	8001834 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000852:	2308      	movs	r3, #8
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	486c      	ldr	r0, [pc, #432]	; (8000a1c <MX_GPIO_Init+0x298>)
 800086a:	f000 fe47 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800086e:	2301      	movs	r3, #1
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	4866      	ldr	r0, [pc, #408]	; (8000a20 <MX_GPIO_Init+0x29c>)
 8000886:	f000 fe39 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800089a:	2305      	movs	r3, #5
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	485e      	ldr	r0, [pc, #376]	; (8000a20 <MX_GPIO_Init+0x29c>)
 80008a6:	f000 fe29 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	485a      	ldr	r0, [pc, #360]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 80008c0:	f000 fe1c 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008c4:	2310      	movs	r3, #16
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d4:	2306      	movs	r3, #6
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4852      	ldr	r0, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 80008e0:	f000 fe0c 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008e4:	23e0      	movs	r3, #224	; 0xe0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e8:	2302      	movs	r3, #2
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008f4:	2305      	movs	r3, #5
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	484a      	ldr	r0, [pc, #296]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 8000900:	f000 fdfc 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000904:	2304      	movs	r3, #4
 8000906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000910:	f107 031c 	add.w	r3, r7, #28
 8000914:	4619      	mov	r1, r3
 8000916:	4845      	ldr	r0, [pc, #276]	; (8000a2c <MX_GPIO_Init+0x2a8>)
 8000918:	f000 fdf0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800092e:	2305      	movs	r3, #5
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	483c      	ldr	r0, [pc, #240]	; (8000a2c <MX_GPIO_Init+0x2a8>)
 800093a:	f000 fddf 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800093e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000942:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	2301      	movs	r3, #1
 8000946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	4833      	ldr	r0, [pc, #204]	; (8000a24 <MX_GPIO_Init+0x2a0>)
 8000958:	f000 fdd0 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800095c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800096e:	2306      	movs	r3, #6
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4829      	ldr	r0, [pc, #164]	; (8000a20 <MX_GPIO_Init+0x29c>)
 800097a:	f000 fdbf 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800097e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 8000994:	f000 fdb2 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000998:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009aa:	230a      	movs	r3, #10
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	481c      	ldr	r0, [pc, #112]	; (8000a28 <MX_GPIO_Init+0x2a4>)
 80009b6:	f000 fda1 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009ba:	2320      	movs	r3, #32
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <MX_GPIO_Init+0x2a0>)
 80009ce:	f000 fd95 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009d8:	2312      	movs	r3, #18
 80009da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009dc:	2301      	movs	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009e4:	2304      	movs	r3, #4
 80009e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	480f      	ldr	r0, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x2a8>)
 80009f0:	f000 fd84 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a02:	f107 031c 	add.w	r3, r7, #28
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_GPIO_Init+0x298>)
 8000a0a:	f000 fd77 	bl	80014fc <HAL_GPIO_Init>

}
 8000a0e:	bf00      	nop
 8000a10:	3730      	adds	r7, #48	; 0x30
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021000 	.word	0x40021000
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020c00 	.word	0x40020c00
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40020400 	.word	0x40020400

08000a30 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
	osThreadDef(ModbusRTUTask, ModbusRTUTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <StartDefaultTask+0x30>)
 8000a3a:	f107 040c 	add.w	r4, r7, #12
 8000a3e:	461d      	mov	r5, r3
 8000a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(ModbusRTUTask), NULL); 
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 ff55 	bl	8003902 <osThreadCreate>
	
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a58:	2001      	movs	r0, #1
 8000a5a:	f002 ff9e 	bl	800399a <osDelay>
 8000a5e:	e7fb      	b.n	8000a58 <StartDefaultTask+0x28>
 8000a60:	08006fec 	.word	0x08006fec

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 fb61 	bl	800113c <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */

/* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x4>
	...

08000a90 <ModbusRTUTask>:

static USHORT usRegInputStart = REG_INPUT_START;
static USHORT usRegInputBuf[REG_INPUT_NREGS];

void ModbusRTUTask(void const * argument)
{ 
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	6078      	str	r0, [r7, #4]
  /* ABCDEF */
  usRegInputBuf[0] = 11;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <ModbusRTUTask+0x5c>)
 8000a9a:	220b      	movs	r2, #11
 8000a9c:	801a      	strh	r2, [r3, #0]
  usRegInputBuf[1] = 22;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <ModbusRTUTask+0x5c>)
 8000aa0:	2216      	movs	r2, #22
 8000aa2:	805a      	strh	r2, [r3, #2]
  usRegInputBuf[2] = 33;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <ModbusRTUTask+0x5c>)
 8000aa6:	2221      	movs	r2, #33	; 0x21
 8000aa8:	809a      	strh	r2, [r3, #4]
  usRegInputBuf[3] = 44;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <ModbusRTUTask+0x5c>)
 8000aac:	222c      	movs	r2, #44	; 0x2c
 8000aae:	80da      	strh	r2, [r3, #6]
  usRegInputBuf[4] = 55;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <ModbusRTUTask+0x5c>)
 8000ab2:	2237      	movs	r2, #55	; 0x37
 8000ab4:	811a      	strh	r2, [r3, #8]
  usRegInputBuf[5] = 66;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <ModbusRTUTask+0x5c>)
 8000ab8:	2242      	movs	r2, #66	; 0x42
 8000aba:	815a      	strh	r2, [r3, #10]
  usRegInputBuf[6] = 77;
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <ModbusRTUTask+0x5c>)
 8000abe:	224d      	movs	r2, #77	; 0x4d
 8000ac0:	819a      	strh	r2, [r3, #12]
  usRegInputBuf[7] = 88;  
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <ModbusRTUTask+0x5c>)
 8000ac4:	2258      	movs	r2, #88	; 0x58
 8000ac6:	81da      	strh	r2, [r3, #14]
  
  eMBErrorCode eStatus = eMBInit( MB_RTU, 1, 3, 19200, MB_PAR_NONE );
 8000ac8:	2300      	movs	r3, #0
 8000aca:	9300      	str	r3, [sp, #0]
 8000acc:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000ad0:	2203      	movs	r2, #3
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f004 fd79 	bl	80055cc <eMBInit>
 8000ada:	4603      	mov	r3, r0
 8000adc:	73fb      	strb	r3, [r7, #15]
  eStatus = eMBEnable();
 8000ade:	f004 fdf1 	bl	80056c4 <eMBEnable>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  
  while(1) {
    eMBPoll();           
 8000ae6:	f004 fe09 	bl	80056fc <eMBPoll>
 8000aea:	e7fc      	b.n	8000ae6 <ModbusRTUTask+0x56>
 8000aec:	200003fc 	.word	0x200003fc

08000af0 <eMBRegInputCB>:
  }
}

eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	803b      	strh	r3, [r7, #0]
    eMBErrorCode    eStatus = MB_ENOERR;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]
    int             iRegIndex;

    if( ( usAddress >= REG_INPUT_START )
 8000b04:	887b      	ldrh	r3, [r7, #2]
 8000b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b0a:	d329      	bcc.n	8000b60 <eMBRegInputCB+0x70>
        && ( usAddress + usNRegs <= REG_INPUT_START + REG_INPUT_NREGS ) )
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	883b      	ldrh	r3, [r7, #0]
 8000b10:	4413      	add	r3, r2
 8000b12:	f5b3 7f7c 	cmp.w	r3, #1008	; 0x3f0
 8000b16:	dc23      	bgt.n	8000b60 <eMBRegInputCB+0x70>
    {
        iRegIndex = ( int )( usAddress - usRegInputStart );
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <eMBRegInputCB+0x84>)
 8000b1c:	8812      	ldrh	r2, [r2, #0]
 8000b1e:	1a9b      	subs	r3, r3, r2
 8000b20:	60bb      	str	r3, [r7, #8]
        while( usNRegs > 0 )
 8000b22:	e019      	b.n	8000b58 <eMBRegInputCB+0x68>
        {
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <eMBRegInputCB+0x88>)
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	b299      	uxth	r1, r3
            *pucRegBuffer++ =
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] >> 8 );
 8000b36:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b38:	701a      	strb	r2, [r3, #0]
            *pucRegBuffer++ =
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b3a:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <eMBRegInputCB+0x88>)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
            *pucRegBuffer++ =
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	607a      	str	r2, [r7, #4]
                ( unsigned char )( usRegInputBuf[iRegIndex] & 0xFF );
 8000b48:	b2ca      	uxtb	r2, r1
            *pucRegBuffer++ =
 8000b4a:	701a      	strb	r2, [r3, #0]
            iRegIndex++;
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
            usNRegs--;
 8000b52:	883b      	ldrh	r3, [r7, #0]
 8000b54:	3b01      	subs	r3, #1
 8000b56:	803b      	strh	r3, [r7, #0]
        while( usNRegs > 0 )
 8000b58:	883b      	ldrh	r3, [r7, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1e2      	bne.n	8000b24 <eMBRegInputCB+0x34>
    if( ( usAddress >= REG_INPUT_START )
 8000b5e:	e001      	b.n	8000b64 <eMBRegInputCB+0x74>
        }
				
    }
    else
    {
        eStatus = MB_ENOREG;			
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
    }

    return eStatus;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000
 8000b78:	200003fc 	.word	0x200003fc

08000b7c <eMBRegHoldingCB>:

eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	4608      	mov	r0, r1
 8000b86:	4611      	mov	r1, r2
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	817b      	strh	r3, [r7, #10]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	813b      	strh	r3, [r7, #8]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <eMBRegCoilsCB>:


eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	4608      	mov	r0, r1
 8000bae:	4611      	mov	r1, r2
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	817b      	strh	r3, [r7, #10]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	813b      	strh	r3, [r7, #8]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 8000bbe:	2301      	movs	r3, #1
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <eMBRegDiscreteCB>:

eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 8000bdc:	2301      	movs	r3, #1
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
	...

08000bec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_MspInit+0x54>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	4a11      	ldr	r2, [pc, #68]	; (8000c40 <HAL_MspInit+0x54>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	; 0x44
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x54>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <HAL_MspInit+0x54>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <HAL_MspInit+0x54>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <HAL_MspInit+0x54>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	f06f 0001 	mvn.w	r0, #1
 8000c32:	f000 fb7e 	bl	8001332 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_TIM_Base_MspInit+0x48>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d115      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c60:	f043 0320 	orr.w	r3, r3, #32
 8000c64:	6413      	str	r3, [r2, #64]	; 0x40
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_TIM_Base_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0320 	and.w	r3, r3, #32
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2105      	movs	r1, #5
 8000c76:	2037      	movs	r0, #55	; 0x37
 8000c78:	f000 fb5b 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c7c:	2037      	movs	r0, #55	; 0x37
 8000c7e:	f000 fb74 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40001400 	.word	0x40001400
 8000c90:	40023800 	.word	0x40023800

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1d      	ldr	r2, [pc, #116]	; (8000d28 <HAL_UART_MspInit+0x94>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d133      	bne.n	8000d1e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_UART_MspInit+0x98>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4809      	ldr	r0, [pc, #36]	; (8000d30 <HAL_UART_MspInit+0x9c>)
 8000d0a:	f000 fbf7 	bl	80014fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2026      	movs	r0, #38	; 0x26
 8000d14:	f000 fb0d 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d18:	2026      	movs	r0, #38	; 0x26
 8000d1a:	f000 fb26 	bl	800136a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004400 	.word	0x40004400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08c      	sub	sp, #48	; 0x30
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2036      	movs	r0, #54	; 0x36
 8000d4a:	f000 faf2 	bl	8001332 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d4e:	2036      	movs	r0, #54	; 0x36
 8000d50:	f000 fb0b 	bl	800136a <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b1f      	ldr	r3, [pc, #124]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b1c      	ldr	r3, [pc, #112]	; (8000dd8 <HAL_InitTick+0xa4>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d70:	f107 0210 	add.w	r2, r7, #16
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fa0c 	bl	8002198 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d80:	f001 f9e2 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 8000d84:	4603      	mov	r3, r0
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d8c:	4a13      	ldr	r2, [pc, #76]	; (8000ddc <HAL_InitTick+0xa8>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	0c9b      	lsrs	r3, r3, #18
 8000d94:	3b01      	subs	r3, #1
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d98:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <HAL_InitTick+0xac>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	; (8000de4 <HAL_InitTick+0xb0>)
 8000d9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_InitTick+0xac>)
 8000da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000da6:	4a0e      	ldr	r2, [pc, #56]	; (8000de0 <HAL_InitTick+0xac>)
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <HAL_InitTick+0xac>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_InitTick+0xac>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000db8:	4809      	ldr	r0, [pc, #36]	; (8000de0 <HAL_InitTick+0xac>)
 8000dba:	f001 fa1f 	bl	80021fc <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d104      	bne.n	8000dce <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <HAL_InitTick+0xac>)
 8000dc6:	f001 fa69 	bl	800229c <HAL_TIM_Base_Start_IT>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3730      	adds	r7, #48	; 0x30
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	431bde83 	.word	0x431bde83
 8000de0:	2000040c 	.word	0x2000040c
 8000de4:	40001000 	.word	0x40001000

08000de8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000dec:	f002 fde9 	bl	80039c2 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt.
*/
void USART2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	2b20      	cmp	r3, #32
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8000e10:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f003 0320 	and.w	r3, r3, #32
 8000e1a:	60bb      	str	r3, [r7, #8]
  
  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d011      	beq.n	8000e46 <USART2_IRQHandler+0x52>
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00e      	beq.n	8000e46 <USART2_IRQHandler+0x52>
    pxMBFrameCBByteReceived();
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <USART2_IRQHandler+0x88>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart2);    
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
    return;
 8000e44:	e014      	b.n	8000e70 <USART2_IRQHandler+0x7c>
  }
  
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e50:	2b80      	cmp	r3, #128	; 0x80
 8000e52:	d10a      	bne.n	8000e6a <USART2_IRQHandler+0x76>
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d003      	beq.n	8000e6a <USART2_IRQHandler+0x76>
    pxMBFrameCBTransmitterEmpty();    
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <USART2_IRQHandler+0x8c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4798      	blx	r3
    return ;
 8000e68:	e002      	b.n	8000e70 <USART2_IRQHandler+0x7c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <USART2_IRQHandler+0x84>)
 8000e6c:	f001 fdf6 	bl	8002a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003b4 	.word	0x200003b4
 8000e7c:	200041e8 	.word	0x200041e8
 8000e80:	200041ec 	.word	0x200041ec

08000e84 <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <TIM6_DAC_IRQHandler+0x10>)
 8000e8a:	f001 faa6 	bl	80023da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000040c 	.word	0x2000040c

08000e98 <TIM7_IRQHandler>:

/**
* @brief This function handles TIM7 global interrupt.
*/
void TIM7_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <TIM7_IRQHandler+0x50>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d118      	bne.n	8000edc <TIM7_IRQHandler+0x44>
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <TIM7_IRQHandler+0x50>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d111      	bne.n	8000edc <TIM7_IRQHandler+0x44>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <TIM7_IRQHandler+0x50>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f06f 0201 	mvn.w	r2, #1
 8000ec0:	611a      	str	r2, [r3, #16]
    if (!--downcounter)
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <TIM7_IRQHandler+0x54>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <TIM7_IRQHandler+0x54>)
 8000ecc:	801a      	strh	r2, [r3, #0]
 8000ece:	4b07      	ldr	r3, [pc, #28]	; (8000eec <TIM7_IRQHandler+0x54>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <TIM7_IRQHandler+0x44>
      pxMBPortCBTimerExpired();
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <TIM7_IRQHandler+0x58>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4798      	blx	r3
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM7_IRQHandler+0x50>)
 8000ede:	f001 fa7c 	bl	80023da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000036c 	.word	0x2000036c
 8000eec:	20004204 	.word	0x20004204
 8000ef0:	200041f0 	.word	0x200041f0

08000ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
	return 1;
 8000ef8:	2301      	movs	r3, #1
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_kill>:

int _kill(int pid, int sig)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f0e:	f005 f831 	bl	8005f74 <__errno>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2216      	movs	r2, #22
 8000f16:	601a      	str	r2, [r3, #0]
	return -1;
 8000f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_exit>:

void _exit (int status)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffe7 	bl	8000f04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f36:	e7fe      	b.n	8000f36 <_exit+0x12>

08000f38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00a      	b.n	8000f60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f4a:	f3af 8000 	nop.w
 8000f4e:	4601      	mov	r1, r0
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	60ba      	str	r2, [r7, #8]
 8000f56:	b2ca      	uxtb	r2, r1
 8000f58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dbf0      	blt.n	8000f4a <_read+0x12>
	}

return len;
 8000f68:	687b      	ldr	r3, [r7, #4]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	e009      	b.n	8000f98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	60ba      	str	r2, [r7, #8]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf1      	blt.n	8000f84 <_write+0x12>
	}
	return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_close>:

int _close(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_isatty>:

int _isatty(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f004 ff96 	bl	8005f74 <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20020000 	.word	0x20020000
 8001074:	00000400 	.word	0x00000400
 8001078:	20000454 	.word	0x20000454
 800107c:	20004320 	.word	0x20004320

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480d      	ldr	r0, [pc, #52]	; (80010e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010ac:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c0:	4c0b      	ldr	r4, [pc, #44]	; (80010f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ce:	f7ff ffd7 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d2:	f004 ff67 	bl	8005fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d6:	f7ff fa67 	bl	80005a8 <main>
  bx  lr    
 80010da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 80010e8:	08007450 	.word	0x08007450
  ldr r2, =_sbss
 80010ec:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 80010f0:	20004320 	.word	0x20004320

080010f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f4:	e7fe      	b.n	80010f4 <ADC_IRQHandler>
	...

080010f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_Init+0x40>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_Init+0x40>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_Init+0x40>)
 800110e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x40>)
 800111a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800111e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f8fb 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f7ff fe04 	bl	8000d34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fd5e 	bl	8000bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000458 	.word	0x20000458

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000458 	.word	0x20000458

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001344:	f7ff ff3e 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	6978      	ldr	r0, [r7, #20]
 8001350:	f7ff ff8e 	bl	8001270 <NVIC_EncodePriority>
 8001354:	4602      	mov	r2, r0
 8001356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135a:	4611      	mov	r1, r2
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff5d 	bl	800121c <__NVIC_SetPriority>
}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff31 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ffa2 	bl	80012d8 <SysTick_Config>
 8001394:	4603      	mov	r3, r0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	d106      	bne.n	80013bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a08      	ldr	r2, [pc, #32]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80013ba:	e005      	b.n	80013c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013e6:	f7ff febd 	bl	8001164 <HAL_GetTick>
 80013ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d008      	beq.n	800140a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2200      	movs	r2, #0
 8001402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e052      	b.n	80014b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 0216 	bic.w	r2, r2, #22
 8001418:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001428:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	2b00      	cmp	r3, #0
 8001430:	d103      	bne.n	800143a <HAL_DMA_Abort+0x62>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0208 	bic.w	r2, r2, #8
 8001448:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145a:	e013      	b.n	8001484 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800145c:	f7ff fe82 	bl	8001164 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b05      	cmp	r3, #5
 8001468:	d90c      	bls.n	8001484 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2220      	movs	r2, #32
 800146e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2203      	movs	r2, #3
 8001474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e015      	b.n	80014b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b00      	cmp	r3, #0
 8001490:	d1e4      	bne.n	800145c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001496:	223f      	movs	r2, #63	; 0x3f
 8001498:	409a      	lsls	r2, r3
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d004      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2280      	movs	r2, #128	; 0x80
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00c      	b.n	80014f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0201 	bic.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
 8001516:	e16b      	b.n	80017f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001518:	2201      	movs	r2, #1
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	429a      	cmp	r2, r3
 8001532:	f040 815a 	bne.w	80017ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0303 	and.w	r3, r3, #3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d005      	beq.n	800154e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	2b02      	cmp	r3, #2
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d017      	beq.n	80015ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689a      	ldr	r2, [r3, #8]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d123      	bne.n	8001640 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	08da      	lsrs	r2, r3, #3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3208      	adds	r2, #8
 8001600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	220f      	movs	r2, #15
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43db      	mvns	r3, r3
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	4013      	ands	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	08da      	lsrs	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3208      	adds	r2, #8
 800163a:	69b9      	ldr	r1, [r7, #24]
 800163c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0203 	and.w	r2, r3, #3
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	4313      	orrs	r3, r2
 800166c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80b4 	beq.w	80017ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b60      	ldr	r3, [pc, #384]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	4a5f      	ldr	r2, [pc, #380]	; (8001808 <HAL_GPIO_Init+0x30c>)
 800168c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001690:	6453      	str	r3, [r2, #68]	; 0x44
 8001692:	4b5d      	ldr	r3, [pc, #372]	; (8001808 <HAL_GPIO_Init+0x30c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800169e:	4a5b      	ldr	r2, [pc, #364]	; (800180c <HAL_GPIO_Init+0x310>)
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	3302      	adds	r3, #2
 80016a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	220f      	movs	r2, #15
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x314>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x226>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a51      	ldr	r2, [pc, #324]	; (8001814 <HAL_GPIO_Init+0x318>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x222>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a50      	ldr	r2, [pc, #320]	; (8001818 <HAL_GPIO_Init+0x31c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x21e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4f      	ldr	r2, [pc, #316]	; (800181c <HAL_GPIO_Init+0x320>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x21a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4e      	ldr	r2, [pc, #312]	; (8001820 <HAL_GPIO_Init+0x324>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x216>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_GPIO_Init+0x328>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x212>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4c      	ldr	r2, [pc, #304]	; (8001828 <HAL_GPIO_Init+0x32c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x20e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4b      	ldr	r2, [pc, #300]	; (800182c <HAL_GPIO_Init+0x330>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x20a>
 8001702:	2307      	movs	r3, #7
 8001704:	e00e      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001706:	2308      	movs	r3, #8
 8001708:	e00c      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170a:	2306      	movs	r3, #6
 800170c:	e00a      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800170e:	2305      	movs	r3, #5
 8001710:	e008      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001712:	2304      	movs	r3, #4
 8001714:	e006      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001716:	2303      	movs	r3, #3
 8001718:	e004      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171a:	2302      	movs	r3, #2
 800171c:	e002      	b.n	8001724 <HAL_GPIO_Init+0x228>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <HAL_GPIO_Init+0x228>
 8001722:	2300      	movs	r3, #0
 8001724:	69fa      	ldr	r2, [r7, #28]
 8001726:	f002 0203 	and.w	r2, r2, #3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	4093      	lsls	r3, r2
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	4935      	ldr	r1, [pc, #212]	; (800180c <HAL_GPIO_Init+0x310>)
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	3302      	adds	r3, #2
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001766:	4a32      	ldr	r2, [pc, #200]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800176c:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_GPIO_Init+0x334>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001790:	4a27      	ldr	r2, [pc, #156]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001796:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_GPIO_Init+0x334>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	43db      	mvns	r3, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4013      	ands	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ba:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d003      	beq.n	80017e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e4:	4a12      	ldr	r2, [pc, #72]	; (8001830 <HAL_GPIO_Init+0x334>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	2b0f      	cmp	r3, #15
 80017f4:	f67f ae90 	bls.w	8001518 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800
 800180c:	40013800 	.word	0x40013800
 8001810:	40020000 	.word	0x40020000
 8001814:	40020400 	.word	0x40020400
 8001818:	40020800 	.word	0x40020800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40021000 	.word	0x40021000
 8001824:	40021400 	.word	0x40021400
 8001828:	40021800 	.word	0x40021800
 800182c:	40021c00 	.word	0x40021c00
 8001830:	40013c00 	.word	0x40013c00

08001834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	807b      	strh	r3, [r7, #2]
 8001840:	4613      	mov	r3, r2
 8001842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001844:	787b      	ldrb	r3, [r7, #1]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001850:	e003      	b.n	800185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001852:	887b      	ldrh	r3, [r7, #2]
 8001854:	041a      	lsls	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	619a      	str	r2, [r3, #24]
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e267      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d075      	beq.n	8001972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001886:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d00c      	beq.n	80018ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001892:	4b85      	ldr	r3, [pc, #532]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800189a:	2b08      	cmp	r3, #8
 800189c:	d112      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800189e:	4b82      	ldr	r3, [pc, #520]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018aa:	d10b      	bne.n	80018c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d05b      	beq.n	8001970 <HAL_RCC_OscConfig+0x108>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d157      	bne.n	8001970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e242      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018cc:	d106      	bne.n	80018dc <HAL_RCC_OscConfig+0x74>
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e01d      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x98>
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80018f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0xb0>
 8001900:	4b69      	ldr	r3, [pc, #420]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a68      	ldr	r2, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d013      	beq.n	8001948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fc20 	bl	8001164 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff fc1c 	bl	8001164 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e207      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193a:	4b5b      	ldr	r3, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d0f0      	beq.n	8001928 <HAL_RCC_OscConfig+0xc0>
 8001946:	e014      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001948:	f7ff fc0c 	bl	8001164 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fc08 	bl	8001164 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e1f3      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0xe8>
 800196e:	e000      	b.n	8001972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800197e:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	d00b      	beq.n	80019a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800198a:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d11c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001996:	4b44      	ldr	r3, [pc, #272]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d116      	bne.n	80019d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a2:	4b41      	ldr	r3, [pc, #260]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d001      	beq.n	80019ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e1c7      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4937      	ldr	r1, [pc, #220]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ce:	e03a      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d020      	beq.n	8001a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019de:	f7ff fbc1 	bl	8001164 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e6:	f7ff fbbd 	bl	8001164 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1a8      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4925      	ldr	r1, [pc, #148]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
 8001a18:	e015      	b.n	8001a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x244>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fba0 	bl	8001164 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a28:	f7ff fb9c 	bl	8001164 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e187      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a3a:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d036      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d016      	beq.n	8001a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fb80 	bl	8001164 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fb7c 	bl	8001164 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e167      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x200>
 8001a86:	e01b      	b.n	8001ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_OscConfig+0x248>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8e:	f7ff fb69 	bl	8001164 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a94:	e00e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a96:	f7ff fb65 	bl	8001164 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d907      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e150      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	42470000 	.word	0x42470000
 8001ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b88      	ldr	r3, [pc, #544]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1ea      	bne.n	8001a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 8097 	beq.w	8001bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad2:	4b81      	ldr	r3, [pc, #516]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10f      	bne.n	8001afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	4b7d      	ldr	r3, [pc, #500]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	4a7c      	ldr	r2, [pc, #496]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	6413      	str	r3, [r2, #64]	; 0x40
 8001aee:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fb25 	bl	8001164 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fb21 	bl	8001164 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e10c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x474>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x2ea>
 8001b44:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b50:	e01c      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x30c>
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
 8001b66:	4b5c      	ldr	r3, [pc, #368]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	4a5b      	ldr	r2, [pc, #364]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6713      	str	r3, [r2, #112]	; 0x70
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0x324>
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f023 0301 	bic.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b80:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001b86:	f023 0304 	bic.w	r3, r3, #4
 8001b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d015      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b94:	f7ff fae6 	bl	8001164 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9c:	f7ff fae2 	bl	8001164 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e0cb      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d0ee      	beq.n	8001b9c <HAL_RCC_OscConfig+0x334>
 8001bbe:	e014      	b.n	8001bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fad0 	bl	8001164 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc8:	f7ff facc 	bl	8001164 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e0b5      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ee      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a1 	beq.w	8001d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d05c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d141      	bne.n	8001c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff faa0 	bl	8001164 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff fa9c 	bl	8001164 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e087      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3a:	4b27      	ldr	r3, [pc, #156]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69da      	ldr	r2, [r3, #28]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c54:	019b      	lsls	r3, r3, #6
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	491b      	ldr	r1, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fa75 	bl	8001164 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c7e:	f7ff fa71 	bl	8001164 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e05c      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x416>
 8001c9c:	e054      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fa5e 	bl	8001164 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cac:	f7ff fa5a 	bl	8001164 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e045      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x444>
 8001cca:	e03d      	b.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e038      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <HAL_RCC_OscConfig+0x4ec>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d028      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d11a      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d14:	4013      	ands	r3, r2
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d111      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2a:	085b      	lsrs	r3, r3, #1
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d001      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d101      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e0cc      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d90c      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d044      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d119      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e06f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e26:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d101      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e067      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4934      	ldr	r1, [pc, #208]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e48:	f7ff f98c 	bl	8001164 <HAL_GetTick>
 8001e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e50:	f7ff f988 	bl	8001164 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e04f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e66:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 020c 	and.w	r2, r3, #12
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d1eb      	bne.n	8001e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e78:	4b25      	ldr	r3, [pc, #148]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d20c      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1b8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1c8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe ff18 	bl	8000d34 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08007104 	.word	0x08007104
 8001f1c:	20000004 	.word	0x20000004
 8001f20:	20000008 	.word	0x20000008

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f28:	b094      	sub	sp, #80	; 0x50
 8001f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f30:	2300      	movs	r3, #0
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f34:	2300      	movs	r3, #0
 8001f36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	4b79      	ldr	r3, [pc, #484]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d00d      	beq.n	8001f64 <HAL_RCC_GetSysClockFreq+0x40>
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	f200 80e1 	bhi.w	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x34>
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f56:	e0db      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b73      	ldr	r3, [pc, #460]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001f5c:	e0db      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f5e:	4b73      	ldr	r3, [pc, #460]	; (800212c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f62:	e0d8      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f64:	4b6f      	ldr	r3, [pc, #444]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6e:	4b6d      	ldr	r3, [pc, #436]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	099b      	lsrs	r3, r3, #6
 8001f80:	2200      	movs	r2, #0
 8001f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8e:	2300      	movs	r3, #0
 8001f90:	637b      	str	r3, [r7, #52]	; 0x34
 8001f92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001f96:	4622      	mov	r2, r4
 8001f98:	462b      	mov	r3, r5
 8001f9a:	f04f 0000 	mov.w	r0, #0
 8001f9e:	f04f 0100 	mov.w	r1, #0
 8001fa2:	0159      	lsls	r1, r3, #5
 8001fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fa8:	0150      	lsls	r0, r2, #5
 8001faa:	4602      	mov	r2, r0
 8001fac:	460b      	mov	r3, r1
 8001fae:	4621      	mov	r1, r4
 8001fb0:	1a51      	subs	r1, r2, r1
 8001fb2:	6139      	str	r1, [r7, #16]
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	f04f 0300 	mov.w	r3, #0
 8001fc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fc8:	4659      	mov	r1, fp
 8001fca:	018b      	lsls	r3, r1, #6
 8001fcc:	4651      	mov	r1, sl
 8001fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fd2:	4651      	mov	r1, sl
 8001fd4:	018a      	lsls	r2, r1, #6
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	ebb2 0801 	subs.w	r8, r2, r1
 8001fdc:	4659      	mov	r1, fp
 8001fde:	eb63 0901 	sbc.w	r9, r3, r1
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ff6:	4690      	mov	r8, r2
 8001ff8:	4699      	mov	r9, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	eb18 0303 	adds.w	r3, r8, r3
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	462b      	mov	r3, r5
 8002004:	eb49 0303 	adc.w	r3, r9, r3
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002016:	4629      	mov	r1, r5
 8002018:	024b      	lsls	r3, r1, #9
 800201a:	4621      	mov	r1, r4
 800201c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002020:	4621      	mov	r1, r4
 8002022:	024a      	lsls	r2, r1, #9
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202a:	2200      	movs	r2, #0
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
 800202e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002034:	f7fe f91c 	bl	8000270 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002040:	e058      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b38      	ldr	r3, [pc, #224]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	2200      	movs	r2, #0
 800204a:	4618      	mov	r0, r3
 800204c:	4611      	mov	r1, r2
 800204e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002052:	623b      	str	r3, [r7, #32]
 8002054:	2300      	movs	r3, #0
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
 8002058:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	f04f 0000 	mov.w	r0, #0
 8002064:	f04f 0100 	mov.w	r1, #0
 8002068:	0159      	lsls	r1, r3, #5
 800206a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800206e:	0150      	lsls	r0, r2, #5
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4641      	mov	r1, r8
 8002076:	ebb2 0a01 	subs.w	sl, r2, r1
 800207a:	4649      	mov	r1, r9
 800207c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800208c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002090:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002094:	ebb2 040a 	subs.w	r4, r2, sl
 8002098:	eb63 050b 	sbc.w	r5, r3, fp
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	00eb      	lsls	r3, r5, #3
 80020a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020aa:	00e2      	lsls	r2, r4, #3
 80020ac:	4614      	mov	r4, r2
 80020ae:	461d      	mov	r5, r3
 80020b0:	4643      	mov	r3, r8
 80020b2:	18e3      	adds	r3, r4, r3
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	464b      	mov	r3, r9
 80020b8:	eb45 0303 	adc.w	r3, r5, r3
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4629      	mov	r1, r5
 80020cc:	028b      	lsls	r3, r1, #10
 80020ce:	4621      	mov	r1, r4
 80020d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020d4:	4621      	mov	r1, r4
 80020d6:	028a      	lsls	r2, r1, #10
 80020d8:	4610      	mov	r0, r2
 80020da:	4619      	mov	r1, r3
 80020dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020de:	2200      	movs	r2, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	61fa      	str	r2, [r7, #28]
 80020e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e8:	f7fe f8c2 	bl	8000270 <__aeabi_uldivmod>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4613      	mov	r3, r2
 80020f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <HAL_RCC_GetSysClockFreq+0x200>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c1b      	lsrs	r3, r3, #16
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	3301      	adds	r3, #1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002104:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002108:	fbb2 f3f3 	udiv	r3, r2, r3
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800210e:	e002      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002110:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetSysClockFreq+0x204>)
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002118:	4618      	mov	r0, r3
 800211a:	3750      	adds	r7, #80	; 0x50
 800211c:	46bd      	mov	sp, r7
 800211e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	00f42400 	.word	0x00f42400
 800212c:	007a1200 	.word	0x007a1200

08002130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_GetHCLKFreq+0x14>)
 8002136:	681b      	ldr	r3, [r3, #0]
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800214c:	f7ff fff0 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0a9b      	lsrs	r3, r3, #10
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4903      	ldr	r1, [pc, #12]	; (800216c <HAL_RCC_GetPCLK1Freq+0x24>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002164:	4618      	mov	r0, r3
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40023800 	.word	0x40023800
 800216c:	08007114 	.word	0x08007114

08002170 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002174:	f7ff ffdc 	bl	8002130 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b05      	ldr	r3, [pc, #20]	; (8002190 <HAL_RCC_GetPCLK2Freq+0x20>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0b5b      	lsrs	r3, r3, #13
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4903      	ldr	r1, [pc, #12]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800218c:	4618      	mov	r0, r3
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40023800 	.word	0x40023800
 8002194:	08007114 	.word	0x08007114

08002198 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	220f      	movs	r2, #15
 80021a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RCC_GetClockConfig+0x60>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40023c00 	.word	0x40023c00

080021fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e041      	b.n	8002292 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fd0e 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3304      	adds	r3, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f000 f9fe 	bl	800263c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e04e      	b.n	8002352 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_TIM_Base_Start_IT+0xc4>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d022      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022de:	d01d      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1f      	ldr	r2, [pc, #124]	; (8002364 <HAL_TIM_Base_Start_IT+0xc8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d018      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a1e      	ldr	r2, [pc, #120]	; (8002368 <HAL_TIM_Base_Start_IT+0xcc>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	; (800236c <HAL_TIM_Base_Start_IT+0xd0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a1b      	ldr	r2, [pc, #108]	; (8002370 <HAL_TIM_Base_Start_IT+0xd4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_TIM_Base_Start_IT+0xd8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_TIM_Base_Start_IT+0x80>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a18      	ldr	r2, [pc, #96]	; (8002378 <HAL_TIM_Base_Start_IT+0xdc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d111      	bne.n	8002340 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b06      	cmp	r3, #6
 800232c:	d010      	beq.n	8002350 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f042 0201 	orr.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800233e:	e007      	b.n	8002350 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40010400 	.word	0x40010400
 8002374:	40014000 	.word	0x40014000
 8002378:	40001800 	.word	0x40001800

0800237c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0201 	bic.w	r2, r2, #1
 8002392:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6a1a      	ldr	r2, [r3, #32]
 800239a:	f241 1311 	movw	r3, #4369	; 0x1111
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10f      	bne.n	80023c4 <HAL_TIM_Base_Stop_IT+0x48>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	f240 4344 	movw	r3, #1092	; 0x444
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_TIM_Base_Stop_IT+0x48>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f003 0302 	and.w	r3, r3, #2
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d122      	bne.n	8002436 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d11b      	bne.n	8002436 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0202 	mvn.w	r2, #2
 8002406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f8ee 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 8002422:	e005      	b.n	8002430 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f8e0 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f8f1 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d122      	bne.n	800248a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b04      	cmp	r3, #4
 8002450:	d11b      	bne.n	800248a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0204 	mvn.w	r2, #4
 800245a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 f8c4 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 8002476:	e005      	b.n	8002484 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f8b6 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8c7 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b08      	cmp	r3, #8
 8002496:	d122      	bne.n	80024de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d11b      	bne.n	80024de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f06f 0208 	mvn.w	r2, #8
 80024ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2204      	movs	r2, #4
 80024b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f89a 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 80024ca:	e005      	b.n	80024d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f88c 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f89d 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d122      	bne.n	8002532 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b10      	cmp	r3, #16
 80024f8:	d11b      	bne.n	8002532 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f06f 0210 	mvn.w	r2, #16
 8002502:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2208      	movs	r2, #8
 8002508:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f870 	bl	80025fe <HAL_TIM_IC_CaptureCallback>
 800251e:	e005      	b.n	800252c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f862 	bl	80025ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f873 	bl	8002612 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0301 	and.w	r3, r3, #1
 800253c:	2b01      	cmp	r3, #1
 800253e:	d10e      	bne.n	800255e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0201 	mvn.w	r2, #1
 8002556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe fa83 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d10e      	bne.n	800258a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002576:	2b80      	cmp	r3, #128	; 0x80
 8002578:	d107      	bne.n	800258a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f97f 	bl	8002888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d10e      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 f838 	bl	8002626 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b20      	cmp	r3, #32
 80025c2:	d10e      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f06f 0220 	mvn.w	r2, #32
 80025da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f949 	bl	8002874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr

08002612 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002612:	b480      	push	{r7}
 8002614:	b083      	sub	sp, #12
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a40      	ldr	r2, [pc, #256]	; (8002750 <TIM_Base_SetConfig+0x114>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265a:	d00f      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a3d      	ldr	r2, [pc, #244]	; (8002754 <TIM_Base_SetConfig+0x118>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d00b      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a3c      	ldr	r2, [pc, #240]	; (8002758 <TIM_Base_SetConfig+0x11c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d007      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a3b      	ldr	r2, [pc, #236]	; (800275c <TIM_Base_SetConfig+0x120>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d003      	beq.n	800267c <TIM_Base_SetConfig+0x40>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a3a      	ldr	r2, [pc, #232]	; (8002760 <TIM_Base_SetConfig+0x124>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <TIM_Base_SetConfig+0x114>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02b      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269c:	d027      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <TIM_Base_SetConfig+0x118>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d023      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a2b      	ldr	r2, [pc, #172]	; (8002758 <TIM_Base_SetConfig+0x11c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a2a      	ldr	r2, [pc, #168]	; (800275c <TIM_Base_SetConfig+0x120>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01b      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <TIM_Base_SetConfig+0x124>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d017      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a28      	ldr	r2, [pc, #160]	; (8002764 <TIM_Base_SetConfig+0x128>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <TIM_Base_SetConfig+0x12c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00f      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <TIM_Base_SetConfig+0x130>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d00b      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <TIM_Base_SetConfig+0x134>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d007      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a24      	ldr	r2, [pc, #144]	; (8002774 <TIM_Base_SetConfig+0x138>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d003      	beq.n	80026ee <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a23      	ldr	r2, [pc, #140]	; (8002778 <TIM_Base_SetConfig+0x13c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d108      	bne.n	8002700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <TIM_Base_SetConfig+0x114>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <TIM_Base_SetConfig+0xf8>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a0c      	ldr	r2, [pc, #48]	; (8002760 <TIM_Base_SetConfig+0x124>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	615a      	str	r2, [r3, #20]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40010000 	.word	0x40010000
 8002754:	40000400 	.word	0x40000400
 8002758:	40000800 	.word	0x40000800
 800275c:	40000c00 	.word	0x40000c00
 8002760:	40010400 	.word	0x40010400
 8002764:	40014000 	.word	0x40014000
 8002768:	40014400 	.word	0x40014400
 800276c:	40014800 	.word	0x40014800
 8002770:	40001800 	.word	0x40001800
 8002774:	40001c00 	.word	0x40001c00
 8002778:	40002000 	.word	0x40002000

0800277c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002790:	2302      	movs	r3, #2
 8002792:	e05a      	b.n	800284a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a21      	ldr	r2, [pc, #132]	; (8002858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d01d      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a1a      	ldr	r2, [pc, #104]	; (8002864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d10c      	bne.n	8002838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	4313      	orrs	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40010000 	.word	0x40010000
 800285c:	40000400 	.word	0x40000400
 8002860:	40000800 	.word	0x40000800
 8002864:	40000c00 	.word	0x40000c00
 8002868:	40010400 	.word	0x40010400
 800286c:	40014000 	.word	0x40014000
 8002870:	40001800 	.word	0x40001800

08002874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e03f      	b.n	800292e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe f9e6 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fd7b 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b08a      	sub	sp, #40	; 0x28
 800293a:	af02      	add	r7, sp, #8
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	4613      	mov	r3, r2
 8002944:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b20      	cmp	r3, #32
 8002954:	d17c      	bne.n	8002a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_UART_Transmit+0x2c>
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e075      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_UART_Transmit+0x3e>
 8002970:	2302      	movs	r3, #2
 8002972:	e06e      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2221      	movs	r2, #33	; 0x21
 8002986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800298a:	f7fe fbeb 	bl	8001164 <HAL_GetTick>
 800298e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	88fa      	ldrh	r2, [r7, #6]
 8002994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a4:	d108      	bne.n	80029b8 <HAL_UART_Transmit+0x82>
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	e003      	b.n	80029c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80029c8:	e02a      	b.n	8002a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 faf9 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e036      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10b      	bne.n	8002a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	3302      	adds	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	e007      	b.n	8002a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1cf      	bne.n	80029ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2200      	movs	r2, #0
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fac9 	bl	8002fcc <UART_WaitOnFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e006      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b0ba      	sub	sp, #232	; 0xe8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d009      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x66>
 8002aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fbd3 	bl	8003266 <UART_Receive_IT>
      return;
 8002ac0:	e256      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80de 	beq.w	8002c88 <HAL_UART_IRQHandler+0x22c>
 8002acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d106      	bne.n	8002ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80d1 	beq.w	8002c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_UART_IRQHandler+0xae>
 8002af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0201 	orr.w	r2, r3, #1
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_UART_IRQHandler+0xd2>
 8002b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d005      	beq.n	8002b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f043 0202 	orr.w	r2, r3, #2
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00b      	beq.n	8002b52 <HAL_UART_IRQHandler+0xf6>
 8002b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d005      	beq.n	8002b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b56:	f003 0308 	and.w	r3, r3, #8
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_UART_IRQHandler+0x126>
 8002b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d105      	bne.n	8002b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0208 	orr.w	r2, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 81ed 	beq.w	8002f66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b90:	f003 0320 	and.w	r3, r3, #32
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_UART_IRQHandler+0x14e>
 8002b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d002      	beq.n	8002baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fb5e 	bl	8003266 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b40      	cmp	r3, #64	; 0x40
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x17a>
 8002bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04f      	beq.n	8002c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa66 	bl	80030a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d141      	bne.n	8002c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3314      	adds	r3, #20
 8002bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bf8:	e853 3f00 	ldrex	r3, [r3]
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	3314      	adds	r3, #20
 8002c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1d9      	bne.n	8002bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d013      	beq.n	8002c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c42:	4a7d      	ldr	r2, [pc, #500]	; (8002e38 <HAL_UART_IRQHandler+0x3dc>)
 8002c44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe fc34 	bl	80014b8 <HAL_DMA_Abort_IT>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c60:	4610      	mov	r0, r2
 8002c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e00e      	b.n	8002c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f99a 	bl	8002fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6c:	e00a      	b.n	8002c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f996 	bl	8002fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	e006      	b.n	8002c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f992 	bl	8002fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c82:	e170      	b.n	8002f66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c84:	bf00      	nop
    return;
 8002c86:	e16e      	b.n	8002f66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	f040 814a 	bne.w	8002f26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8143 	beq.w	8002f26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	f000 813c 	beq.w	8002f26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60bb      	str	r3, [r7, #8]
 8002cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cce:	2b40      	cmp	r3, #64	; 0x40
 8002cd0:	f040 80b4 	bne.w	8002e3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8140 	beq.w	8002f6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	f080 8139 	bcs.w	8002f6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d0a:	f000 8088 	beq.w	8002e1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	330c      	adds	r3, #12
 8002d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	330c      	adds	r3, #12
 8002d36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1d9      	bne.n	8002d0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3314      	adds	r3, #20
 8002d60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3314      	adds	r3, #20
 8002d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e1      	bne.n	8002d5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3314      	adds	r3, #20
 8002d9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002da0:	e853 3f00 	ldrex	r3, [r3]
 8002da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3314      	adds	r3, #20
 8002db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e3      	bne.n	8002d96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	330c      	adds	r3, #12
 8002de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	f023 0310 	bic.w	r3, r3, #16
 8002df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e00:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e08:	e841 2300 	strex	r3, r2, [r1]
 8002e0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1e3      	bne.n	8002ddc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fadd 	bl	80013d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f8c0 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e34:	e099      	b.n	8002f6a <HAL_UART_IRQHandler+0x50e>
 8002e36:	bf00      	nop
 8002e38:	0800316f 	.word	0x0800316f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	f000 808b 	beq.w	8002f6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8086 	beq.w	8002f6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	330c      	adds	r3, #12
 8002e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6c:	e853 3f00 	ldrex	r3, [r3]
 8002e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	330c      	adds	r3, #12
 8002e82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e86:	647a      	str	r2, [r7, #68]	; 0x44
 8002e88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e8e:	e841 2300 	strex	r3, r2, [r1]
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1e3      	bne.n	8002e62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	3314      	adds	r3, #20
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	e853 3f00 	ldrex	r3, [r3]
 8002ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f023 0301 	bic.w	r3, r3, #1
 8002eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3314      	adds	r3, #20
 8002eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ec6:	e841 2300 	strex	r3, r2, [r1]
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1e3      	bne.n	8002e9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	e853 3f00 	ldrex	r3, [r3]
 8002eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0310 	bic.w	r3, r3, #16
 8002ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	330c      	adds	r3, #12
 8002f00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f04:	61fa      	str	r2, [r7, #28]
 8002f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f08:	69b9      	ldr	r1, [r7, #24]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	e841 2300 	strex	r3, r2, [r1]
 8002f10:	617b      	str	r3, [r7, #20]
   return(result);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1e3      	bne.n	8002ee0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f848 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f24:	e023      	b.n	8002f6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d009      	beq.n	8002f46 <HAL_UART_IRQHandler+0x4ea>
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f929 	bl	8003196 <UART_Transmit_IT>
    return;
 8002f44:	e014      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <HAL_UART_IRQHandler+0x514>
 8002f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f969 	bl	8003236 <UART_EndTransmit_IT>
    return;
 8002f64:	e004      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
    return;
 8002f66:	bf00      	nop
 8002f68:	e002      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
      return;
 8002f6a:	bf00      	nop
 8002f6c:	e000      	b.n	8002f70 <HAL_UART_IRQHandler+0x514>
      return;
 8002f6e:	bf00      	nop
  }
}
 8002f70:	37e8      	adds	r7, #232	; 0xe8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop

08002f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b090      	sub	sp, #64	; 0x40
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fdc:	e050      	b.n	8003080 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d04c      	beq.n	8003080 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d007      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8002fec:	f7fe f8ba 	bl	8001164 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d241      	bcs.n	8003080 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	330c      	adds	r3, #12
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	330c      	adds	r3, #12
 800301a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800301c:	637a      	str	r2, [r7, #52]	; 0x34
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800302a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3314      	adds	r3, #20
 8003036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	e853 3f00 	ldrex	r3, [r3]
 800303e:	613b      	str	r3, [r7, #16]
   return(result);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f023 0301 	bic.w	r3, r3, #1
 8003046:	63bb      	str	r3, [r7, #56]	; 0x38
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	3314      	adds	r3, #20
 800304e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003050:	623a      	str	r2, [r7, #32]
 8003052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	69f9      	ldr	r1, [r7, #28]
 8003056:	6a3a      	ldr	r2, [r7, #32]
 8003058:	e841 2300 	strex	r3, r2, [r1]
 800305c:	61bb      	str	r3, [r7, #24]
   return(result);
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1e5      	bne.n	8003030 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e00f      	b.n	80030a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	429a      	cmp	r2, r3
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	429a      	cmp	r2, r3
 800309c:	d09f      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3740      	adds	r7, #64	; 0x40
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b095      	sub	sp, #84	; 0x54
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	330c      	adds	r3, #12
 80030b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030d0:	643a      	str	r2, [r7, #64]	; 0x40
 80030d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e5      	bne.n	80030b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3314      	adds	r3, #20
 80030ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3314      	adds	r3, #20
 8003102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003106:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800310a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	2b01      	cmp	r3, #1
 800311e:	d119      	bne.n	8003154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	e853 3f00 	ldrex	r3, [r3]
 800312e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f023 0310 	bic.w	r3, r3, #16
 8003136:	647b      	str	r3, [r7, #68]	; 0x44
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	330c      	adds	r3, #12
 800313e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003140:	61ba      	str	r2, [r7, #24]
 8003142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003144:	6979      	ldr	r1, [r7, #20]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	e841 2300 	strex	r3, r2, [r1]
 800314c:	613b      	str	r3, [r7, #16]
   return(result);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1e5      	bne.n	8003120 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003162:	bf00      	nop
 8003164:	3754      	adds	r7, #84	; 0x54
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f7ff ff09 	bl	8002fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003196:	b480      	push	{r7}
 8003198:	b085      	sub	sp, #20
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b21      	cmp	r3, #33	; 0x21
 80031a8:	d13e      	bne.n	8003228 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b2:	d114      	bne.n	80031de <UART_Transmit_IT+0x48>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d110      	bne.n	80031de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	1c9a      	adds	r2, r3, #2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	621a      	str	r2, [r3, #32]
 80031dc:	e008      	b.n	80031f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	1c59      	adds	r1, r3, #1
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6211      	str	r1, [r2, #32]
 80031e8:	781a      	ldrb	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4619      	mov	r1, r3
 80031fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10f      	bne.n	8003224 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003212:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003222:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003224:	2300      	movs	r3, #0
 8003226:	e000      	b.n	800322a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003228:	2302      	movs	r3, #2
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fe8e 	bl	8002f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b08c      	sub	sp, #48	; 0x30
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b22      	cmp	r3, #34	; 0x22
 8003278:	f040 80ab 	bne.w	80033d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003284:	d117      	bne.n	80032b6 <UART_Receive_IT+0x50>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d113      	bne.n	80032b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800328e:	2300      	movs	r3, #0
 8003290:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	629a      	str	r2, [r3, #40]	; 0x28
 80032b4:	e026      	b.n	8003304 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80032bc:	2300      	movs	r3, #0
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c8:	d007      	beq.n	80032da <UART_Receive_IT+0x74>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <UART_Receive_IT+0x82>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	e008      	b.n	80032fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032f4:	b2da      	uxtb	r2, r3
 80032f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29b      	uxth	r3, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4619      	mov	r1, r3
 8003312:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003314:	2b00      	cmp	r3, #0
 8003316:	d15a      	bne.n	80033ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0220 	bic.w	r2, r2, #32
 8003326:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 0201 	bic.w	r2, r2, #1
 8003346:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2220      	movs	r2, #32
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	2b01      	cmp	r3, #1
 8003356:	d135      	bne.n	80033c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	330c      	adds	r3, #12
 8003364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	613b      	str	r3, [r7, #16]
   return(result);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f023 0310 	bic.w	r3, r3, #16
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	330c      	adds	r3, #12
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	623a      	str	r2, [r7, #32]
 8003380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	69f9      	ldr	r1, [r7, #28]
 8003384:	6a3a      	ldr	r2, [r7, #32]
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	61bb      	str	r3, [r7, #24]
   return(result);
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d10a      	bne.n	80033b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fdf9 	bl	8002fb4 <HAL_UARTEx_RxEventCallback>
 80033c2:	e002      	b.n	80033ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fde1 	bl	8002f8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e002      	b.n	80033d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3730      	adds	r7, #48	; 0x30
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033e0:	b0c0      	sub	sp, #256	; 0x100
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	ea40 0301 	orr.w	r3, r0, r1
 8003404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	431a      	orrs	r2, r3
 800341c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003434:	f021 010c 	bic.w	r1, r1, #12
 8003438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003442:	430b      	orrs	r3, r1
 8003444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	6999      	ldr	r1, [r3, #24]
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	ea40 0301 	orr.w	r3, r0, r1
 8003462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b8f      	ldr	r3, [pc, #572]	; (80036a8 <UART_SetConfig+0x2cc>)
 800346c:	429a      	cmp	r2, r3
 800346e:	d005      	beq.n	800347c <UART_SetConfig+0xa0>
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8d      	ldr	r3, [pc, #564]	; (80036ac <UART_SetConfig+0x2d0>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d104      	bne.n	8003486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800347c:	f7fe fe78 	bl	8002170 <HAL_RCC_GetPCLK2Freq>
 8003480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003484:	e003      	b.n	800348e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003486:	f7fe fe5f 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 800348a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800348e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003492:	69db      	ldr	r3, [r3, #28]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003498:	f040 810c 	bne.w	80036b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800349c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ae:	4622      	mov	r2, r4
 80034b0:	462b      	mov	r3, r5
 80034b2:	1891      	adds	r1, r2, r2
 80034b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80034b6:	415b      	adcs	r3, r3
 80034b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034be:	4621      	mov	r1, r4
 80034c0:	eb12 0801 	adds.w	r8, r2, r1
 80034c4:	4629      	mov	r1, r5
 80034c6:	eb43 0901 	adc.w	r9, r3, r1
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034de:	4690      	mov	r8, r2
 80034e0:	4699      	mov	r9, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	eb18 0303 	adds.w	r3, r8, r3
 80034e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80034ec:	462b      	mov	r3, r5
 80034ee:	eb49 0303 	adc.w	r3, r9, r3
 80034f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80034f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800350a:	460b      	mov	r3, r1
 800350c:	18db      	adds	r3, r3, r3
 800350e:	653b      	str	r3, [r7, #80]	; 0x50
 8003510:	4613      	mov	r3, r2
 8003512:	eb42 0303 	adc.w	r3, r2, r3
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
 8003518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800351c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003520:	f7fc fea6 	bl	8000270 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4b61      	ldr	r3, [pc, #388]	; (80036b0 <UART_SetConfig+0x2d4>)
 800352a:	fba3 2302 	umull	r2, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	011c      	lsls	r4, r3, #4
 8003532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003536:	2200      	movs	r2, #0
 8003538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800353c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003544:	4642      	mov	r2, r8
 8003546:	464b      	mov	r3, r9
 8003548:	1891      	adds	r1, r2, r2
 800354a:	64b9      	str	r1, [r7, #72]	; 0x48
 800354c:	415b      	adcs	r3, r3
 800354e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003554:	4641      	mov	r1, r8
 8003556:	eb12 0a01 	adds.w	sl, r2, r1
 800355a:	4649      	mov	r1, r9
 800355c:	eb43 0b01 	adc.w	fp, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800356c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003574:	4692      	mov	sl, r2
 8003576:	469b      	mov	fp, r3
 8003578:	4643      	mov	r3, r8
 800357a:	eb1a 0303 	adds.w	r3, sl, r3
 800357e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003582:	464b      	mov	r3, r9
 8003584:	eb4b 0303 	adc.w	r3, fp, r3
 8003588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800359c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035a0:	460b      	mov	r3, r1
 80035a2:	18db      	adds	r3, r3, r3
 80035a4:	643b      	str	r3, [r7, #64]	; 0x40
 80035a6:	4613      	mov	r3, r2
 80035a8:	eb42 0303 	adc.w	r3, r2, r3
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
 80035ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035b6:	f7fc fe5b 	bl	8000270 <__aeabi_uldivmod>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <UART_SetConfig+0x2d4>)
 80035c2:	fba3 2301 	umull	r2, r3, r3, r1
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2264      	movs	r2, #100	; 0x64
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	1acb      	subs	r3, r1, r3
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035d6:	4b36      	ldr	r3, [pc, #216]	; (80036b0 <UART_SetConfig+0x2d4>)
 80035d8:	fba3 2302 	umull	r2, r3, r3, r2
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035e4:	441c      	add	r4, r3
 80035e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80035f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80035f8:	4642      	mov	r2, r8
 80035fa:	464b      	mov	r3, r9
 80035fc:	1891      	adds	r1, r2, r2
 80035fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003600:	415b      	adcs	r3, r3
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003608:	4641      	mov	r1, r8
 800360a:	1851      	adds	r1, r2, r1
 800360c:	6339      	str	r1, [r7, #48]	; 0x30
 800360e:	4649      	mov	r1, r9
 8003610:	414b      	adcs	r3, r1
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
 8003614:	f04f 0200 	mov.w	r2, #0
 8003618:	f04f 0300 	mov.w	r3, #0
 800361c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003620:	4659      	mov	r1, fp
 8003622:	00cb      	lsls	r3, r1, #3
 8003624:	4651      	mov	r1, sl
 8003626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800362a:	4651      	mov	r1, sl
 800362c:	00ca      	lsls	r2, r1, #3
 800362e:	4610      	mov	r0, r2
 8003630:	4619      	mov	r1, r3
 8003632:	4603      	mov	r3, r0
 8003634:	4642      	mov	r2, r8
 8003636:	189b      	adds	r3, r3, r2
 8003638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800363c:	464b      	mov	r3, r9
 800363e:	460a      	mov	r2, r1
 8003640:	eb42 0303 	adc.w	r3, r2, r3
 8003644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800365c:	460b      	mov	r3, r1
 800365e:	18db      	adds	r3, r3, r3
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
 8003662:	4613      	mov	r3, r2
 8003664:	eb42 0303 	adc.w	r3, r2, r3
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800366e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003672:	f7fc fdfd 	bl	8000270 <__aeabi_uldivmod>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <UART_SetConfig+0x2d4>)
 800367c:	fba3 1302 	umull	r1, r3, r3, r2
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	2164      	movs	r1, #100	; 0x64
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	3332      	adds	r3, #50	; 0x32
 800368e:	4a08      	ldr	r2, [pc, #32]	; (80036b0 <UART_SetConfig+0x2d4>)
 8003690:	fba2 2303 	umull	r2, r3, r2, r3
 8003694:	095b      	lsrs	r3, r3, #5
 8003696:	f003 0207 	and.w	r2, r3, #7
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4422      	add	r2, r4
 80036a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036a4:	e105      	b.n	80038b2 <UART_SetConfig+0x4d6>
 80036a6:	bf00      	nop
 80036a8:	40011000 	.word	0x40011000
 80036ac:	40011400 	.word	0x40011400
 80036b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b8:	2200      	movs	r2, #0
 80036ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036c6:	4642      	mov	r2, r8
 80036c8:	464b      	mov	r3, r9
 80036ca:	1891      	adds	r1, r2, r2
 80036cc:	6239      	str	r1, [r7, #32]
 80036ce:	415b      	adcs	r3, r3
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036d6:	4641      	mov	r1, r8
 80036d8:	1854      	adds	r4, r2, r1
 80036da:	4649      	mov	r1, r9
 80036dc:	eb43 0501 	adc.w	r5, r3, r1
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	00eb      	lsls	r3, r5, #3
 80036ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	18e3      	adds	r3, r4, r3
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036fc:	464b      	mov	r3, r9
 80036fe:	eb45 0303 	adc.w	r3, r5, r3
 8003702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003722:	4629      	mov	r1, r5
 8003724:	008b      	lsls	r3, r1, #2
 8003726:	4621      	mov	r1, r4
 8003728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800372c:	4621      	mov	r1, r4
 800372e:	008a      	lsls	r2, r1, #2
 8003730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003734:	f7fc fd9c 	bl	8000270 <__aeabi_uldivmod>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4b60      	ldr	r3, [pc, #384]	; (80038c0 <UART_SetConfig+0x4e4>)
 800373e:	fba3 2302 	umull	r2, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	011c      	lsls	r4, r3, #4
 8003746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800374a:	2200      	movs	r2, #0
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003758:	4642      	mov	r2, r8
 800375a:	464b      	mov	r3, r9
 800375c:	1891      	adds	r1, r2, r2
 800375e:	61b9      	str	r1, [r7, #24]
 8003760:	415b      	adcs	r3, r3
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003768:	4641      	mov	r1, r8
 800376a:	1851      	adds	r1, r2, r1
 800376c:	6139      	str	r1, [r7, #16]
 800376e:	4649      	mov	r1, r9
 8003770:	414b      	adcs	r3, r1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003780:	4659      	mov	r1, fp
 8003782:	00cb      	lsls	r3, r1, #3
 8003784:	4651      	mov	r1, sl
 8003786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800378a:	4651      	mov	r1, sl
 800378c:	00ca      	lsls	r2, r1, #3
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	4603      	mov	r3, r0
 8003794:	4642      	mov	r2, r8
 8003796:	189b      	adds	r3, r3, r2
 8003798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800379c:	464b      	mov	r3, r9
 800379e:	460a      	mov	r2, r1
 80037a0:	eb42 0303 	adc.w	r3, r2, r3
 80037a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037c0:	4649      	mov	r1, r9
 80037c2:	008b      	lsls	r3, r1, #2
 80037c4:	4641      	mov	r1, r8
 80037c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ca:	4641      	mov	r1, r8
 80037cc:	008a      	lsls	r2, r1, #2
 80037ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037d2:	f7fc fd4d 	bl	8000270 <__aeabi_uldivmod>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <UART_SetConfig+0x4e4>)
 80037dc:	fba3 1302 	umull	r1, r3, r3, r2
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	2164      	movs	r1, #100	; 0x64
 80037e4:	fb01 f303 	mul.w	r3, r1, r3
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	3332      	adds	r3, #50	; 0x32
 80037ee:	4a34      	ldr	r2, [pc, #208]	; (80038c0 <UART_SetConfig+0x4e4>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fa:	441c      	add	r4, r3
 80037fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003800:	2200      	movs	r2, #0
 8003802:	673b      	str	r3, [r7, #112]	; 0x70
 8003804:	677a      	str	r2, [r7, #116]	; 0x74
 8003806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800380a:	4642      	mov	r2, r8
 800380c:	464b      	mov	r3, r9
 800380e:	1891      	adds	r1, r2, r2
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	415b      	adcs	r3, r3
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800381a:	4641      	mov	r1, r8
 800381c:	1851      	adds	r1, r2, r1
 800381e:	6039      	str	r1, [r7, #0]
 8003820:	4649      	mov	r1, r9
 8003822:	414b      	adcs	r3, r1
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003832:	4659      	mov	r1, fp
 8003834:	00cb      	lsls	r3, r1, #3
 8003836:	4651      	mov	r1, sl
 8003838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800383c:	4651      	mov	r1, sl
 800383e:	00ca      	lsls	r2, r1, #3
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	4603      	mov	r3, r0
 8003846:	4642      	mov	r2, r8
 8003848:	189b      	adds	r3, r3, r2
 800384a:	66bb      	str	r3, [r7, #104]	; 0x68
 800384c:	464b      	mov	r3, r9
 800384e:	460a      	mov	r2, r1
 8003850:	eb42 0303 	adc.w	r3, r2, r3
 8003854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	663b      	str	r3, [r7, #96]	; 0x60
 8003860:	667a      	str	r2, [r7, #100]	; 0x64
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800386e:	4649      	mov	r1, r9
 8003870:	008b      	lsls	r3, r1, #2
 8003872:	4641      	mov	r1, r8
 8003874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003878:	4641      	mov	r1, r8
 800387a:	008a      	lsls	r2, r1, #2
 800387c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003880:	f7fc fcf6 	bl	8000270 <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <UART_SetConfig+0x4e4>)
 800388a:	fba3 1302 	umull	r1, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2164      	movs	r1, #100	; 0x64
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a08      	ldr	r2, [pc, #32]	; (80038c0 <UART_SetConfig+0x4e4>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4422      	add	r2, r4
 80038b0:	609a      	str	r2, [r3, #8]
}
 80038b2:	bf00      	nop
 80038b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038b8:	46bd      	mov	sp, r7
 80038ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038be:	bf00      	nop
 80038c0:	51eb851f 	.word	0x51eb851f

080038c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d6:	2b84      	cmp	r3, #132	; 0x84
 80038d8:	d005      	beq.n	80038e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4413      	add	r3, r2
 80038e2:	3303      	adds	r3, #3
 80038e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038f8:	f000 faea 	bl	8003ed0 <vTaskStartScheduler>
  
  return osOK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	bd80      	pop	{r7, pc}

08003902 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003904:	b089      	sub	sp, #36	; 0x24
 8003906:	af04      	add	r7, sp, #16
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d020      	beq.n	8003956 <osThreadCreate+0x54>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01c      	beq.n	8003956 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685c      	ldr	r4, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681d      	ldr	r5, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691e      	ldr	r6, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ffc8 	bl	80038c4 <makeFreeRtosPriority>
 8003934:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800393e:	9202      	str	r2, [sp, #8]
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	9100      	str	r1, [sp, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	4632      	mov	r2, r6
 8003948:	4629      	mov	r1, r5
 800394a:	4620      	mov	r0, r4
 800394c:	f000 f8f8 	bl	8003b40 <xTaskCreateStatic>
 8003950:	4603      	mov	r3, r0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e01c      	b.n	8003990 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685c      	ldr	r4, [r3, #4]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003962:	b29e      	uxth	r6, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ffaa 	bl	80038c4 <makeFreeRtosPriority>
 8003970:	4602      	mov	r2, r0
 8003972:	f107 030c 	add.w	r3, r7, #12
 8003976:	9301      	str	r3, [sp, #4]
 8003978:	9200      	str	r2, [sp, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	4632      	mov	r2, r6
 800397e:	4629      	mov	r1, r5
 8003980:	4620      	mov	r0, r4
 8003982:	f000 f93a 	bl	8003bfa <xTaskCreate>
 8003986:	4603      	mov	r3, r0
 8003988:	2b01      	cmp	r3, #1
 800398a:	d001      	beq.n	8003990 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003990:	68fb      	ldr	r3, [r7, #12]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800399a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <osDelay+0x16>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	e000      	b.n	80039b2 <osDelay+0x18>
 80039b0:	2301      	movs	r3, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fa58 	bl	8003e68 <vTaskDelay>
  
  return osOK;
 80039b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80039c6:	f000 fd77 	bl	80044b8 <xTaskGetSchedulerState>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d001      	beq.n	80039d4 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80039d0:	f000 ffb2 	bl	8004938 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80039d4:	bf00      	nop
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0208 	add.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f04f 32ff 	mov.w	r2, #4294967295
 80039f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f103 0208 	add.w	r2, r3, #8
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f103 0208 	add.w	r2, r3, #8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	601a      	str	r2, [r3, #0]
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d103      	bne.n	8003a9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e00c      	b.n	8003ab4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	e002      	b.n	8003aa8 <vListInsert+0x2e>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d2f6      	bcs.n	8003aa2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6892      	ldr	r2, [r2, #8]
 8003b02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6852      	ldr	r2, [r2, #4]
 8003b0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d103      	bne.n	8003b20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08e      	sub	sp, #56	; 0x38
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	61fb      	str	r3, [r7, #28]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b86:	2354      	movs	r3, #84	; 0x54
 8003b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	2b54      	cmp	r3, #84	; 0x54
 8003b8e:	d00a      	beq.n	8003ba6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	61bb      	str	r3, [r7, #24]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003ba6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01e      	beq.n	8003bec <xTaskCreateStatic+0xac>
 8003bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01b      	beq.n	8003bec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bbc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	9303      	str	r3, [sp, #12]
 8003bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bcc:	9302      	str	r3, [sp, #8]
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f000 f850 	bl	8003c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003be6:	f000 f8d5 	bl	8003d94 <prvAddNewTaskToReadyList>
 8003bea:	e001      	b.n	8003bf0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bf0:	697b      	ldr	r3, [r7, #20]
	}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3728      	adds	r7, #40	; 0x28
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08c      	sub	sp, #48	; 0x30
 8003bfe:	af04      	add	r7, sp, #16
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	4613      	mov	r3, r2
 8003c08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 fee2 	bl	80049d8 <pvPortMalloc>
 8003c14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c1c:	2054      	movs	r0, #84	; 0x54
 8003c1e:	f000 fedb 	bl	80049d8 <pvPortMalloc>
 8003c22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003c30:	e005      	b.n	8003c3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c32:	6978      	ldr	r0, [r7, #20]
 8003c34:	f000 ff9c 	bl	8004b70 <vPortFree>
 8003c38:	e001      	b.n	8003c3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9303      	str	r3, [sp, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	9302      	str	r3, [sp, #8]
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 f80e 	bl	8003c84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c68:	69f8      	ldr	r0, [r7, #28]
 8003c6a:	f000 f893 	bl	8003d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	e002      	b.n	8003c7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c7a:	69bb      	ldr	r3, [r7, #24]
	}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	f023 0307 	bic.w	r3, r3, #7
 8003caa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d00a      	beq.n	8003ccc <prvInitialiseNewTask+0x48>
	__asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	617b      	str	r3, [r7, #20]
}
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01f      	beq.n	8003d12 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e012      	b.n	8003cfe <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	4413      	add	r3, r2
 8003cde:	7819      	ldrb	r1, [r3, #0]
 8003ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3334      	adds	r3, #52	; 0x34
 8003ce8:	460a      	mov	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b0f      	cmp	r3, #15
 8003d02:	d9e9      	bls.n	8003cd8 <prvInitialiseNewTask+0x54>
 8003d04:	e000      	b.n	8003d08 <prvInitialiseNewTask+0x84>
			{
				break;
 8003d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d10:	e003      	b.n	8003d1a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	2b06      	cmp	r3, #6
 8003d1e:	d901      	bls.n	8003d24 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d20:	2306      	movs	r3, #6
 8003d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d2e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2200      	movs	r2, #0
 8003d34:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff fe6c 	bl	8003a18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	3318      	adds	r3, #24
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe67 	bl	8003a18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	f1c3 0207 	rsb	r2, r3, #7
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	2200      	movs	r2, #0
 8003d64:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	69b8      	ldr	r0, [r7, #24]
 8003d74:	f000 fc24 	bl	80045c0 <pxPortInitialiseStack>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d8a:	bf00      	nop
 8003d8c:	3720      	adds	r7, #32
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d9c:	f000 fd3a 	bl	8004814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003da0:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <prvAddNewTaskToReadyList+0xb8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a29      	ldr	r2, [pc, #164]	; (8003e4c <prvAddNewTaskToReadyList+0xb8>)
 8003da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003daa:	4b29      	ldr	r3, [pc, #164]	; (8003e50 <prvAddNewTaskToReadyList+0xbc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003db2:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <prvAddNewTaskToReadyList+0xbc>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <prvAddNewTaskToReadyList+0xb8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d110      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dc0:	f000 fabc 	bl	800433c <prvInitialiseTaskLists>
 8003dc4:	e00d      	b.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dc6:	4b23      	ldr	r3, [pc, #140]	; (8003e54 <prvAddNewTaskToReadyList+0xc0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <prvAddNewTaskToReadyList+0xbc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d802      	bhi.n	8003de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ddc:	4a1c      	ldr	r2, [pc, #112]	; (8003e50 <prvAddNewTaskToReadyList+0xbc>)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003de2:	4b1d      	ldr	r3, [pc, #116]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3301      	adds	r3, #1
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <prvAddNewTaskToReadyList+0xc4>)
 8003dea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	2201      	movs	r2, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <prvAddNewTaskToReadyList+0xc8>)
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <prvAddNewTaskToReadyList+0xcc>)
 8003e0c:	441a      	add	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7ff fe0c 	bl	8003a32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e1a:	f000 fd2b 	bl	8004874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <prvAddNewTaskToReadyList+0xc0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00e      	beq.n	8003e44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <prvAddNewTaskToReadyList+0xbc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvAddNewTaskToReadyList+0xd0>)
 8003e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	2000055c 	.word	0x2000055c
 8003e50:	2000045c 	.word	0x2000045c
 8003e54:	20000568 	.word	0x20000568
 8003e58:	20000578 	.word	0x20000578
 8003e5c:	20000564 	.word	0x20000564
 8003e60:	20000460 	.word	0x20000460
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d017      	beq.n	8003eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e7a:	4b13      	ldr	r3, [pc, #76]	; (8003ec8 <vTaskDelay+0x60>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <vTaskDelay+0x30>
	__asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	60bb      	str	r3, [r7, #8]
}
 8003e94:	bf00      	nop
 8003e96:	e7fe      	b.n	8003e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e98:	f000 f87a 	bl	8003f90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb28 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ea4:	f000 f882 	bl	8003fac <xTaskResumeAll>
 8003ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d107      	bne.n	8003ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003eb0:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <vTaskDelay+0x64>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000584 	.word	0x20000584
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003ede:	463a      	mov	r2, r7
 8003ee0:	1d39      	adds	r1, r7, #4
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fb44 	bl	8000574 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	9202      	str	r2, [sp, #8]
 8003ef4:	9301      	str	r3, [sp, #4]
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	2300      	movs	r3, #0
 8003efc:	460a      	mov	r2, r1
 8003efe:	491e      	ldr	r1, [pc, #120]	; (8003f78 <vTaskStartScheduler+0xa8>)
 8003f00:	481e      	ldr	r0, [pc, #120]	; (8003f7c <vTaskStartScheduler+0xac>)
 8003f02:	f7ff fe1d 	bl	8003b40 <xTaskCreateStatic>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <vTaskStartScheduler+0xb0>)
 8003f0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f0c:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <vTaskStartScheduler+0xb0>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f14:	2301      	movs	r3, #1
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e001      	b.n	8003f1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d116      	bne.n	8003f52 <vTaskStartScheduler+0x82>
	__asm volatile
 8003f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f28:	f383 8811 	msr	BASEPRI, r3
 8003f2c:	f3bf 8f6f 	isb	sy
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	613b      	str	r3, [r7, #16]
}
 8003f36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f38:	4b12      	ldr	r3, [pc, #72]	; (8003f84 <vTaskStartScheduler+0xb4>)
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f40:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <vTaskStartScheduler+0xb8>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <vTaskStartScheduler+0xbc>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f4c:	f000 fbc0 	bl	80046d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f50:	e00e      	b.n	8003f70 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f58:	d10a      	bne.n	8003f70 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5e:	f383 8811 	msr	BASEPRI, r3
 8003f62:	f3bf 8f6f 	isb	sy
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	60fb      	str	r3, [r7, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	e7fe      	b.n	8003f6e <vTaskStartScheduler+0x9e>
}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	08007008 	.word	0x08007008
 8003f7c:	0800430d 	.word	0x0800430d
 8003f80:	20000580 	.word	0x20000580
 8003f84:	2000057c 	.word	0x2000057c
 8003f88:	20000568 	.word	0x20000568
 8003f8c:	20000560 	.word	0x20000560

08003f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f94:	4b04      	ldr	r3, [pc, #16]	; (8003fa8 <vTaskSuspendAll+0x18>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	4a03      	ldr	r2, [pc, #12]	; (8003fa8 <vTaskSuspendAll+0x18>)
 8003f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	20000584 	.word	0x20000584

08003fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <xTaskResumeAll+0x114>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	603b      	str	r3, [r7, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fd8:	f000 fc1c 	bl	8004814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fdc:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <xTaskResumeAll+0x114>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	4a37      	ldr	r2, [pc, #220]	; (80040c0 <xTaskResumeAll+0x114>)
 8003fe4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe6:	4b36      	ldr	r3, [pc, #216]	; (80040c0 <xTaskResumeAll+0x114>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d161      	bne.n	80040b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fee:	4b35      	ldr	r3, [pc, #212]	; (80040c4 <xTaskResumeAll+0x118>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d05d      	beq.n	80040b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ff6:	e02e      	b.n	8004056 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff8:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <xTaskResumeAll+0x11c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3318      	adds	r3, #24
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff fd71 	bl	8003aec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	3304      	adds	r3, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fd6c 	bl	8003aec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	2201      	movs	r2, #1
 800401a:	409a      	lsls	r2, r3
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <xTaskResumeAll+0x120>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4313      	orrs	r3, r2
 8004022:	4a2a      	ldr	r2, [pc, #168]	; (80040cc <xTaskResumeAll+0x120>)
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <xTaskResumeAll+0x124>)
 8004034:	441a      	add	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3304      	adds	r3, #4
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7ff fcf8 	bl	8003a32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004046:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <xTaskResumeAll+0x128>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004050:	4b21      	ldr	r3, [pc, #132]	; (80040d8 <xTaskResumeAll+0x12c>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004056:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <xTaskResumeAll+0x11c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1cc      	bne.n	8003ff8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004064:	f000 fa08 	bl	8004478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <xTaskResumeAll+0x130>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004074:	f000 f836 	bl	80040e4 <xTaskIncrementTick>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800407e:	4b16      	ldr	r3, [pc, #88]	; (80040d8 <xTaskResumeAll+0x12c>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3b01      	subs	r3, #1
 8004088:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1f1      	bne.n	8004074 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <xTaskResumeAll+0x130>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <xTaskResumeAll+0x12c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d009      	beq.n	80040b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800409e:	2301      	movs	r3, #1
 80040a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <xTaskResumeAll+0x134>)
 80040a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f000 fbdf 	bl	8004874 <vPortExitCritical>

	return xAlreadyYielded;
 80040b6:	68bb      	ldr	r3, [r7, #8]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	20000584 	.word	0x20000584
 80040c4:	2000055c 	.word	0x2000055c
 80040c8:	2000051c 	.word	0x2000051c
 80040cc:	20000564 	.word	0x20000564
 80040d0:	20000460 	.word	0x20000460
 80040d4:	2000045c 	.word	0x2000045c
 80040d8:	20000570 	.word	0x20000570
 80040dc:	2000056c 	.word	0x2000056c
 80040e0:	e000ed04 	.word	0xe000ed04

080040e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ee:	4b4e      	ldr	r3, [pc, #312]	; (8004228 <xTaskIncrementTick+0x144>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 808e 	bne.w	8004214 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040f8:	4b4c      	ldr	r3, [pc, #304]	; (800422c <xTaskIncrementTick+0x148>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004100:	4a4a      	ldr	r2, [pc, #296]	; (800422c <xTaskIncrementTick+0x148>)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d120      	bne.n	800414e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800410c:	4b48      	ldr	r3, [pc, #288]	; (8004230 <xTaskIncrementTick+0x14c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <xTaskIncrementTick+0x48>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	603b      	str	r3, [r7, #0]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <xTaskIncrementTick+0x46>
 800412c:	4b40      	ldr	r3, [pc, #256]	; (8004230 <xTaskIncrementTick+0x14c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b40      	ldr	r3, [pc, #256]	; (8004234 <xTaskIncrementTick+0x150>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3e      	ldr	r2, [pc, #248]	; (8004230 <xTaskIncrementTick+0x14c>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4a3e      	ldr	r2, [pc, #248]	; (8004234 <xTaskIncrementTick+0x150>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6013      	str	r3, [r2, #0]
 8004140:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <xTaskIncrementTick+0x154>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3301      	adds	r3, #1
 8004146:	4a3c      	ldr	r2, [pc, #240]	; (8004238 <xTaskIncrementTick+0x154>)
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	f000 f995 	bl	8004478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <xTaskIncrementTick+0x158>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	429a      	cmp	r2, r3
 8004156:	d348      	bcc.n	80041ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004158:	4b35      	ldr	r3, [pc, #212]	; (8004230 <xTaskIncrementTick+0x14c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d104      	bne.n	800416c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <xTaskIncrementTick+0x158>)
 8004164:	f04f 32ff 	mov.w	r2, #4294967295
 8004168:	601a      	str	r2, [r3, #0]
					break;
 800416a:	e03e      	b.n	80041ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800416c:	4b30      	ldr	r3, [pc, #192]	; (8004230 <xTaskIncrementTick+0x14c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	429a      	cmp	r2, r3
 8004182:	d203      	bcs.n	800418c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004184:	4a2d      	ldr	r2, [pc, #180]	; (800423c <xTaskIncrementTick+0x158>)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800418a:	e02e      	b.n	80041ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fcab 	bl	8003aec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d004      	beq.n	80041a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	3318      	adds	r3, #24
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fca2 	bl	8003aec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	4b23      	ldr	r3, [pc, #140]	; (8004240 <xTaskIncrementTick+0x15c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	4a22      	ldr	r2, [pc, #136]	; (8004240 <xTaskIncrementTick+0x15c>)
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4a1f      	ldr	r2, [pc, #124]	; (8004244 <xTaskIncrementTick+0x160>)
 80041c8:	441a      	add	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3304      	adds	r3, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7ff fc2e 	bl	8003a32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041da:	4b1b      	ldr	r3, [pc, #108]	; (8004248 <xTaskIncrementTick+0x164>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d3b9      	bcc.n	8004158 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e8:	e7b6      	b.n	8004158 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041ea:	4b17      	ldr	r3, [pc, #92]	; (8004248 <xTaskIncrementTick+0x164>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f0:	4914      	ldr	r1, [pc, #80]	; (8004244 <xTaskIncrementTick+0x160>)
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d901      	bls.n	8004206 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004202:	2301      	movs	r3, #1
 8004204:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <xTaskIncrementTick+0x168>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800420e:	2301      	movs	r3, #1
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	e004      	b.n	800421e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <xTaskIncrementTick+0x16c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	4a0d      	ldr	r2, [pc, #52]	; (8004250 <xTaskIncrementTick+0x16c>)
 800421c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800421e:	697b      	ldr	r3, [r7, #20]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20000584 	.word	0x20000584
 800422c:	20000560 	.word	0x20000560
 8004230:	20000514 	.word	0x20000514
 8004234:	20000518 	.word	0x20000518
 8004238:	20000574 	.word	0x20000574
 800423c:	2000057c 	.word	0x2000057c
 8004240:	20000564 	.word	0x20000564
 8004244:	20000460 	.word	0x20000460
 8004248:	2000045c 	.word	0x2000045c
 800424c:	20000570 	.word	0x20000570
 8004250:	2000056c 	.word	0x2000056c

08004254 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800425a:	4b27      	ldr	r3, [pc, #156]	; (80042f8 <vTaskSwitchContext+0xa4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004262:	4b26      	ldr	r3, [pc, #152]	; (80042fc <vTaskSwitchContext+0xa8>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004268:	e03f      	b.n	80042ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800426a:	4b24      	ldr	r3, [pc, #144]	; (80042fc <vTaskSwitchContext+0xa8>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004270:	4b23      	ldr	r3, [pc, #140]	; (8004300 <vTaskSwitchContext+0xac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	fab3 f383 	clz	r3, r3
 800427c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800427e:	7afb      	ldrb	r3, [r7, #11]
 8004280:	f1c3 031f 	rsb	r3, r3, #31
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	491f      	ldr	r1, [pc, #124]	; (8004304 <vTaskSwitchContext+0xb0>)
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	607b      	str	r3, [r7, #4]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <vTaskSwitchContext+0x5a>
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <vTaskSwitchContext+0xb0>)
 80042bc:	4413      	add	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	605a      	str	r2, [r3, #4]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3308      	adds	r3, #8
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d104      	bne.n	80042e0 <vTaskSwitchContext+0x8c>
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4a08      	ldr	r2, [pc, #32]	; (8004308 <vTaskSwitchContext+0xb4>)
 80042e8:	6013      	str	r3, [r2, #0]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000584 	.word	0x20000584
 80042fc:	20000570 	.word	0x20000570
 8004300:	20000564 	.word	0x20000564
 8004304:	20000460 	.word	0x20000460
 8004308:	2000045c 	.word	0x2000045c

0800430c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004314:	f000 f852 	bl	80043bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <prvIdleTask+0x28>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d9f9      	bls.n	8004314 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004320:	4b05      	ldr	r3, [pc, #20]	; (8004338 <prvIdleTask+0x2c>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004330:	e7f0      	b.n	8004314 <prvIdleTask+0x8>
 8004332:	bf00      	nop
 8004334:	20000460 	.word	0x20000460
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004342:	2300      	movs	r3, #0
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	e00c      	b.n	8004362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4a12      	ldr	r2, [pc, #72]	; (800439c <prvInitialiseTaskLists+0x60>)
 8004354:	4413      	add	r3, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff fb3e 	bl	80039d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3301      	adds	r3, #1
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b06      	cmp	r3, #6
 8004366:	d9ef      	bls.n	8004348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004368:	480d      	ldr	r0, [pc, #52]	; (80043a0 <prvInitialiseTaskLists+0x64>)
 800436a:	f7ff fb35 	bl	80039d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800436e:	480d      	ldr	r0, [pc, #52]	; (80043a4 <prvInitialiseTaskLists+0x68>)
 8004370:	f7ff fb32 	bl	80039d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004374:	480c      	ldr	r0, [pc, #48]	; (80043a8 <prvInitialiseTaskLists+0x6c>)
 8004376:	f7ff fb2f 	bl	80039d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800437a:	480c      	ldr	r0, [pc, #48]	; (80043ac <prvInitialiseTaskLists+0x70>)
 800437c:	f7ff fb2c 	bl	80039d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004380:	480b      	ldr	r0, [pc, #44]	; (80043b0 <prvInitialiseTaskLists+0x74>)
 8004382:	f7ff fb29 	bl	80039d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004386:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <prvInitialiseTaskLists+0x78>)
 8004388:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <prvInitialiseTaskLists+0x64>)
 800438a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <prvInitialiseTaskLists+0x7c>)
 800438e:	4a05      	ldr	r2, [pc, #20]	; (80043a4 <prvInitialiseTaskLists+0x68>)
 8004390:	601a      	str	r2, [r3, #0]
}
 8004392:	bf00      	nop
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000460 	.word	0x20000460
 80043a0:	200004ec 	.word	0x200004ec
 80043a4:	20000500 	.word	0x20000500
 80043a8:	2000051c 	.word	0x2000051c
 80043ac:	20000530 	.word	0x20000530
 80043b0:	20000548 	.word	0x20000548
 80043b4:	20000514 	.word	0x20000514
 80043b8:	20000518 	.word	0x20000518

080043bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043c2:	e019      	b.n	80043f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80043c4:	f000 fa26 	bl	8004814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c8:	4b10      	ldr	r3, [pc, #64]	; (800440c <prvCheckTasksWaitingTermination+0x50>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3304      	adds	r3, #4
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fb89 	bl	8003aec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043da:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <prvCheckTasksWaitingTermination+0x54>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3b01      	subs	r3, #1
 80043e0:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <prvCheckTasksWaitingTermination+0x54>)
 80043e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043e4:	4b0b      	ldr	r3, [pc, #44]	; (8004414 <prvCheckTasksWaitingTermination+0x58>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <prvCheckTasksWaitingTermination+0x58>)
 80043ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043ee:	f000 fa41 	bl	8004874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f810 	bl	8004418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <prvCheckTasksWaitingTermination+0x58>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e1      	bne.n	80043c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	3708      	adds	r7, #8
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000530 	.word	0x20000530
 8004410:	2000055c 	.word	0x2000055c
 8004414:	20000544 	.word	0x20000544

08004418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004426:	2b00      	cmp	r3, #0
 8004428:	d108      	bne.n	800443c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fb9e 	bl	8004b70 <vPortFree>
				vPortFree( pxTCB );
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fb9b 	bl	8004b70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800443a:	e018      	b.n	800446e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004442:	2b01      	cmp	r3, #1
 8004444:	d103      	bne.n	800444e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fb92 	bl	8004b70 <vPortFree>
	}
 800444c:	e00f      	b.n	800446e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004454:	2b02      	cmp	r3, #2
 8004456:	d00a      	beq.n	800446e <prvDeleteTCB+0x56>
	__asm volatile
 8004458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445c:	f383 8811 	msr	BASEPRI, r3
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	60fb      	str	r3, [r7, #12]
}
 800446a:	bf00      	nop
 800446c:	e7fe      	b.n	800446c <prvDeleteTCB+0x54>
	}
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <prvResetNextTaskUnblockTime+0x38>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <prvResetNextTaskUnblockTime+0x3c>)
 800448a:	f04f 32ff 	mov.w	r2, #4294967295
 800448e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004490:	e008      	b.n	80044a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004492:	4b07      	ldr	r3, [pc, #28]	; (80044b0 <prvResetNextTaskUnblockTime+0x38>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <prvResetNextTaskUnblockTime+0x3c>)
 80044a2:	6013      	str	r3, [r2, #0]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	20000514 	.word	0x20000514
 80044b4:	2000057c 	.word	0x2000057c

080044b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80044be:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <xTaskGetSchedulerState+0x34>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80044c6:	2301      	movs	r3, #1
 80044c8:	607b      	str	r3, [r7, #4]
 80044ca:	e008      	b.n	80044de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044cc:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <xTaskGetSchedulerState+0x38>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d102      	bne.n	80044da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80044d4:	2302      	movs	r3, #2
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	e001      	b.n	80044de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044de:	687b      	ldr	r3, [r7, #4]
	}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	20000568 	.word	0x20000568
 80044f0:	20000584 	.word	0x20000584

080044f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044fe:	4b29      	ldr	r3, [pc, #164]	; (80045a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004504:	4b28      	ldr	r3, [pc, #160]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff faee 	bl	8003aec <uxListRemove>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004516:	4b24      	ldr	r3, [pc, #144]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	2201      	movs	r2, #1
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	43da      	mvns	r2, r3
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4013      	ands	r3, r2
 800452a:	4a20      	ldr	r2, [pc, #128]	; (80045ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800452c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004534:	d10a      	bne.n	800454c <prvAddCurrentTaskToDelayedList+0x58>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d007      	beq.n	800454c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	481a      	ldr	r0, [pc, #104]	; (80045b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004546:	f7ff fa74 	bl	8003a32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800454a:	e026      	b.n	800459a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4413      	add	r3, r2
 8004552:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	429a      	cmp	r2, r3
 8004562:	d209      	bcs.n	8004578 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3304      	adds	r3, #4
 800456e:	4619      	mov	r1, r3
 8004570:	4610      	mov	r0, r2
 8004572:	f7ff fa82 	bl	8003a7a <vListInsert>
}
 8004576:	e010      	b.n	800459a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	4b0a      	ldr	r3, [pc, #40]	; (80045a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3304      	adds	r3, #4
 8004582:	4619      	mov	r1, r3
 8004584:	4610      	mov	r0, r2
 8004586:	f7ff fa78 	bl	8003a7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800458a:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	429a      	cmp	r2, r3
 8004592:	d202      	bcs.n	800459a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004594:	4a09      	ldr	r2, [pc, #36]	; (80045bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6013      	str	r3, [r2, #0]
}
 800459a:	bf00      	nop
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000560 	.word	0x20000560
 80045a8:	2000045c 	.word	0x2000045c
 80045ac:	20000564 	.word	0x20000564
 80045b0:	20000548 	.word	0x20000548
 80045b4:	20000518 	.word	0x20000518
 80045b8:	20000514 	.word	0x20000514
 80045bc:	2000057c 	.word	0x2000057c

080045c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	3b04      	subs	r3, #4
 80045d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b04      	subs	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b04      	subs	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045f0:	4a0c      	ldr	r2, [pc, #48]	; (8004624 <pxPortInitialiseStack+0x64>)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3b14      	subs	r3, #20
 80045fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b04      	subs	r3, #4
 8004606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f06f 0202 	mvn.w	r2, #2
 800460e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3b20      	subs	r3, #32
 8004614:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004616:	68fb      	ldr	r3, [r7, #12]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	08004629 	.word	0x08004629

08004628 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004632:	4b12      	ldr	r3, [pc, #72]	; (800467c <prvTaskExitError+0x54>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d00a      	beq.n	8004652 <prvTaskExitError+0x2a>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60fb      	str	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	e7fe      	b.n	8004650 <prvTaskExitError+0x28>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60bb      	str	r3, [r7, #8]
}
 8004664:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004666:	bf00      	nop
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0fc      	beq.n	8004668 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800466e:	bf00      	nop
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000010 	.word	0x20000010

08004680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <pxCurrentTCBConst2>)
 8004682:	6819      	ldr	r1, [r3, #0]
 8004684:	6808      	ldr	r0, [r1, #0]
 8004686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468a:	f380 8809 	msr	PSP, r0
 800468e:	f3bf 8f6f 	isb	sy
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8811 	msr	BASEPRI, r0
 800469a:	4770      	bx	lr
 800469c:	f3af 8000 	nop.w

080046a0 <pxCurrentTCBConst2>:
 80046a0:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop

080046a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80046a8:	4808      	ldr	r0, [pc, #32]	; (80046cc <prvPortStartFirstTask+0x24>)
 80046aa:	6800      	ldr	r0, [r0, #0]
 80046ac:	6800      	ldr	r0, [r0, #0]
 80046ae:	f380 8808 	msr	MSP, r0
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f380 8814 	msr	CONTROL, r0
 80046ba:	b662      	cpsie	i
 80046bc:	b661      	cpsie	f
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	df00      	svc	0
 80046c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ca:	bf00      	nop
 80046cc:	e000ed08 	.word	0xe000ed08

080046d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b086      	sub	sp, #24
 80046d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046d6:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <xPortStartScheduler+0x120>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a46      	ldr	r2, [pc, #280]	; (80047f4 <xPortStartScheduler+0x124>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10a      	bne.n	80046f6 <xPortStartScheduler+0x26>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	613b      	str	r3, [r7, #16]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046f6:	4b3e      	ldr	r3, [pc, #248]	; (80047f0 <xPortStartScheduler+0x120>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3f      	ldr	r2, [pc, #252]	; (80047f8 <xPortStartScheduler+0x128>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d10a      	bne.n	8004716 <xPortStartScheduler+0x46>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60fb      	str	r3, [r7, #12]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004716:	4b39      	ldr	r3, [pc, #228]	; (80047fc <xPortStartScheduler+0x12c>)
 8004718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	22ff      	movs	r2, #255	; 0xff
 8004726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4b31      	ldr	r3, [pc, #196]	; (8004800 <xPortStartScheduler+0x130>)
 800473c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800473e:	4b31      	ldr	r3, [pc, #196]	; (8004804 <xPortStartScheduler+0x134>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004744:	e009      	b.n	800475a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <xPortStartScheduler+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3b01      	subs	r3, #1
 800474c:	4a2d      	ldr	r2, [pc, #180]	; (8004804 <xPortStartScheduler+0x134>)
 800474e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004750:	78fb      	ldrb	r3, [r7, #3]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	005b      	lsls	r3, r3, #1
 8004756:	b2db      	uxtb	r3, r3
 8004758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800475a:	78fb      	ldrb	r3, [r7, #3]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004762:	2b80      	cmp	r3, #128	; 0x80
 8004764:	d0ef      	beq.n	8004746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004766:	4b27      	ldr	r3, [pc, #156]	; (8004804 <xPortStartScheduler+0x134>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1c3 0307 	rsb	r3, r3, #7
 800476e:	2b04      	cmp	r3, #4
 8004770:	d00a      	beq.n	8004788 <xPortStartScheduler+0xb8>
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	60bb      	str	r3, [r7, #8]
}
 8004784:	bf00      	nop
 8004786:	e7fe      	b.n	8004786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004788:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <xPortStartScheduler+0x134>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4a1d      	ldr	r2, [pc, #116]	; (8004804 <xPortStartScheduler+0x134>)
 8004790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <xPortStartScheduler+0x134>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800479a:	4a1a      	ldr	r2, [pc, #104]	; (8004804 <xPortStartScheduler+0x134>)
 800479c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	b2da      	uxtb	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80047a6:	4b18      	ldr	r3, [pc, #96]	; (8004808 <xPortStartScheduler+0x138>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <xPortStartScheduler+0x138>)
 80047ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047b2:	4b15      	ldr	r3, [pc, #84]	; (8004808 <xPortStartScheduler+0x138>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <xPortStartScheduler+0x138>)
 80047b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047be:	f000 f8dd 	bl	800497c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047c2:	4b12      	ldr	r3, [pc, #72]	; (800480c <xPortStartScheduler+0x13c>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047c8:	f000 f8fc 	bl	80049c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <xPortStartScheduler+0x140>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a0f      	ldr	r2, [pc, #60]	; (8004810 <xPortStartScheduler+0x140>)
 80047d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047d8:	f7ff ff66 	bl	80046a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047dc:	f7ff fd3a 	bl	8004254 <vTaskSwitchContext>
	prvTaskExitError();
 80047e0:	f7ff ff22 	bl	8004628 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00
 80047f4:	410fc271 	.word	0x410fc271
 80047f8:	410fc270 	.word	0x410fc270
 80047fc:	e000e400 	.word	0xe000e400
 8004800:	20000588 	.word	0x20000588
 8004804:	2000058c 	.word	0x2000058c
 8004808:	e000ed20 	.word	0xe000ed20
 800480c:	20000010 	.word	0x20000010
 8004810:	e000ef34 	.word	0xe000ef34

08004814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
}
 800482c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <vPortEnterCritical+0x58>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a0d      	ldr	r2, [pc, #52]	; (800486c <vPortEnterCritical+0x58>)
 8004836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004838:	4b0c      	ldr	r3, [pc, #48]	; (800486c <vPortEnterCritical+0x58>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d10f      	bne.n	8004860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <vPortEnterCritical+0x5c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <vPortEnterCritical+0x4c>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	603b      	str	r3, [r7, #0]
}
 800485c:	bf00      	nop
 800485e:	e7fe      	b.n	800485e <vPortEnterCritical+0x4a>
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	20000010 	.word	0x20000010
 8004870:	e000ed04 	.word	0xe000ed04

08004874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800487a:	4b12      	ldr	r3, [pc, #72]	; (80048c4 <vPortExitCritical+0x50>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <vPortExitCritical+0x24>
	__asm volatile
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	607b      	str	r3, [r7, #4]
}
 8004894:	bf00      	nop
 8004896:	e7fe      	b.n	8004896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004898:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <vPortExitCritical+0x50>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <vPortExitCritical+0x50>)
 80048a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <vPortExitCritical+0x50>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <vPortExitCritical+0x42>
 80048aa:	2300      	movs	r3, #0
 80048ac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80048b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000010 	.word	0x20000010
	...

080048d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048d0:	f3ef 8009 	mrs	r0, PSP
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <pxCurrentTCBConst>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	f01e 0f10 	tst.w	lr, #16
 80048e0:	bf08      	it	eq
 80048e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ea:	6010      	str	r0, [r2, #0]
 80048ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048f4:	f380 8811 	msr	BASEPRI, r0
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f7ff fca8 	bl	8004254 <vTaskSwitchContext>
 8004904:	f04f 0000 	mov.w	r0, #0
 8004908:	f380 8811 	msr	BASEPRI, r0
 800490c:	bc09      	pop	{r0, r3}
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	6808      	ldr	r0, [r1, #0]
 8004912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004916:	f01e 0f10 	tst.w	lr, #16
 800491a:	bf08      	it	eq
 800491c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004920:	f380 8809 	msr	PSP, r0
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst>:
 8004930:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
	__asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	607b      	str	r3, [r7, #4]
}
 8004950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004952:	f7ff fbc7 	bl	80040e4 <xTaskIncrementTick>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800495c:	4b06      	ldr	r3, [pc, #24]	; (8004978 <xPortSysTickHandler+0x40>)
 800495e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	e000ed04 	.word	0xe000ed04

0800497c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004980:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <vPortSetupTimerInterrupt+0x38>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <vPortSetupTimerInterrupt+0x3c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <vPortSetupTimerInterrupt+0x40>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <vPortSetupTimerInterrupt+0x44>)
 800499a:	3b01      	subs	r3, #1
 800499c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800499e:	4b04      	ldr	r3, [pc, #16]	; (80049b0 <vPortSetupTimerInterrupt+0x34>)
 80049a0:	2207      	movs	r2, #7
 80049a2:	601a      	str	r2, [r3, #0]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e010 	.word	0xe000e010
 80049b4:	e000e018 	.word	0xe000e018
 80049b8:	20000004 	.word	0x20000004
 80049bc:	10624dd3 	.word	0x10624dd3
 80049c0:	e000e014 	.word	0xe000e014

080049c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049d4 <vPortEnableVFP+0x10>
 80049c8:	6801      	ldr	r1, [r0, #0]
 80049ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ce:	6001      	str	r1, [r0, #0]
 80049d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049d2:	bf00      	nop
 80049d4:	e000ed88 	.word	0xe000ed88

080049d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b08a      	sub	sp, #40	; 0x28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80049e4:	f7ff fad4 	bl	8003f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80049e8:	4b5b      	ldr	r3, [pc, #364]	; (8004b58 <pvPortMalloc+0x180>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049f0:	f000 f920 	bl	8004c34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049f4:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <pvPortMalloc+0x184>)
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4013      	ands	r3, r2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f040 8093 	bne.w	8004b28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01d      	beq.n	8004a44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a08:	2208      	movs	r2, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d014      	beq.n	8004a44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f023 0307 	bic.w	r3, r3, #7
 8004a20:	3308      	adds	r3, #8
 8004a22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <pvPortMalloc+0x6c>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	617b      	str	r3, [r7, #20]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d06e      	beq.n	8004b28 <pvPortMalloc+0x150>
 8004a4a:	4b45      	ldr	r3, [pc, #276]	; (8004b60 <pvPortMalloc+0x188>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d869      	bhi.n	8004b28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a54:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <pvPortMalloc+0x18c>)
 8004a56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <pvPortMalloc+0x18c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a5e:	e004      	b.n	8004a6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d903      	bls.n	8004a7c <pvPortMalloc+0xa4>
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f1      	bne.n	8004a60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <pvPortMalloc+0x180>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d050      	beq.n	8004b28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	4413      	add	r3, r2
 8004a8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	1ad2      	subs	r2, r2, r3
 8004aa0:	2308      	movs	r3, #8
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d91f      	bls.n	8004ae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <pvPortMalloc+0xf8>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	613b      	str	r3, [r7, #16]
}
 8004acc:	bf00      	nop
 8004ace:	e7fe      	b.n	8004ace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	1ad2      	subs	r2, r2, r3
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ae2:	69b8      	ldr	r0, [r7, #24]
 8004ae4:	f000 f908 	bl	8004cf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <pvPortMalloc+0x188>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <pvPortMalloc+0x188>)
 8004af4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004af6:	4b1a      	ldr	r3, [pc, #104]	; (8004b60 <pvPortMalloc+0x188>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b1b      	ldr	r3, [pc, #108]	; (8004b68 <pvPortMalloc+0x190>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d203      	bcs.n	8004b0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <pvPortMalloc+0x188>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <pvPortMalloc+0x190>)
 8004b08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <pvPortMalloc+0x184>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <pvPortMalloc+0x194>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	4a11      	ldr	r2, [pc, #68]	; (8004b6c <pvPortMalloc+0x194>)
 8004b26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b28:	f7ff fa40 	bl	8003fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <pvPortMalloc+0x174>
	__asm volatile
 8004b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3a:	f383 8811 	msr	BASEPRI, r3
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	f3bf 8f4f 	dsb	sy
 8004b46:	60fb      	str	r3, [r7, #12]
}
 8004b48:	bf00      	nop
 8004b4a:	e7fe      	b.n	8004b4a <pvPortMalloc+0x172>
	return pvReturn;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3728      	adds	r7, #40	; 0x28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	20004198 	.word	0x20004198
 8004b5c:	200041ac 	.word	0x200041ac
 8004b60:	2000419c 	.word	0x2000419c
 8004b64:	20004190 	.word	0x20004190
 8004b68:	200041a0 	.word	0x200041a0
 8004b6c:	200041a4 	.word	0x200041a4

08004b70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d04d      	beq.n	8004c1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b82:	2308      	movs	r3, #8
 8004b84:	425b      	negs	r3, r3
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4413      	add	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <vPortFree+0xb8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10a      	bne.n	8004bb4 <vPortFree+0x44>
	__asm volatile
 8004b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba2:	f383 8811 	msr	BASEPRI, r3
 8004ba6:	f3bf 8f6f 	isb	sy
 8004baa:	f3bf 8f4f 	dsb	sy
 8004bae:	60fb      	str	r3, [r7, #12]
}
 8004bb0:	bf00      	nop
 8004bb2:	e7fe      	b.n	8004bb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <vPortFree+0x62>
	__asm volatile
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60bb      	str	r3, [r7, #8]
}
 8004bce:	bf00      	nop
 8004bd0:	e7fe      	b.n	8004bd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <vPortFree+0xb8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01e      	beq.n	8004c1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d11a      	bne.n	8004c1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <vPortFree+0xb8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004bf8:	f7ff f9ca 	bl	8003f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <vPortFree+0xbc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4413      	add	r3, r2
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <vPortFree+0xbc>)
 8004c08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c0a:	6938      	ldr	r0, [r7, #16]
 8004c0c:	f000 f874 	bl	8004cf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <vPortFree+0xc0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a06      	ldr	r2, [pc, #24]	; (8004c30 <vPortFree+0xc0>)
 8004c18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c1a:	f7ff f9c7 	bl	8003fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	200041ac 	.word	0x200041ac
 8004c2c:	2000419c 	.word	0x2000419c
 8004c30:	200041a8 	.word	0x200041a8

08004c34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <prvHeapInit+0xac>)
 8004c42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00c      	beq.n	8004c68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	3307      	adds	r3, #7
 8004c52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0307 	bic.w	r3, r3, #7
 8004c5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <prvHeapInit+0xac>)
 8004c64:	4413      	add	r3, r2
 8004c66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <prvHeapInit+0xb0>)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c72:	4b1c      	ldr	r3, [pc, #112]	; (8004ce4 <prvHeapInit+0xb0>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c80:	2208      	movs	r2, #8
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0307 	bic.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <prvHeapInit+0xb4>)
 8004c94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c96:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <prvHeapInit+0xb4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c9e:	4b12      	ldr	r3, [pc, #72]	; (8004ce8 <prvHeapInit+0xb4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	1ad2      	subs	r2, r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <prvHeapInit+0xb4>)
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <prvHeapInit+0xb8>)
 8004cc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	4a09      	ldr	r2, [pc, #36]	; (8004cf0 <prvHeapInit+0xbc>)
 8004cca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <prvHeapInit+0xc0>)
 8004cce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	20000590 	.word	0x20000590
 8004ce4:	20004190 	.word	0x20004190
 8004ce8:	20004198 	.word	0x20004198
 8004cec:	200041a0 	.word	0x200041a0
 8004cf0:	2000419c 	.word	0x2000419c
 8004cf4:	200041ac 	.word	0x200041ac

08004cf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <prvInsertBlockIntoFreeList+0xac>)
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	e002      	b.n	8004d0c <prvInsertBlockIntoFreeList+0x14>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d8f7      	bhi.n	8004d06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d108      	bne.n	8004d3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	441a      	add	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d118      	bne.n	8004d80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d00d      	beq.n	8004d76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	441a      	add	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e008      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <prvInsertBlockIntoFreeList+0xb0>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e003      	b.n	8004d88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d002      	beq.n	8004d96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20004190 	.word	0x20004190
 8004da8:	20004198 	.word	0x20004198

08004dac <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b05      	cmp	r3, #5
 8004dc0:	d16c      	bne.n	8004e9c <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	8abb      	ldrh	r3, [r7, #20]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8004ddc:	8abb      	ldrh	r3, [r7, #20]
 8004dde:	3301      	adds	r3, #1
 8004de0:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3303      	adds	r3, #3
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3304      	adds	r3, #4
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	8a7b      	ldrh	r3, [r7, #18]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8004dfc:	8a7b      	ldrh	r3, [r7, #18]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d049      	beq.n	8004e96 <eMBFuncReadCoils+0xea>
 8004e02:	8a7b      	ldrh	r3, [r7, #18]
 8004e04:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004e08:	d245      	bcs.n	8004e96 <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	60fa      	str	r2, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	881b      	ldrh	r3, [r3, #0]
 8004e22:	3301      	adds	r3, #1
 8004e24:	b29a      	uxth	r2, r3
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 8004e2a:	8a7b      	ldrh	r3, [r7, #18]
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d006      	beq.n	8004e42 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8004e34:	8a7b      	ldrh	r3, [r7, #18]
 8004e36:	08db      	lsrs	r3, r3, #3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	3301      	adds	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
 8004e40:	e003      	b.n	8004e4a <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8004e42:	8a7b      	ldrh	r3, [r7, #18]
 8004e44:	08db      	lsrs	r3, r3, #3
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1c5a      	adds	r2, r3, #1
 8004e4e:	60fa      	str	r2, [r7, #12]
 8004e50:	7dfa      	ldrb	r2, [r7, #23]
 8004e52:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8004e60:	8a7a      	ldrh	r2, [r7, #18]
 8004e62:	8ab9      	ldrh	r1, [r7, #20]
 8004e64:	2300      	movs	r3, #0
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f7fb fe9c 	bl	8000ba4 <eMBRegCoilsCB>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004e70:	7afb      	ldrb	r3, [r7, #11]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d006      	beq.n	8004e84 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004e76:	7afb      	ldrb	r3, [r7, #11]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb85 	bl	8005588 <prveMBError2Exception>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8004e82:	e00d      	b.n	8004ea0 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	881a      	ldrh	r2, [r3, #0]
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8004e94:	e004      	b.n	8004ea0 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004e96:	2303      	movs	r3, #3
 8004e98:	75bb      	strb	r3, [r7, #22]
 8004e9a:	e001      	b.n	8004ea0 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8004ea0:	7dbb      	ldrb	r3, [r7, #22]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3718      	adds	r7, #24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b084      	sub	sp, #16
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	2b05      	cmp	r3, #5
 8004ebe:	d140      	bne.n	8004f42 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	021b      	lsls	r3, r3, #8
 8004eca:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3302      	adds	r3, #2
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	89bb      	ldrh	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8004eda:	89bb      	ldrh	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d128      	bne.n	8004f3c <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3303      	adds	r3, #3
 8004eee:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 8004ef0:	2bff      	cmp	r3, #255	; 0xff
 8004ef2:	d004      	beq.n	8004efe <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3303      	adds	r3, #3
 8004ef8:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11e      	bne.n	8004f3c <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3303      	adds	r3, #3
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2bff      	cmp	r3, #255	; 0xff
 8004f0a:	d102      	bne.n	8004f12 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	723b      	strb	r3, [r7, #8]
 8004f10:	e001      	b.n	8004f16 <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 8004f16:	89b9      	ldrh	r1, [r7, #12]
 8004f18:	f107 0008 	add.w	r0, r7, #8
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f7fb fe40 	bl	8000ba4 <eMBRegCoilsCB>
 8004f24:	4603      	mov	r3, r0
 8004f26:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004f28:	7afb      	ldrb	r3, [r7, #11]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00b      	beq.n	8004f46 <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fb29 	bl	8005588 <prveMBError2Exception>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 8004f3a:	e004      	b.n	8004f46 <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	e001      	b.n	8004f46 <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8004f42:	2303      	movs	r3, #3
 8004f44:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8004f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	881b      	ldrh	r3, [r3, #0]
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d954      	bls.n	8005010 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	021b      	lsls	r3, r3, #8
 8004f70:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3302      	adds	r3, #2
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	89bb      	ldrh	r3, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8004f80:	89bb      	ldrh	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3303      	adds	r3, #3
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	795b      	ldrb	r3, [r3, #5]
 8004fa4:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 8004fa6:	897b      	ldrh	r3, [r7, #10]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d006      	beq.n	8004fbe <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 8004fb0:	897b      	ldrh	r3, [r7, #10]
 8004fb2:	08db      	lsrs	r3, r3, #3
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	3301      	adds	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e003      	b.n	8004fc6 <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 8004fbe:	897b      	ldrh	r3, [r7, #10]
 8004fc0:	08db      	lsrs	r3, r3, #3
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 8004fc6:	897b      	ldrh	r3, [r7, #10]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01e      	beq.n	800500a <eMBFuncWriteMultipleCoils+0xba>
 8004fcc:	897b      	ldrh	r3, [r7, #10]
 8004fce:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 8004fd2:	d81a      	bhi.n	800500a <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 8004fd4:	7bfa      	ldrb	r2, [r7, #15]
 8004fd6:	7a7b      	ldrb	r3, [r7, #9]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d116      	bne.n	800500a <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	1d98      	adds	r0, r3, #6
 8004fe0:	897a      	ldrh	r2, [r7, #10]
 8004fe2:	89b9      	ldrh	r1, [r7, #12]
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f7fb fddd 	bl	8000ba4 <eMBRegCoilsCB>
 8004fea:	4603      	mov	r3, r0
 8004fec:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8004fee:	7a3b      	ldrb	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d006      	beq.n	8005002 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8004ff4:	7a3b      	ldrb	r3, [r7, #8]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fac6 	bl	8005588 <prveMBError2Exception>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8005000:	e008      	b.n	8005014 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2205      	movs	r2, #5
 8005006:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005008:	e004      	b.n	8005014 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800500a:	2303      	movs	r3, #3
 800500c:	73bb      	strb	r3, [r7, #14]
 800500e:	e001      	b.n	8005014 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005010:	2303      	movs	r3, #3
 8005012:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8005014:	7bbb      	ldrb	r3, [r7, #14]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8005028:	2300      	movs	r3, #0
 800502a:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	2b05      	cmp	r3, #5
 8005032:	d16c      	bne.n	800510e <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3301      	adds	r3, #1
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3302      	adds	r3, #2
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	b29a      	uxth	r2, r3
 8005048:	8abb      	ldrh	r3, [r7, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800504e:	8abb      	ldrh	r3, [r7, #20]
 8005050:	3301      	adds	r3, #1
 8005052:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3303      	adds	r3, #3
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b29b      	uxth	r3, r3
 800505c:	021b      	lsls	r3, r3, #8
 800505e:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	b29a      	uxth	r2, r3
 8005068:	8a7b      	ldrh	r3, [r7, #18]
 800506a:	4313      	orrs	r3, r2
 800506c:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 800506e:	8a7b      	ldrh	r3, [r7, #18]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d049      	beq.n	8005108 <eMBFuncReadDiscreteInputs+0xea>
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800507a:	d245      	bcs.n	8005108 <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2200      	movs	r2, #0
 8005084:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	60fa      	str	r2, [r7, #12]
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 800509c:	8a7b      	ldrh	r3, [r7, #18]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d006      	beq.n	80050b4 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80050a6:	8a7b      	ldrh	r3, [r7, #18]
 80050a8:	08db      	lsrs	r3, r3, #3
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
 80050b2:	e003      	b.n	80050bc <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80050b4:	8a7b      	ldrh	r3, [r7, #18]
 80050b6:	08db      	lsrs	r3, r3, #3
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	60fa      	str	r2, [r7, #12]
 80050c2:	7dfa      	ldrb	r2, [r7, #23]
 80050c4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80050d2:	8a7a      	ldrh	r2, [r7, #18]
 80050d4:	8abb      	ldrh	r3, [r7, #20]
 80050d6:	4619      	mov	r1, r3
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f7fb fd77 	bl	8000bcc <eMBRegDiscreteCB>
 80050de:	4603      	mov	r3, r0
 80050e0:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d006      	beq.n	80050f6 <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80050e8:	7afb      	ldrb	r3, [r7, #11]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fa4c 	bl	8005588 <prveMBError2Exception>
 80050f0:	4603      	mov	r3, r0
 80050f2:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80050f4:	e00d      	b.n	8005112 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	881a      	ldrh	r2, [r3, #0]
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	4413      	add	r3, r2
 8005100:	b29a      	uxth	r2, r3
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005106:	e004      	b.n	8005112 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005108:	2303      	movs	r3, #3
 800510a:	75bb      	strb	r3, [r7, #22]
 800510c:	e001      	b.n	8005112 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800510e:	2303      	movs	r3, #3
 8005110:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8005112:	7dbb      	ldrb	r3, [r7, #22]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	2b05      	cmp	r3, #5
 8005130:	d122      	bne.n	8005178 <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	3301      	adds	r3, #1
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3302      	adds	r3, #2
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	b29a      	uxth	r2, r3
 8005146:	89bb      	ldrh	r3, [r7, #12]
 8005148:	4313      	orrs	r3, r2
 800514a:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 800514c:	89bb      	ldrh	r3, [r7, #12]
 800514e:	3301      	adds	r3, #1
 8005150:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	1cd8      	adds	r0, r3, #3
 8005156:	89b9      	ldrh	r1, [r7, #12]
 8005158:	2301      	movs	r3, #1
 800515a:	2201      	movs	r2, #1
 800515c:	f7fb fd0e 	bl	8000b7c <eMBRegHoldingCB>
 8005160:	4603      	mov	r3, r0
 8005162:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8005164:	7afb      	ldrb	r3, [r7, #11]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800516a:	7afb      	ldrb	r3, [r7, #11]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fa0b 	bl	8005588 <prveMBError2Exception>
 8005172:	4603      	mov	r3, r0
 8005174:	73fb      	strb	r3, [r7, #15]
 8005176:	e001      	b.n	800517c <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005178:	2303      	movs	r3, #3
 800517a:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8005190:	2300      	movs	r3, #0
 8005192:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	2b05      	cmp	r3, #5
 800519a:	d946      	bls.n	800522a <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3301      	adds	r3, #1
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	021b      	lsls	r3, r3, #8
 80051a6:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3302      	adds	r3, #2
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	89bb      	ldrh	r3, [r7, #12]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80051b6:	89bb      	ldrh	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3303      	adds	r3, #3
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	021b      	lsls	r3, r3, #8
 80051c6:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	897b      	ldrh	r3, [r7, #10]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	795b      	ldrb	r3, [r3, #5]
 80051da:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80051dc:	897b      	ldrh	r3, [r7, #10]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d020      	beq.n	8005224 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 80051e2:	897b      	ldrh	r3, [r7, #10]
 80051e4:	2b78      	cmp	r3, #120	; 0x78
 80051e6:	d81d      	bhi.n	8005224 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80051e8:	897b      	ldrh	r3, [r7, #10]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80051f0:	7a7a      	ldrb	r2, [r7, #9]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d116      	bne.n	8005224 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	1d98      	adds	r0, r3, #6
 80051fa:	897a      	ldrh	r2, [r7, #10]
 80051fc:	89b9      	ldrh	r1, [r7, #12]
 80051fe:	2301      	movs	r3, #1
 8005200:	f7fb fcbc 	bl	8000b7c <eMBRegHoldingCB>
 8005204:	4603      	mov	r3, r0
 8005206:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005208:	7a3b      	ldrb	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d006      	beq.n	800521c <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800520e:	7a3b      	ldrb	r3, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f9b9 	bl	8005588 <prveMBError2Exception>
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800521a:	e008      	b.n	800522e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2205      	movs	r2, #5
 8005220:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005222:	e004      	b.n	800522e <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005224:	2303      	movs	r3, #3
 8005226:	73fb      	strb	r3, [r7, #15]
 8005228:	e001      	b.n	800522e <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800522a:	2303      	movs	r3, #3
 800522c:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8005242:	2300      	movs	r3, #0
 8005244:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	2b05      	cmp	r3, #5
 800524c:	d15c      	bne.n	8005308 <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3301      	adds	r3, #1
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	b29b      	uxth	r3, r3
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3302      	adds	r3, #2
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	b29a      	uxth	r2, r3
 8005262:	8abb      	ldrh	r3, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8005268:	8abb      	ldrh	r3, [r7, #20]
 800526a:	3301      	adds	r3, #1
 800526c:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3303      	adds	r3, #3
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	3304      	adds	r3, #4
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8005282:	8a7b      	ldrh	r3, [r7, #18]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d03c      	beq.n	8005302 <eMBFuncReadHoldingRegister+0xca>
 8005288:	8a7b      	ldrh	r3, [r7, #18]
 800528a:	2b7d      	cmp	r3, #125	; 0x7d
 800528c:	d839      	bhi.n	8005302 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2200      	movs	r2, #0
 8005296:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	60fa      	str	r2, [r7, #12]
 800529e:	2203      	movs	r2, #3
 80052a0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80052ae:	8a7b      	ldrh	r3, [r7, #18]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1c59      	adds	r1, r3, #1
 80052b6:	60f9      	str	r1, [r7, #12]
 80052b8:	0052      	lsls	r2, r2, #1
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80052ca:	8a7a      	ldrh	r2, [r7, #18]
 80052cc:	8ab9      	ldrh	r1, [r7, #20]
 80052ce:	2300      	movs	r3, #0
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f7fb fc53 	bl	8000b7c <eMBRegHoldingCB>
 80052d6:	4603      	mov	r3, r0
 80052d8:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80052da:	7afb      	ldrb	r3, [r7, #11]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80052e0:	7afb      	ldrb	r3, [r7, #11]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f950 	bl	8005588 <prveMBError2Exception>
 80052e8:	4603      	mov	r3, r0
 80052ea:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80052ec:	e00e      	b.n	800530c <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	881a      	ldrh	r2, [r3, #0]
 80052f2:	8a7b      	ldrh	r3, [r7, #18]
 80052f4:	005b      	lsls	r3, r3, #1
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005300:	e004      	b.n	800530c <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005302:	2303      	movs	r3, #3
 8005304:	75fb      	strb	r3, [r7, #23]
 8005306:	e001      	b.n	800530c <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005308:	2303      	movs	r3, #3
 800530a:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 800530c:	7dfb      	ldrb	r3, [r7, #23]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b086      	sub	sp, #24
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8005320:	2300      	movs	r3, #0
 8005322:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	2b09      	cmp	r3, #9
 800532a:	f240 8099 	bls.w	8005460 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	3301      	adds	r3, #1
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	b29b      	uxth	r3, r3
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3302      	adds	r3, #2
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	b29a      	uxth	r2, r3
 8005342:	8abb      	ldrh	r3, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 8005348:	8abb      	ldrh	r3, [r7, #20]
 800534a:	3301      	adds	r3, #1
 800534c:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3303      	adds	r3, #3
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	021b      	lsls	r3, r3, #8
 8005358:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	b29a      	uxth	r2, r3
 8005362:	8a7b      	ldrh	r3, [r7, #18]
 8005364:	4313      	orrs	r3, r2
 8005366:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3305      	adds	r3, #5
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	b29b      	uxth	r3, r3
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	3306      	adds	r3, #6
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	b29a      	uxth	r2, r3
 800537c:	8a3b      	ldrh	r3, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8005382:	8a3b      	ldrh	r3, [r7, #16]
 8005384:	3301      	adds	r3, #1
 8005386:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	3307      	adds	r3, #7
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3308      	adds	r3, #8
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b29a      	uxth	r2, r3
 800539c:	89fb      	ldrh	r3, [r7, #14]
 800539e:	4313      	orrs	r3, r2
 80053a0:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7a5b      	ldrb	r3, [r3, #9]
 80053a6:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80053a8:	8a7b      	ldrh	r3, [r7, #18]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d056      	beq.n	800545c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80053ae:	8a7b      	ldrh	r3, [r7, #18]
 80053b0:	2b7d      	cmp	r3, #125	; 0x7d
 80053b2:	d853      	bhi.n	800545c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80053b4:	89fb      	ldrh	r3, [r7, #14]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d050      	beq.n	800545c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80053ba:	89fb      	ldrh	r3, [r7, #14]
 80053bc:	2b79      	cmp	r3, #121	; 0x79
 80053be:	d84d      	bhi.n	800545c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	005a      	lsls	r2, r3, #1
 80053c4:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d148      	bne.n	800545c <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 000a 	add.w	r0, r3, #10
 80053d0:	89fa      	ldrh	r2, [r7, #14]
 80053d2:	8a39      	ldrh	r1, [r7, #16]
 80053d4:	2301      	movs	r3, #1
 80053d6:	f7fb fbd1 	bl	8000b7c <eMBRegHoldingCB>
 80053da:	4603      	mov	r3, r0
 80053dc:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80053de:	7dbb      	ldrb	r3, [r7, #22]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d131      	bne.n	8005448 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	60ba      	str	r2, [r7, #8]
 80053f4:	2217      	movs	r2, #23
 80053f6:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	b29a      	uxth	r2, r3
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8005404:	8a7b      	ldrh	r3, [r7, #18]
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	1c59      	adds	r1, r3, #1
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	0052      	lsls	r2, r2, #1
 8005410:	b2d2      	uxtb	r2, r2
 8005412:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	3301      	adds	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8005420:	8a7a      	ldrh	r2, [r7, #18]
 8005422:	8ab9      	ldrh	r1, [r7, #20]
 8005424:	2300      	movs	r3, #0
 8005426:	68b8      	ldr	r0, [r7, #8]
 8005428:	f7fb fba8 	bl	8000b7c <eMBRegHoldingCB>
 800542c:	4603      	mov	r3, r0
 800542e:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8005430:	7dbb      	ldrb	r3, [r7, #22]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d108      	bne.n	8005448 <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	8a7b      	ldrh	r3, [r7, #18]
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	b29b      	uxth	r3, r3
 8005440:	4413      	add	r3, r2
 8005442:	b29a      	uxth	r2, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 8005448:	7dbb      	ldrb	r3, [r7, #22]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d008      	beq.n	8005460 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800544e:	7dbb      	ldrb	r3, [r7, #22]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 f899 	bl	8005588 <prveMBError2Exception>
 8005456:	4603      	mov	r3, r0
 8005458:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800545a:	e001      	b.n	8005460 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800545c:	2303      	movs	r3, #3
 800545e:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8005460:	7dfb      	ldrb	r3, [r7, #23]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3718      	adds	r7, #24
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b086      	sub	sp, #24
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	2b05      	cmp	r3, #5
 800547e:	d15f      	bne.n	8005540 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3301      	adds	r3, #1
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	b29b      	uxth	r3, r3
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	3302      	adds	r3, #2
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	b29a      	uxth	r2, r3
 8005494:	8abb      	ldrh	r3, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800549a:	8abb      	ldrh	r3, [r7, #20]
 800549c:	3301      	adds	r3, #1
 800549e:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3303      	adds	r3, #3
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	8a7b      	ldrh	r3, [r7, #18]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80054ba:	8a7b      	ldrh	r3, [r7, #18]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d03c      	beq.n	800553a <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80054c0:	8a7b      	ldrh	r3, [r7, #18]
 80054c2:	2b7c      	cmp	r3, #124	; 0x7c
 80054c4:	d839      	bhi.n	800553a <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1c5a      	adds	r2, r3, #1
 80054d4:	60fa      	str	r2, [r7, #12]
 80054d6:	2204      	movs	r2, #4
 80054d8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	3301      	adds	r3, #1
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80054e6:	8a7b      	ldrh	r3, [r7, #18]
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	60f9      	str	r1, [r7, #12]
 80054f0:	0052      	lsls	r2, r2, #1
 80054f2:	b2d2      	uxtb	r2, r2
 80054f4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	881b      	ldrh	r3, [r3, #0]
 80054fa:	3301      	adds	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8005502:	8a7a      	ldrh	r2, [r7, #18]
 8005504:	8abb      	ldrh	r3, [r7, #20]
 8005506:	4619      	mov	r1, r3
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fb faf1 	bl	8000af0 <eMBRegInputCB>
 800550e:	4603      	mov	r3, r0
 8005510:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8005518:	7afb      	ldrb	r3, [r7, #11]
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f834 	bl	8005588 <prveMBError2Exception>
 8005520:	4603      	mov	r3, r0
 8005522:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8005524:	e00e      	b.n	8005544 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	881a      	ldrh	r2, [r3, #0]
 800552a:	8a7b      	ldrh	r3, [r7, #18]
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	b29b      	uxth	r3, r3
 8005530:	4413      	add	r3, r2
 8005532:	b29a      	uxth	r2, r3
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8005538:	e004      	b.n	8005544 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800553a:	2303      	movs	r3, #3
 800553c:	75fb      	strb	r3, [r7, #23]
 800553e:	e001      	b.n	8005544 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8005540:	2303      	movs	r3, #3
 8005542:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8005544:	7dfb      	ldrb	r3, [r7, #23]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3301      	adds	r3, #1
 800555e:	4a08      	ldr	r2, [pc, #32]	; (8005580 <eMBFuncReportSlaveID+0x30>)
 8005560:	8812      	ldrh	r2, [r2, #0]
 8005562:	4908      	ldr	r1, [pc, #32]	; (8005584 <eMBFuncReportSlaveID+0x34>)
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fd41 	bl	8005fec <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <eMBFuncReportSlaveID+0x30>)
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200041d0 	.word	0x200041d0
 8005584:	200041b0 	.word	0x200041b0

08005588 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8005588:	b480      	push	{r7}
 800558a:	b085      	sub	sp, #20
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8005592:	79fb      	ldrb	r3, [r7, #7]
 8005594:	2b07      	cmp	r3, #7
 8005596:	d00c      	beq.n	80055b2 <prveMBError2Exception+0x2a>
 8005598:	2b07      	cmp	r3, #7
 800559a:	dc0d      	bgt.n	80055b8 <prveMBError2Exception+0x30>
 800559c:	2b00      	cmp	r3, #0
 800559e:	d002      	beq.n	80055a6 <prveMBError2Exception+0x1e>
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d003      	beq.n	80055ac <prveMBError2Exception+0x24>
 80055a4:	e008      	b.n	80055b8 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
            break;
 80055aa:	e008      	b.n	80055be <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 80055ac:	2302      	movs	r3, #2
 80055ae:	73fb      	strb	r3, [r7, #15]
            break;
 80055b0:	e005      	b.n	80055be <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 80055b2:	2306      	movs	r3, #6
 80055b4:	73fb      	strb	r3, [r7, #15]
            break;
 80055b6:	e002      	b.n	80055be <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 80055b8:	2304      	movs	r3, #4
 80055ba:	73fb      	strb	r3, [r7, #15]
            break;
 80055bc:	bf00      	nop
    }

    return eStatus;
 80055be:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	4603      	mov	r3, r0
 80055d6:	71fb      	strb	r3, [r7, #7]
 80055d8:	460b      	mov	r3, r1
 80055da:	71bb      	strb	r3, [r7, #6]
 80055dc:	4613      	mov	r3, r2
 80055de:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 80055e4:	79bb      	ldrb	r3, [r7, #6]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d005      	beq.n	80055f6 <eMBInit+0x2a>
 80055ea:	79bb      	ldrb	r3, [r7, #6]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 80055f0:	79bb      	ldrb	r3, [r7, #6]
 80055f2:	2bf7      	cmp	r3, #247	; 0xf7
 80055f4:	d902      	bls.n	80055fc <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 80055f6:	2302      	movs	r3, #2
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	e03a      	b.n	8005672 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <eMBInit+0xb0>)
 80055fe:	79bb      	ldrb	r3, [r7, #6]
 8005600:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d121      	bne.n	800564c <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <eMBInit+0xb4>)
 800560a:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <eMBInit+0xb8>)
 800560c:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 800560e:	4b1e      	ldr	r3, [pc, #120]	; (8005688 <eMBInit+0xbc>)
 8005610:	4a1e      	ldr	r2, [pc, #120]	; (800568c <eMBInit+0xc0>)
 8005612:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <eMBInit+0xc4>)
 8005616:	4a1f      	ldr	r2, [pc, #124]	; (8005694 <eMBInit+0xc8>)
 8005618:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <eMBInit+0xcc>)
 800561c:	4a1f      	ldr	r2, [pc, #124]	; (800569c <eMBInit+0xd0>)
 800561e:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8005620:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <eMBInit+0xd4>)
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8005626:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <eMBInit+0xd8>)
 8005628:	4a1f      	ldr	r2, [pc, #124]	; (80056a8 <eMBInit+0xdc>)
 800562a:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 800562c:	4b1f      	ldr	r3, [pc, #124]	; (80056ac <eMBInit+0xe0>)
 800562e:	4a20      	ldr	r2, [pc, #128]	; (80056b0 <eMBInit+0xe4>)
 8005630:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8005632:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <eMBInit+0xe8>)
 8005634:	4a20      	ldr	r2, [pc, #128]	; (80056b8 <eMBInit+0xec>)
 8005636:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8005638:	4b10      	ldr	r3, [pc, #64]	; (800567c <eMBInit+0xb0>)
 800563a:	7818      	ldrb	r0, [r3, #0]
 800563c:	7e3b      	ldrb	r3, [r7, #24]
 800563e:	7979      	ldrb	r1, [r7, #5]
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	f000 fa63 	bl	8005b0c <eMBRTUInit>
 8005646:	4603      	mov	r3, r0
 8005648:	73fb      	strb	r3, [r7, #15]
            break;
 800564a:	e001      	b.n	8005650 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 800564c:	2302      	movs	r3, #2
 800564e:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8005650:	7bfb      	ldrb	r3, [r7, #15]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8005656:	f000 f90d 	bl	8005874 <xMBPortEventInit>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8005660:	2303      	movs	r3, #3
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e005      	b.n	8005672 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 8005666:	4a15      	ldr	r2, [pc, #84]	; (80056bc <eMBInit+0xf0>)
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 800566c:	4b14      	ldr	r3, [pc, #80]	; (80056c0 <eMBInit+0xf4>)
 800566e:	2201      	movs	r2, #1
 8005670:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200041d2 	.word	0x200041d2
 8005680:	200041d8 	.word	0x200041d8
 8005684:	08005b85 	.word	0x08005b85
 8005688:	200041dc 	.word	0x200041dc
 800568c:	08005bad 	.word	0x08005bad
 8005690:	200041d4 	.word	0x200041d4
 8005694:	08005c65 	.word	0x08005c65
 8005698:	200041e0 	.word	0x200041e0
 800569c:	08005bc9 	.word	0x08005bc9
 80056a0:	200041e4 	.word	0x200041e4
 80056a4:	200041e8 	.word	0x200041e8
 80056a8:	08005d2d 	.word	0x08005d2d
 80056ac:	200041ec 	.word	0x200041ec
 80056b0:	08005dfd 	.word	0x08005dfd
 80056b4:	200041f0 	.word	0x200041f0
 80056b8:	08005ead 	.word	0x08005ead
 80056bc:	200041d3 	.word	0x200041d3
 80056c0:	20000014 	.word	0x20000014

080056c4 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 80056ca:	2300      	movs	r3, #0
 80056cc:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 80056ce:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <eMBEnable+0x30>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d106      	bne.n	80056e4 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <eMBEnable+0x34>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80056dc:	4b05      	ldr	r3, [pc, #20]	; (80056f4 <eMBEnable+0x30>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
 80056e2:	e001      	b.n	80056e8 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80056e4:	2306      	movs	r3, #6
 80056e6:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80056e8:	79fb      	ldrb	r3, [r7, #7]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000014 	.word	0x20000014
 80056f8:	200041d8 	.word	0x200041d8

080056fc <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 8005702:	2300      	movs	r3, #0
 8005704:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 8005706:	4b51      	ldr	r3, [pc, #324]	; (800584c <eMBPoll+0x150>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 800570e:	2306      	movs	r3, #6
 8005710:	e097      	b.n	8005842 <eMBPoll+0x146>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 8005712:	1cbb      	adds	r3, r7, #2
 8005714:	4618      	mov	r0, r3
 8005716:	f000 f8d1 	bl	80058bc <xMBPortEventGet>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	f040 808a 	bne.w	8005836 <eMBPoll+0x13a>
    {
        switch ( eEvent )
 8005722:	78bb      	ldrb	r3, [r7, #2]
 8005724:	2b03      	cmp	r3, #3
 8005726:	f200 808b 	bhi.w	8005840 <eMBPoll+0x144>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <eMBPoll+0x34>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005841 	.word	0x08005841
 8005734:	08005741 	.word	0x08005741
 8005738:	08005773 	.word	0x08005773
 800573c:	08005841 	.word	0x08005841
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8005740:	4b43      	ldr	r3, [pc, #268]	; (8005850 <eMBPoll+0x154>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a43      	ldr	r2, [pc, #268]	; (8005854 <eMBPoll+0x158>)
 8005746:	4944      	ldr	r1, [pc, #272]	; (8005858 <eMBPoll+0x15c>)
 8005748:	4844      	ldr	r0, [pc, #272]	; (800585c <eMBPoll+0x160>)
 800574a:	4798      	blx	r3
 800574c:	4603      	mov	r3, r0
 800574e:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d171      	bne.n	800583a <eMBPoll+0x13e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8005756:	4b41      	ldr	r3, [pc, #260]	; (800585c <eMBPoll+0x160>)
 8005758:	781a      	ldrb	r2, [r3, #0]
 800575a:	4b41      	ldr	r3, [pc, #260]	; (8005860 <eMBPoll+0x164>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d003      	beq.n	800576a <eMBPoll+0x6e>
 8005762:	4b3e      	ldr	r3, [pc, #248]	; (800585c <eMBPoll+0x160>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d167      	bne.n	800583a <eMBPoll+0x13e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800576a:	2002      	movs	r0, #2
 800576c:	f000 f890 	bl	8005890 <xMBPortEventPost>
                }
            }
            break;
 8005770:	e063      	b.n	800583a <eMBPoll+0x13e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8005772:	4b39      	ldr	r3, [pc, #228]	; (8005858 <eMBPoll+0x15c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	4b3a      	ldr	r3, [pc, #232]	; (8005864 <eMBPoll+0x168>)
 800577a:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800577c:	4b3a      	ldr	r3, [pc, #232]	; (8005868 <eMBPoll+0x16c>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	e01f      	b.n	80057c8 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8005788:	4a38      	ldr	r2, [pc, #224]	; (800586c <eMBPoll+0x170>)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01d      	beq.n	80057d0 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8005794:	4a35      	ldr	r2, [pc, #212]	; (800586c <eMBPoll+0x170>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800579c:	4b31      	ldr	r3, [pc, #196]	; (8005864 <eMBPoll+0x168>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d10e      	bne.n	80057c2 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 80057a4:	4a31      	ldr	r2, [pc, #196]	; (800586c <eMBPoll+0x170>)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4413      	add	r3, r2
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <eMBPoll+0x15c>)
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	4928      	ldr	r1, [pc, #160]	; (8005854 <eMBPoll+0x158>)
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	4b2a      	ldr	r3, [pc, #168]	; (8005868 <eMBPoll+0x16c>)
 80057be:	701a      	strb	r2, [r3, #0]
                    break;
 80057c0:	e007      	b.n	80057d2 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3301      	adds	r3, #1
 80057c6:	607b      	str	r3, [r7, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	dddc      	ble.n	8005788 <eMBPoll+0x8c>
 80057ce:	e000      	b.n	80057d2 <eMBPoll+0xd6>
                    break;
 80057d0:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <eMBPoll+0x160>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d031      	beq.n	800583e <eMBPoll+0x142>
            {
                if( eException != MB_EX_NONE )
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <eMBPoll+0x16c>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d01d      	beq.n	800581e <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <eMBPoll+0x158>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <eMBPoll+0x168>)
 80057ea:	781a      	ldrb	r2, [r3, #0]
 80057ec:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <eMBPoll+0x15c>)
 80057ee:	6819      	ldr	r1, [r3, #0]
 80057f0:	4b18      	ldr	r3, [pc, #96]	; (8005854 <eMBPoll+0x158>)
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	1c58      	adds	r0, r3, #1
 80057f6:	b284      	uxth	r4, r0
 80057f8:	4816      	ldr	r0, [pc, #88]	; (8005854 <eMBPoll+0x158>)
 80057fa:	8004      	strh	r4, [r0, #0]
 80057fc:	440b      	add	r3, r1
 80057fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <eMBPoll+0x15c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <eMBPoll+0x158>)
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	1c59      	adds	r1, r3, #1
 8005810:	b288      	uxth	r0, r1
 8005812:	4910      	ldr	r1, [pc, #64]	; (8005854 <eMBPoll+0x158>)
 8005814:	8008      	strh	r0, [r1, #0]
 8005816:	4413      	add	r3, r2
 8005818:	4a13      	ldr	r2, [pc, #76]	; (8005868 <eMBPoll+0x16c>)
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 800581e:	4b14      	ldr	r3, [pc, #80]	; (8005870 <eMBPoll+0x174>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <eMBPoll+0x164>)
 8005824:	7810      	ldrb	r0, [r2, #0]
 8005826:	4a0c      	ldr	r2, [pc, #48]	; (8005858 <eMBPoll+0x15c>)
 8005828:	6811      	ldr	r1, [r2, #0]
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <eMBPoll+0x158>)
 800582c:	8812      	ldrh	r2, [r2, #0]
 800582e:	4798      	blx	r3
 8005830:	4603      	mov	r3, r0
 8005832:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8005834:	e003      	b.n	800583e <eMBPoll+0x142>

        case EV_FRAME_SENT:
            break;
        }
    }
 8005836:	bf00      	nop
 8005838:	e002      	b.n	8005840 <eMBPoll+0x144>
            break;
 800583a:	bf00      	nop
 800583c:	e000      	b.n	8005840 <eMBPoll+0x144>
            break;
 800583e:	bf00      	nop
    return MB_ENOERR;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	bd90      	pop	{r4, r7, pc}
 800584a:	bf00      	nop
 800584c:	20000014 	.word	0x20000014
 8005850:	200041e0 	.word	0x200041e0
 8005854:	200041fc 	.word	0x200041fc
 8005858:	200041f8 	.word	0x200041f8
 800585c:	200041f4 	.word	0x200041f4
 8005860:	200041d2 	.word	0x200041d2
 8005864:	200041fe 	.word	0x200041fe
 8005868:	200041ff 	.word	0x200041ff
 800586c:	20000018 	.word	0x20000018
 8005870:	200041d4 	.word	0x200041d4

08005874 <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8005878:	4b04      	ldr	r3, [pc, #16]	; (800588c <xMBPortEventInit+0x18>)
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
    return TRUE;
 800587e:	2301      	movs	r3, #1
}
 8005880:	4618      	mov	r0, r3
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20004201 	.word	0x20004201

08005890 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 800589a:	4b06      	ldr	r3, [pc, #24]	; (80058b4 <xMBPortEventPost+0x24>)
 800589c:	2201      	movs	r2, #1
 800589e:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 80058a0:	4a05      	ldr	r2, [pc, #20]	; (80058b8 <xMBPortEventPost+0x28>)
 80058a2:	79fb      	ldrb	r3, [r7, #7]
 80058a4:	7013      	strb	r3, [r2, #0]
    return TRUE;
 80058a6:	2301      	movs	r3, #1
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr
 80058b4:	20004201 	.word	0x20004201
 80058b8:	20004200 	.word	0x20004200

080058bc <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <xMBPortEventGet+0x34>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <xMBPortEventGet+0x38>)
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <xMBPortEventGet+0x34>)
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 80058de:	2301      	movs	r3, #1
 80058e0:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20004201 	.word	0x20004201
 80058f4:	20004200 	.word	0x20004200

080058f8 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	460a      	mov	r2, r1
 8005902:	71fb      	strb	r3, [r7, #7]
 8005904:	4613      	mov	r3, r2
 8005906:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8005908:	79fb      	ldrb	r3, [r7, #7]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <vMBPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <vMBPortSerialEnable+0x6c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <vMBPortSerialEnable+0x6c>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0220 	orr.w	r2, r2, #32
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	e007      	b.n	8005930 <vMBPortSerialEnable+0x38>
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <vMBPortSerialEnable+0x6c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	4b0f      	ldr	r3, [pc, #60]	; (8005964 <vMBPortSerialEnable+0x6c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0220 	bic.w	r2, r2, #32
 800592e:	60da      	str	r2, [r3, #12]
  }
  
  if (xTxEnable) {    
 8005930:	79bb      	ldrb	r3, [r7, #6]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <vMBPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <vMBPortSerialEnable+0x6c>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <vMBPortSerialEnable+0x6c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005944:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
  }  
}
 8005946:	e007      	b.n	8005958 <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <vMBPortSerialEnable+0x6c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <vMBPortSerialEnable+0x6c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005956:	60da      	str	r2, [r3, #12]
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	200003b4 	.word	0x200003b4

08005968 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6039      	str	r1, [r7, #0]
 8005970:	4611      	mov	r1, r2
 8005972:	461a      	mov	r2, r3
 8005974:	4603      	mov	r3, r0
 8005976:	71fb      	strb	r3, [r7, #7]
 8005978:	460b      	mov	r3, r1
 800597a:	71bb      	strb	r3, [r7, #6]
 800597c:	4613      	mov	r3, r2
 800597e:	717b      	strb	r3, [r7, #5]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8005980:	2301      	movs	r3, #1
}
 8005982:	4618      	mov	r0, r3
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	4603      	mov	r3, r0
 8005998:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 800599a:	1df9      	adds	r1, r7, #7
 800599c:	230a      	movs	r3, #10
 800599e:	2201      	movs	r2, #1
 80059a0:	4806      	ldr	r0, [pc, #24]	; (80059bc <xMBPortSerialPutByte+0x2c>)
 80059a2:	f7fc ffc8 	bl	8002936 <HAL_UART_Transmit>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	200003b4 	.word	0x200003b4

080059c0 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);  
 80059c8:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <xMBPortSerialGetByte+0x24>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	701a      	strb	r2, [r3, #0]
  return TRUE;
 80059d4:	2301      	movs	r3, #1
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	200003b4 	.word	0x200003b4

080059e8 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	4603      	mov	r3, r0
 80059f0:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim7.Instance = TIM7;
 80059f2:	4b19      	ldr	r3, [pc, #100]	; (8005a58 <xMBPortTimersInit+0x70>)
 80059f4:	4a19      	ldr	r2, [pc, #100]	; (8005a5c <xMBPortTimersInit+0x74>)
 80059f6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 80059f8:	f7fc fba6 	bl	8002148 <HAL_RCC_GetPCLK1Freq>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <xMBPortTimersInit+0x78>)
 8005a00:	fba2 2303 	umull	r2, r3, r2, r3
 8005a04:	0c9b      	lsrs	r3, r3, #18
 8005a06:	3b01      	subs	r3, #1
 8005a08:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <xMBPortTimersInit+0x70>)
 8005a0a:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a0c:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <xMBPortTimersInit+0x70>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50 - 1;
 8005a12:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <xMBPortTimersInit+0x70>)
 8005a14:	2231      	movs	r2, #49	; 0x31
 8005a16:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 8005a18:	4a12      	ldr	r2, [pc, #72]	; (8005a64 <xMBPortTimersInit+0x7c>)
 8005a1a:	88fb      	ldrh	r3, [r7, #6]
 8005a1c:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005a1e:	480e      	ldr	r0, [pc, #56]	; (8005a58 <xMBPortTimersInit+0x70>)
 8005a20:	f7fc fbec 	bl	80021fc <HAL_TIM_Base_Init>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <xMBPortTimersInit+0x46>
  {
    return FALSE;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e00f      	b.n	8005a4e <xMBPortTimersInit+0x66>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005a2e:	2320      	movs	r3, #32
 8005a30:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005a36:	f107 0308 	add.w	r3, r7, #8
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	4806      	ldr	r0, [pc, #24]	; (8005a58 <xMBPortTimersInit+0x70>)
 8005a3e:	f7fc fe9d 	bl	800277c <HAL_TIMEx_MasterConfigSynchronization>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <xMBPortTimersInit+0x64>
  {
    return FALSE;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <xMBPortTimersInit+0x66>
  }
  
  return TRUE;
 8005a4c:	2301      	movs	r3, #1
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	2000036c 	.word	0x2000036c
 8005a5c:	40001400 	.word	0x40001400
 8005a60:	431bde83 	.word	0x431bde83
 8005a64:	20004202 	.word	0x20004202

08005a68 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <vMBPortTimersEnable+0x18>)
 8005a6e:	881a      	ldrh	r2, [r3, #0]
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <vMBPortTimersEnable+0x1c>)
 8005a72:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 8005a74:	4804      	ldr	r0, [pc, #16]	; (8005a88 <vMBPortTimersEnable+0x20>)
 8005a76:	f7fc fc11 	bl	800229c <HAL_TIM_Base_Start_IT>
}
 8005a7a:	bf00      	nop
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20004202 	.word	0x20004202
 8005a84:	20004204 	.word	0x20004204
 8005a88:	2000036c 	.word	0x2000036c

08005a8c <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 8005a90:	4802      	ldr	r0, [pc, #8]	; (8005a9c <vMBPortTimersDisable+0x10>)
 8005a92:	f7fc fc73 	bl	800237c <HAL_TIM_Base_Stop_IT>
}
 8005a96:	bf00      	nop
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000036c 	.word	0x2000036c

08005aa0 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8005aac:	23ff      	movs	r3, #255	; 0xff
 8005aae:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8005ab0:	23ff      	movs	r3, #255	; 0xff
 8005ab2:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8005ab4:	e013      	b.n	8005ade <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	4053      	eors	r3, r2
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 8005ac6:	4a0f      	ldr	r2, [pc, #60]	; (8005b04 <usMBCRC16+0x64>)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4413      	add	r3, r2
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
 8005ad0:	4053      	eors	r3, r2
 8005ad2:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8005ad4:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <usMBCRC16+0x68>)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8005ade:	887b      	ldrh	r3, [r7, #2]
 8005ae0:	1e5a      	subs	r2, r3, #1
 8005ae2:	807a      	strh	r2, [r7, #2]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1e6      	bne.n	8005ab6 <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	021b      	lsls	r3, r3, #8
 8005aec:	b21a      	sxth	r2, r3
 8005aee:	7bbb      	ldrb	r3, [r7, #14]
 8005af0:	b21b      	sxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b21b      	sxth	r3, r3
 8005af6:	b29b      	uxth	r3, r3
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	0800711c 	.word	0x0800711c
 8005b08:	0800721c 	.word	0x0800721c

08005b0c <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	603a      	str	r2, [r7, #0]
 8005b14:	461a      	mov	r2, r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	71fb      	strb	r3, [r7, #7]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	71bb      	strb	r3, [r7, #6]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005b22:	2300      	movs	r3, #0
 8005b24:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005b26:	b672      	cpsid	i
}
 8005b28:	bf00      	nop

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8005b2a:	797b      	ldrb	r3, [r7, #5]
 8005b2c:	79b8      	ldrb	r0, [r7, #6]
 8005b2e:	2208      	movs	r2, #8
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	f7ff ff19 	bl	8005968 <xMBPortSerialInit>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d002      	beq.n	8005b42 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	73fb      	strb	r3, [r7, #15]
 8005b40:	e016      	b.n	8005b70 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8005b48:	d902      	bls.n	8005b50 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8005b4a:	2323      	movs	r3, #35	; 0x23
 8005b4c:	60bb      	str	r3, [r7, #8]
 8005b4e:	e005      	b.n	8005b5c <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	005b      	lsls	r3, r3, #1
 8005b54:	4a0a      	ldr	r2, [pc, #40]	; (8005b80 <eMBRTUInit+0x74>)
 8005b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b5a:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7ff ff41 	bl	80059e8 <xMBPortTimersInit>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005b70:	b662      	cpsie	i
}
 8005b72:	bf00      	nop
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8005b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	00177fa0 	.word	0x00177fa0

08005b84 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005b88:	b672      	cpsid	i
}
 8005b8a:	bf00      	nop
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	; (8005ba8 <eMBRTUStart+0x24>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8005b92:	2100      	movs	r1, #0
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7ff feaf 	bl	80058f8 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8005b9a:	f7ff ff65 	bl	8005a68 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8005b9e:	b662      	cpsie	i
}
 8005ba0:	bf00      	nop

    EXIT_CRITICAL_SECTION(  );
}
 8005ba2:	bf00      	nop
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20004207 	.word	0x20004207

08005bac <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb0:	b672      	cpsid	i
}
 8005bb2:	bf00      	nop
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	f7ff fe9e 	bl	80058f8 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8005bbc:	f7ff ff66 	bl	8005a8c <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8005bc0:	b662      	cpsie	i
}
 8005bc2:	bf00      	nop
    EXIT_CRITICAL_SECTION(  );
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bdc:	b672      	cpsid	i
}
 8005bde:	bf00      	nop
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8005be0:	4b1a      	ldr	r3, [pc, #104]	; (8005c4c <eMBRTUReceive+0x84>)
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2bff      	cmp	r3, #255	; 0xff
 8005be8:	d905      	bls.n	8005bf6 <eMBRTUReceive+0x2e>
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <eMBRTUReceive+0x88>)
 8005bec:	4a19      	ldr	r2, [pc, #100]	; (8005c54 <eMBRTUReceive+0x8c>)
 8005bee:	21a1      	movs	r1, #161	; 0xa1
 8005bf0:	4819      	ldr	r0, [pc, #100]	; (8005c58 <eMBRTUReceive+0x90>)
 8005bf2:	f000 f9a1 	bl	8005f38 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8005bf6:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <eMBRTUReceive+0x84>)
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d91b      	bls.n	8005c38 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <eMBRTUReceive+0x84>)
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	4619      	mov	r1, r3
 8005c08:	4814      	ldr	r0, [pc, #80]	; (8005c5c <eMBRTUReceive+0x94>)
 8005c0a:	f7ff ff49 	bl	8005aa0 <usMBCRC16>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d111      	bne.n	8005c38 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <eMBRTUReceive+0x94>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8005c1e:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <eMBRTUReceive+0x84>)
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b03      	subs	r3, #3
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <eMBRTUReceive+0x98>)
 8005c30:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8005c32:	2301      	movs	r3, #1
 8005c34:	75bb      	strb	r3, [r7, #22]
 8005c36:	e001      	b.n	8005c3c <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8005c38:	2305      	movs	r3, #5
 8005c3a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c3c:	b662      	cpsie	i
}
 8005c3e:	bf00      	nop
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8005c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	2000430e 	.word	0x2000430e
 8005c50:	08007010 	.word	0x08007010
 8005c54:	0800731c 	.word	0x0800731c
 8005c58:	08007038 	.word	0x08007038
 8005c5c:	20004208 	.word	0x20004208
 8005c60:	20004209 	.word	0x20004209

08005c64 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	6039      	str	r1, [r7, #0]
 8005c6e:	71fb      	strb	r3, [r7, #7]
 8005c70:	4613      	mov	r3, r2
 8005c72:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c78:	b672      	cpsid	i
}
 8005c7a:	bf00      	nop

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <eMBRTUSend+0xb4>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d13f      	bne.n	8005d06 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	4a24      	ldr	r2, [pc, #144]	; (8005d1c <eMBRTUSend+0xb8>)
 8005c8c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8005c8e:	4b24      	ldr	r3, [pc, #144]	; (8005d20 <eMBRTUSend+0xbc>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <eMBRTUSend+0xb8>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	79fa      	ldrb	r2, [r7, #7]
 8005c9a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8005c9c:	4b20      	ldr	r3, [pc, #128]	; (8005d20 <eMBRTUSend+0xbc>)
 8005c9e:	881b      	ldrh	r3, [r3, #0]
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	88bb      	ldrh	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <eMBRTUSend+0xbc>)
 8005caa:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <eMBRTUSend+0xb8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <eMBRTUSend+0xbc>)
 8005cb2:	8812      	ldrh	r2, [r2, #0]
 8005cb4:	b292      	uxth	r2, r2
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff fef1 	bl	8005aa0 <usMBCRC16>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8005cc2:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <eMBRTUSend+0xbc>)
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	b291      	uxth	r1, r2
 8005ccc:	4a14      	ldr	r2, [pc, #80]	; (8005d20 <eMBRTUSend+0xbc>)
 8005cce:	8011      	strh	r1, [r2, #0]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	89bb      	ldrh	r3, [r7, #12]
 8005cd4:	b2d9      	uxtb	r1, r3
 8005cd6:	4b13      	ldr	r3, [pc, #76]	; (8005d24 <eMBRTUSend+0xc0>)
 8005cd8:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8005cda:	89bb      	ldrh	r3, [r7, #12]
 8005cdc:	0a1b      	lsrs	r3, r3, #8
 8005cde:	b299      	uxth	r1, r3
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <eMBRTUSend+0xbc>)
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	1c5a      	adds	r2, r3, #1
 8005ce8:	b290      	uxth	r0, r2
 8005cea:	4a0d      	ldr	r2, [pc, #52]	; (8005d20 <eMBRTUSend+0xbc>)
 8005cec:	8010      	strh	r0, [r2, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	b2c9      	uxtb	r1, r1
 8005cf2:	4b0c      	ldr	r3, [pc, #48]	; (8005d24 <eMBRTUSend+0xc0>)
 8005cf4:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8005cf6:	4b0c      	ldr	r3, [pc, #48]	; (8005d28 <eMBRTUSend+0xc4>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	2000      	movs	r0, #0
 8005d00:	f7ff fdfa 	bl	80058f8 <vMBPortSerialEnable>
 8005d04:	e001      	b.n	8005d0a <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8005d06:	2305      	movs	r3, #5
 8005d08:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d0a:	b662      	cpsie	i
}
 8005d0c:	bf00      	nop
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20004207 	.word	0x20004207
 8005d1c:	20004308 	.word	0x20004308
 8005d20:	2000430c 	.word	0x2000430c
 8005d24:	20004208 	.word	0x20004208
 8005d28:	20004206 	.word	0x20004206

08005d2c <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8005d36:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <xMBRTUReceiveFSM+0xb4>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <xMBRTUReceiveFSM+0x20>
 8005d40:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <xMBRTUReceiveFSM+0xb8>)
 8005d42:	4a29      	ldr	r2, [pc, #164]	; (8005de8 <xMBRTUReceiveFSM+0xbc>)
 8005d44:	21eb      	movs	r1, #235	; 0xeb
 8005d46:	4829      	ldr	r0, [pc, #164]	; (8005dec <xMBRTUReceiveFSM+0xc0>)
 8005d48:	f000 f8f6 	bl	8005f38 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8005d4c:	1dbb      	adds	r3, r7, #6
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff fe36 	bl	80059c0 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8005d54:	4b26      	ldr	r3, [pc, #152]	; (8005df0 <xMBRTUReceiveFSM+0xc4>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b03      	cmp	r3, #3
 8005d5c:	d83b      	bhi.n	8005dd6 <xMBRTUReceiveFSM+0xaa>
 8005d5e:	a201      	add	r2, pc, #4	; (adr r2, 8005d64 <xMBRTUReceiveFSM+0x38>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d75 	.word	0x08005d75
 8005d68:	08005d81 	.word	0x08005d81
 8005d6c:	08005da9 	.word	0x08005da9
 8005d70:	08005d7b 	.word	0x08005d7b
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8005d74:	f7ff fe78 	bl	8005a68 <vMBPortTimersEnable>
        break;
 8005d78:	e02d      	b.n	8005dd6 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8005d7a:	f7ff fe75 	bl	8005a68 <vMBPortTimersEnable>
        break;
 8005d7e:	e02a      	b.n	8005dd6 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <xMBRTUReceiveFSM+0xc8>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005d86:	4b1b      	ldr	r3, [pc, #108]	; (8005df4 <xMBRTUReceiveFSM+0xc8>)
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	b291      	uxth	r1, r2
 8005d90:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <xMBRTUReceiveFSM+0xc8>)
 8005d92:	8011      	strh	r1, [r2, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	79b9      	ldrb	r1, [r7, #6]
 8005d98:	4b17      	ldr	r3, [pc, #92]	; (8005df8 <xMBRTUReceiveFSM+0xcc>)
 8005d9a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <xMBRTUReceiveFSM+0xc4>)
 8005d9e:	2202      	movs	r2, #2
 8005da0:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8005da2:	f7ff fe61 	bl	8005a68 <vMBPortTimersEnable>
        break;
 8005da6:	e016      	b.n	8005dd6 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8005da8:	4b12      	ldr	r3, [pc, #72]	; (8005df4 <xMBRTUReceiveFSM+0xc8>)
 8005daa:	881b      	ldrh	r3, [r3, #0]
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2bff      	cmp	r3, #255	; 0xff
 8005db0:	d80b      	bhi.n	8005dca <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8005db2:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <xMBRTUReceiveFSM+0xc8>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	b291      	uxth	r1, r2
 8005dbc:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <xMBRTUReceiveFSM+0xc8>)
 8005dbe:	8011      	strh	r1, [r2, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	79b9      	ldrb	r1, [r7, #6]
 8005dc4:	4b0c      	ldr	r3, [pc, #48]	; (8005df8 <xMBRTUReceiveFSM+0xcc>)
 8005dc6:	5499      	strb	r1, [r3, r2]
 8005dc8:	e002      	b.n	8005dd0 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <xMBRTUReceiveFSM+0xc4>)
 8005dcc:	2203      	movs	r2, #3
 8005dce:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8005dd0:	f7ff fe4a 	bl	8005a68 <vMBPortTimersEnable>
        break;
 8005dd4:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20004206 	.word	0x20004206
 8005de4:	08007068 	.word	0x08007068
 8005de8:	0800732c 	.word	0x0800732c
 8005dec:	08007038 	.word	0x08007038
 8005df0:	20004207 	.word	0x20004207
 8005df4:	2000430e 	.word	0x2000430e
 8005df8:	20004208 	.word	0x20004208

08005dfc <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8005e06:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <xMBRTUTransmitFSM+0x94>)
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d006      	beq.n	8005e1e <xMBRTUTransmitFSM+0x22>
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <xMBRTUTransmitFSM+0x98>)
 8005e12:	4a21      	ldr	r2, [pc, #132]	; (8005e98 <xMBRTUTransmitFSM+0x9c>)
 8005e14:	f44f 7193 	mov.w	r1, #294	; 0x126
 8005e18:	4820      	ldr	r0, [pc, #128]	; (8005e9c <xMBRTUTransmitFSM+0xa0>)
 8005e1a:	f000 f88d 	bl	8005f38 <__assert_func>

    switch ( eSndState )
 8005e1e:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <xMBRTUTransmitFSM+0xa4>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <xMBRTUTransmitFSM+0x32>
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d005      	beq.n	8005e38 <xMBRTUTransmitFSM+0x3c>
 8005e2c:	e02a      	b.n	8005e84 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8005e2e:	2100      	movs	r1, #0
 8005e30:	2001      	movs	r0, #1
 8005e32:	f7ff fd61 	bl	80058f8 <vMBPortSerialEnable>
        break;
 8005e36:	e025      	b.n	8005e84 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8005e38:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <xMBRTUTransmitFSM+0xa8>)
 8005e3a:	881b      	ldrh	r3, [r3, #0]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d013      	beq.n	8005e6a <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8005e42:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <xMBRTUTransmitFSM+0xac>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fda0 	bl	8005990 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <xMBRTUTransmitFSM+0xac>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a14      	ldr	r2, [pc, #80]	; (8005ea8 <xMBRTUTransmitFSM+0xac>)
 8005e58:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <xMBRTUTransmitFSM+0xa8>)
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	4b0f      	ldr	r3, [pc, #60]	; (8005ea4 <xMBRTUTransmitFSM+0xa8>)
 8005e66:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8005e68:	e00b      	b.n	8005e82 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8005e6a:	2003      	movs	r0, #3
 8005e6c:	f7ff fd10 	bl	8005890 <xMBPortEventPost>
 8005e70:	4603      	mov	r3, r0
 8005e72:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8005e74:	2100      	movs	r1, #0
 8005e76:	2001      	movs	r0, #1
 8005e78:	f7ff fd3e 	bl	80058f8 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8005e7c:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <xMBRTUTransmitFSM+0xa4>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	701a      	strb	r2, [r3, #0]
        break;
 8005e82:	bf00      	nop
    }

    return xNeedPoll;
 8005e84:	79fb      	ldrb	r3, [r7, #7]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20004207 	.word	0x20004207
 8005e94:	08007084 	.word	0x08007084
 8005e98:	08007340 	.word	0x08007340
 8005e9c:	08007038 	.word	0x08007038
 8005ea0:	20004206 	.word	0x20004206
 8005ea4:	2000430c 	.word	0x2000430c
 8005ea8:	20004308 	.word	0x20004308

08005eac <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8005eb6:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <xMBRTUTimerT35Expired+0x7c>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d028      	beq.n	8005f12 <xMBRTUTimerT35Expired+0x66>
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	dc10      	bgt.n	8005ee6 <xMBRTUTimerT35Expired+0x3a>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <xMBRTUTimerT35Expired+0x22>
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d006      	beq.n	8005eda <xMBRTUTimerT35Expired+0x2e>
 8005ecc:	e00b      	b.n	8005ee6 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8005ece:	2000      	movs	r0, #0
 8005ed0:	f7ff fcde 	bl	8005890 <xMBPortEventPost>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	71fb      	strb	r3, [r7, #7]
        break;
 8005ed8:	e01c      	b.n	8005f14 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8005eda:	2001      	movs	r0, #1
 8005edc:	f7ff fcd8 	bl	8005890 <xMBPortEventPost>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	71fb      	strb	r3, [r7, #7]
        break;
 8005ee4:	e016      	b.n	8005f14 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8005ee6:	4b10      	ldr	r3, [pc, #64]	; (8005f28 <xMBRTUTimerT35Expired+0x7c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d011      	beq.n	8005f14 <xMBRTUTimerT35Expired+0x68>
 8005ef0:	4b0d      	ldr	r3, [pc, #52]	; (8005f28 <xMBRTUTimerT35Expired+0x7c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d00c      	beq.n	8005f14 <xMBRTUTimerT35Expired+0x68>
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <xMBRTUTimerT35Expired+0x7c>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b03      	cmp	r3, #3
 8005f02:	d007      	beq.n	8005f14 <xMBRTUTimerT35Expired+0x68>
 8005f04:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <xMBRTUTimerT35Expired+0x80>)
 8005f06:	4a0a      	ldr	r2, [pc, #40]	; (8005f30 <xMBRTUTimerT35Expired+0x84>)
 8005f08:	f240 115f 	movw	r1, #351	; 0x15f
 8005f0c:	4809      	ldr	r0, [pc, #36]	; (8005f34 <xMBRTUTimerT35Expired+0x88>)
 8005f0e:	f000 f813 	bl	8005f38 <__assert_func>
        break;
 8005f12:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8005f14:	f7ff fdba 	bl	8005a8c <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8005f18:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <xMBRTUTimerT35Expired+0x7c>)
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8005f1e:	79fb      	ldrb	r3, [r7, #7]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	20004207 	.word	0x20004207
 8005f2c:	080070a0 	.word	0x080070a0
 8005f30:	08007354 	.word	0x08007354
 8005f34:	08007038 	.word	0x08007038

08005f38 <__assert_func>:
 8005f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f3a:	4614      	mov	r4, r2
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4b09      	ldr	r3, [pc, #36]	; (8005f64 <__assert_func+0x2c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4605      	mov	r5, r0
 8005f44:	68d8      	ldr	r0, [r3, #12]
 8005f46:	b14c      	cbz	r4, 8005f5c <__assert_func+0x24>
 8005f48:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <__assert_func+0x30>)
 8005f4a:	9100      	str	r1, [sp, #0]
 8005f4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f50:	4906      	ldr	r1, [pc, #24]	; (8005f6c <__assert_func+0x34>)
 8005f52:	462b      	mov	r3, r5
 8005f54:	f000 f814 	bl	8005f80 <fiprintf>
 8005f58:	f000 fc0c 	bl	8006774 <abort>
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <__assert_func+0x38>)
 8005f5e:	461c      	mov	r4, r3
 8005f60:	e7f3      	b.n	8005f4a <__assert_func+0x12>
 8005f62:	bf00      	nop
 8005f64:	20000098 	.word	0x20000098
 8005f68:	0800736a 	.word	0x0800736a
 8005f6c:	08007377 	.word	0x08007377
 8005f70:	080073a5 	.word	0x080073a5

08005f74 <__errno>:
 8005f74:	4b01      	ldr	r3, [pc, #4]	; (8005f7c <__errno+0x8>)
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop
 8005f7c:	20000098 	.word	0x20000098

08005f80 <fiprintf>:
 8005f80:	b40e      	push	{r1, r2, r3}
 8005f82:	b503      	push	{r0, r1, lr}
 8005f84:	4601      	mov	r1, r0
 8005f86:	ab03      	add	r3, sp, #12
 8005f88:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <fiprintf+0x20>)
 8005f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f8e:	6800      	ldr	r0, [r0, #0]
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	f000 f86b 	bl	800606c <_vfiprintf_r>
 8005f96:	b002      	add	sp, #8
 8005f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f9c:	b003      	add	sp, #12
 8005f9e:	4770      	bx	lr
 8005fa0:	20000098 	.word	0x20000098

08005fa4 <__libc_init_array>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4d0d      	ldr	r5, [pc, #52]	; (8005fdc <__libc_init_array+0x38>)
 8005fa8:	4c0d      	ldr	r4, [pc, #52]	; (8005fe0 <__libc_init_array+0x3c>)
 8005faa:	1b64      	subs	r4, r4, r5
 8005fac:	10a4      	asrs	r4, r4, #2
 8005fae:	2600      	movs	r6, #0
 8005fb0:	42a6      	cmp	r6, r4
 8005fb2:	d109      	bne.n	8005fc8 <__libc_init_array+0x24>
 8005fb4:	4d0b      	ldr	r5, [pc, #44]	; (8005fe4 <__libc_init_array+0x40>)
 8005fb6:	4c0c      	ldr	r4, [pc, #48]	; (8005fe8 <__libc_init_array+0x44>)
 8005fb8:	f000 fff0 	bl	8006f9c <_init>
 8005fbc:	1b64      	subs	r4, r4, r5
 8005fbe:	10a4      	asrs	r4, r4, #2
 8005fc0:	2600      	movs	r6, #0
 8005fc2:	42a6      	cmp	r6, r4
 8005fc4:	d105      	bne.n	8005fd2 <__libc_init_array+0x2e>
 8005fc6:	bd70      	pop	{r4, r5, r6, pc}
 8005fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fcc:	4798      	blx	r3
 8005fce:	3601      	adds	r6, #1
 8005fd0:	e7ee      	b.n	8005fb0 <__libc_init_array+0xc>
 8005fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd6:	4798      	blx	r3
 8005fd8:	3601      	adds	r6, #1
 8005fda:	e7f2      	b.n	8005fc2 <__libc_init_array+0x1e>
 8005fdc:	08007448 	.word	0x08007448
 8005fe0:	08007448 	.word	0x08007448
 8005fe4:	08007448 	.word	0x08007448
 8005fe8:	0800744c 	.word	0x0800744c

08005fec <memcpy>:
 8005fec:	440a      	add	r2, r1
 8005fee:	4291      	cmp	r1, r2
 8005ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff4:	d100      	bne.n	8005ff8 <memcpy+0xc>
 8005ff6:	4770      	bx	lr
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006002:	4291      	cmp	r1, r2
 8006004:	d1f9      	bne.n	8005ffa <memcpy+0xe>
 8006006:	bd10      	pop	{r4, pc}

08006008 <memset>:
 8006008:	4402      	add	r2, r0
 800600a:	4603      	mov	r3, r0
 800600c:	4293      	cmp	r3, r2
 800600e:	d100      	bne.n	8006012 <memset+0xa>
 8006010:	4770      	bx	lr
 8006012:	f803 1b01 	strb.w	r1, [r3], #1
 8006016:	e7f9      	b.n	800600c <memset+0x4>

08006018 <__sfputc_r>:
 8006018:	6893      	ldr	r3, [r2, #8]
 800601a:	3b01      	subs	r3, #1
 800601c:	2b00      	cmp	r3, #0
 800601e:	b410      	push	{r4}
 8006020:	6093      	str	r3, [r2, #8]
 8006022:	da08      	bge.n	8006036 <__sfputc_r+0x1e>
 8006024:	6994      	ldr	r4, [r2, #24]
 8006026:	42a3      	cmp	r3, r4
 8006028:	db01      	blt.n	800602e <__sfputc_r+0x16>
 800602a:	290a      	cmp	r1, #10
 800602c:	d103      	bne.n	8006036 <__sfputc_r+0x1e>
 800602e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006032:	f000 badf 	b.w	80065f4 <__swbuf_r>
 8006036:	6813      	ldr	r3, [r2, #0]
 8006038:	1c58      	adds	r0, r3, #1
 800603a:	6010      	str	r0, [r2, #0]
 800603c:	7019      	strb	r1, [r3, #0]
 800603e:	4608      	mov	r0, r1
 8006040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006044:	4770      	bx	lr

08006046 <__sfputs_r>:
 8006046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006048:	4606      	mov	r6, r0
 800604a:	460f      	mov	r7, r1
 800604c:	4614      	mov	r4, r2
 800604e:	18d5      	adds	r5, r2, r3
 8006050:	42ac      	cmp	r4, r5
 8006052:	d101      	bne.n	8006058 <__sfputs_r+0x12>
 8006054:	2000      	movs	r0, #0
 8006056:	e007      	b.n	8006068 <__sfputs_r+0x22>
 8006058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800605c:	463a      	mov	r2, r7
 800605e:	4630      	mov	r0, r6
 8006060:	f7ff ffda 	bl	8006018 <__sfputc_r>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d1f3      	bne.n	8006050 <__sfputs_r+0xa>
 8006068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800606c <_vfiprintf_r>:
 800606c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006070:	460d      	mov	r5, r1
 8006072:	b09d      	sub	sp, #116	; 0x74
 8006074:	4614      	mov	r4, r2
 8006076:	4698      	mov	r8, r3
 8006078:	4606      	mov	r6, r0
 800607a:	b118      	cbz	r0, 8006084 <_vfiprintf_r+0x18>
 800607c:	6983      	ldr	r3, [r0, #24]
 800607e:	b90b      	cbnz	r3, 8006084 <_vfiprintf_r+0x18>
 8006080:	f000 fc9a 	bl	80069b8 <__sinit>
 8006084:	4b89      	ldr	r3, [pc, #548]	; (80062ac <_vfiprintf_r+0x240>)
 8006086:	429d      	cmp	r5, r3
 8006088:	d11b      	bne.n	80060c2 <_vfiprintf_r+0x56>
 800608a:	6875      	ldr	r5, [r6, #4]
 800608c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608e:	07d9      	lsls	r1, r3, #31
 8006090:	d405      	bmi.n	800609e <_vfiprintf_r+0x32>
 8006092:	89ab      	ldrh	r3, [r5, #12]
 8006094:	059a      	lsls	r2, r3, #22
 8006096:	d402      	bmi.n	800609e <_vfiprintf_r+0x32>
 8006098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800609a:	f000 fd2b 	bl	8006af4 <__retarget_lock_acquire_recursive>
 800609e:	89ab      	ldrh	r3, [r5, #12]
 80060a0:	071b      	lsls	r3, r3, #28
 80060a2:	d501      	bpl.n	80060a8 <_vfiprintf_r+0x3c>
 80060a4:	692b      	ldr	r3, [r5, #16]
 80060a6:	b9eb      	cbnz	r3, 80060e4 <_vfiprintf_r+0x78>
 80060a8:	4629      	mov	r1, r5
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 faf4 	bl	8006698 <__swsetup_r>
 80060b0:	b1c0      	cbz	r0, 80060e4 <_vfiprintf_r+0x78>
 80060b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060b4:	07dc      	lsls	r4, r3, #31
 80060b6:	d50e      	bpl.n	80060d6 <_vfiprintf_r+0x6a>
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295
 80060bc:	b01d      	add	sp, #116	; 0x74
 80060be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060c2:	4b7b      	ldr	r3, [pc, #492]	; (80062b0 <_vfiprintf_r+0x244>)
 80060c4:	429d      	cmp	r5, r3
 80060c6:	d101      	bne.n	80060cc <_vfiprintf_r+0x60>
 80060c8:	68b5      	ldr	r5, [r6, #8]
 80060ca:	e7df      	b.n	800608c <_vfiprintf_r+0x20>
 80060cc:	4b79      	ldr	r3, [pc, #484]	; (80062b4 <_vfiprintf_r+0x248>)
 80060ce:	429d      	cmp	r5, r3
 80060d0:	bf08      	it	eq
 80060d2:	68f5      	ldreq	r5, [r6, #12]
 80060d4:	e7da      	b.n	800608c <_vfiprintf_r+0x20>
 80060d6:	89ab      	ldrh	r3, [r5, #12]
 80060d8:	0598      	lsls	r0, r3, #22
 80060da:	d4ed      	bmi.n	80060b8 <_vfiprintf_r+0x4c>
 80060dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060de:	f000 fd0a 	bl	8006af6 <__retarget_lock_release_recursive>
 80060e2:	e7e9      	b.n	80060b8 <_vfiprintf_r+0x4c>
 80060e4:	2300      	movs	r3, #0
 80060e6:	9309      	str	r3, [sp, #36]	; 0x24
 80060e8:	2320      	movs	r3, #32
 80060ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80060f2:	2330      	movs	r3, #48	; 0x30
 80060f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80062b8 <_vfiprintf_r+0x24c>
 80060f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060fc:	f04f 0901 	mov.w	r9, #1
 8006100:	4623      	mov	r3, r4
 8006102:	469a      	mov	sl, r3
 8006104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006108:	b10a      	cbz	r2, 800610e <_vfiprintf_r+0xa2>
 800610a:	2a25      	cmp	r2, #37	; 0x25
 800610c:	d1f9      	bne.n	8006102 <_vfiprintf_r+0x96>
 800610e:	ebba 0b04 	subs.w	fp, sl, r4
 8006112:	d00b      	beq.n	800612c <_vfiprintf_r+0xc0>
 8006114:	465b      	mov	r3, fp
 8006116:	4622      	mov	r2, r4
 8006118:	4629      	mov	r1, r5
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff ff93 	bl	8006046 <__sfputs_r>
 8006120:	3001      	adds	r0, #1
 8006122:	f000 80aa 	beq.w	800627a <_vfiprintf_r+0x20e>
 8006126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006128:	445a      	add	r2, fp
 800612a:	9209      	str	r2, [sp, #36]	; 0x24
 800612c:	f89a 3000 	ldrb.w	r3, [sl]
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 80a2 	beq.w	800627a <_vfiprintf_r+0x20e>
 8006136:	2300      	movs	r3, #0
 8006138:	f04f 32ff 	mov.w	r2, #4294967295
 800613c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006140:	f10a 0a01 	add.w	sl, sl, #1
 8006144:	9304      	str	r3, [sp, #16]
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800614c:	931a      	str	r3, [sp, #104]	; 0x68
 800614e:	4654      	mov	r4, sl
 8006150:	2205      	movs	r2, #5
 8006152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006156:	4858      	ldr	r0, [pc, #352]	; (80062b8 <_vfiprintf_r+0x24c>)
 8006158:	f7fa f83a 	bl	80001d0 <memchr>
 800615c:	9a04      	ldr	r2, [sp, #16]
 800615e:	b9d8      	cbnz	r0, 8006198 <_vfiprintf_r+0x12c>
 8006160:	06d1      	lsls	r1, r2, #27
 8006162:	bf44      	itt	mi
 8006164:	2320      	movmi	r3, #32
 8006166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800616a:	0713      	lsls	r3, r2, #28
 800616c:	bf44      	itt	mi
 800616e:	232b      	movmi	r3, #43	; 0x2b
 8006170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006174:	f89a 3000 	ldrb.w	r3, [sl]
 8006178:	2b2a      	cmp	r3, #42	; 0x2a
 800617a:	d015      	beq.n	80061a8 <_vfiprintf_r+0x13c>
 800617c:	9a07      	ldr	r2, [sp, #28]
 800617e:	4654      	mov	r4, sl
 8006180:	2000      	movs	r0, #0
 8006182:	f04f 0c0a 	mov.w	ip, #10
 8006186:	4621      	mov	r1, r4
 8006188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800618c:	3b30      	subs	r3, #48	; 0x30
 800618e:	2b09      	cmp	r3, #9
 8006190:	d94e      	bls.n	8006230 <_vfiprintf_r+0x1c4>
 8006192:	b1b0      	cbz	r0, 80061c2 <_vfiprintf_r+0x156>
 8006194:	9207      	str	r2, [sp, #28]
 8006196:	e014      	b.n	80061c2 <_vfiprintf_r+0x156>
 8006198:	eba0 0308 	sub.w	r3, r0, r8
 800619c:	fa09 f303 	lsl.w	r3, r9, r3
 80061a0:	4313      	orrs	r3, r2
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	46a2      	mov	sl, r4
 80061a6:	e7d2      	b.n	800614e <_vfiprintf_r+0xe2>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	1d19      	adds	r1, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9103      	str	r1, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfbb      	ittet	lt
 80061b4:	425b      	neglt	r3, r3
 80061b6:	f042 0202 	orrlt.w	r2, r2, #2
 80061ba:	9307      	strge	r3, [sp, #28]
 80061bc:	9307      	strlt	r3, [sp, #28]
 80061be:	bfb8      	it	lt
 80061c0:	9204      	strlt	r2, [sp, #16]
 80061c2:	7823      	ldrb	r3, [r4, #0]
 80061c4:	2b2e      	cmp	r3, #46	; 0x2e
 80061c6:	d10c      	bne.n	80061e2 <_vfiprintf_r+0x176>
 80061c8:	7863      	ldrb	r3, [r4, #1]
 80061ca:	2b2a      	cmp	r3, #42	; 0x2a
 80061cc:	d135      	bne.n	800623a <_vfiprintf_r+0x1ce>
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	1d1a      	adds	r2, r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	9203      	str	r2, [sp, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	bfb8      	it	lt
 80061da:	f04f 33ff 	movlt.w	r3, #4294967295
 80061de:	3402      	adds	r4, #2
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062c8 <_vfiprintf_r+0x25c>
 80061e6:	7821      	ldrb	r1, [r4, #0]
 80061e8:	2203      	movs	r2, #3
 80061ea:	4650      	mov	r0, sl
 80061ec:	f7f9 fff0 	bl	80001d0 <memchr>
 80061f0:	b140      	cbz	r0, 8006204 <_vfiprintf_r+0x198>
 80061f2:	2340      	movs	r3, #64	; 0x40
 80061f4:	eba0 000a 	sub.w	r0, r0, sl
 80061f8:	fa03 f000 	lsl.w	r0, r3, r0
 80061fc:	9b04      	ldr	r3, [sp, #16]
 80061fe:	4303      	orrs	r3, r0
 8006200:	3401      	adds	r4, #1
 8006202:	9304      	str	r3, [sp, #16]
 8006204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006208:	482c      	ldr	r0, [pc, #176]	; (80062bc <_vfiprintf_r+0x250>)
 800620a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800620e:	2206      	movs	r2, #6
 8006210:	f7f9 ffde 	bl	80001d0 <memchr>
 8006214:	2800      	cmp	r0, #0
 8006216:	d03f      	beq.n	8006298 <_vfiprintf_r+0x22c>
 8006218:	4b29      	ldr	r3, [pc, #164]	; (80062c0 <_vfiprintf_r+0x254>)
 800621a:	bb1b      	cbnz	r3, 8006264 <_vfiprintf_r+0x1f8>
 800621c:	9b03      	ldr	r3, [sp, #12]
 800621e:	3307      	adds	r3, #7
 8006220:	f023 0307 	bic.w	r3, r3, #7
 8006224:	3308      	adds	r3, #8
 8006226:	9303      	str	r3, [sp, #12]
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	443b      	add	r3, r7
 800622c:	9309      	str	r3, [sp, #36]	; 0x24
 800622e:	e767      	b.n	8006100 <_vfiprintf_r+0x94>
 8006230:	fb0c 3202 	mla	r2, ip, r2, r3
 8006234:	460c      	mov	r4, r1
 8006236:	2001      	movs	r0, #1
 8006238:	e7a5      	b.n	8006186 <_vfiprintf_r+0x11a>
 800623a:	2300      	movs	r3, #0
 800623c:	3401      	adds	r4, #1
 800623e:	9305      	str	r3, [sp, #20]
 8006240:	4619      	mov	r1, r3
 8006242:	f04f 0c0a 	mov.w	ip, #10
 8006246:	4620      	mov	r0, r4
 8006248:	f810 2b01 	ldrb.w	r2, [r0], #1
 800624c:	3a30      	subs	r2, #48	; 0x30
 800624e:	2a09      	cmp	r2, #9
 8006250:	d903      	bls.n	800625a <_vfiprintf_r+0x1ee>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d0c5      	beq.n	80061e2 <_vfiprintf_r+0x176>
 8006256:	9105      	str	r1, [sp, #20]
 8006258:	e7c3      	b.n	80061e2 <_vfiprintf_r+0x176>
 800625a:	fb0c 2101 	mla	r1, ip, r1, r2
 800625e:	4604      	mov	r4, r0
 8006260:	2301      	movs	r3, #1
 8006262:	e7f0      	b.n	8006246 <_vfiprintf_r+0x1da>
 8006264:	ab03      	add	r3, sp, #12
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	462a      	mov	r2, r5
 800626a:	4b16      	ldr	r3, [pc, #88]	; (80062c4 <_vfiprintf_r+0x258>)
 800626c:	a904      	add	r1, sp, #16
 800626e:	4630      	mov	r0, r6
 8006270:	f3af 8000 	nop.w
 8006274:	4607      	mov	r7, r0
 8006276:	1c78      	adds	r0, r7, #1
 8006278:	d1d6      	bne.n	8006228 <_vfiprintf_r+0x1bc>
 800627a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800627c:	07d9      	lsls	r1, r3, #31
 800627e:	d405      	bmi.n	800628c <_vfiprintf_r+0x220>
 8006280:	89ab      	ldrh	r3, [r5, #12]
 8006282:	059a      	lsls	r2, r3, #22
 8006284:	d402      	bmi.n	800628c <_vfiprintf_r+0x220>
 8006286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006288:	f000 fc35 	bl	8006af6 <__retarget_lock_release_recursive>
 800628c:	89ab      	ldrh	r3, [r5, #12]
 800628e:	065b      	lsls	r3, r3, #25
 8006290:	f53f af12 	bmi.w	80060b8 <_vfiprintf_r+0x4c>
 8006294:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006296:	e711      	b.n	80060bc <_vfiprintf_r+0x50>
 8006298:	ab03      	add	r3, sp, #12
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	462a      	mov	r2, r5
 800629e:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <_vfiprintf_r+0x258>)
 80062a0:	a904      	add	r1, sp, #16
 80062a2:	4630      	mov	r0, r6
 80062a4:	f000 f880 	bl	80063a8 <_printf_i>
 80062a8:	e7e4      	b.n	8006274 <_vfiprintf_r+0x208>
 80062aa:	bf00      	nop
 80062ac:	08007400 	.word	0x08007400
 80062b0:	08007420 	.word	0x08007420
 80062b4:	080073e0 	.word	0x080073e0
 80062b8:	080073ac 	.word	0x080073ac
 80062bc:	080073b6 	.word	0x080073b6
 80062c0:	00000000 	.word	0x00000000
 80062c4:	08006047 	.word	0x08006047
 80062c8:	080073b2 	.word	0x080073b2

080062cc <_printf_common>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	4616      	mov	r6, r2
 80062d2:	4699      	mov	r9, r3
 80062d4:	688a      	ldr	r2, [r1, #8]
 80062d6:	690b      	ldr	r3, [r1, #16]
 80062d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062dc:	4293      	cmp	r3, r2
 80062de:	bfb8      	it	lt
 80062e0:	4613      	movlt	r3, r2
 80062e2:	6033      	str	r3, [r6, #0]
 80062e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062e8:	4607      	mov	r7, r0
 80062ea:	460c      	mov	r4, r1
 80062ec:	b10a      	cbz	r2, 80062f2 <_printf_common+0x26>
 80062ee:	3301      	adds	r3, #1
 80062f0:	6033      	str	r3, [r6, #0]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	0699      	lsls	r1, r3, #26
 80062f6:	bf42      	ittt	mi
 80062f8:	6833      	ldrmi	r3, [r6, #0]
 80062fa:	3302      	addmi	r3, #2
 80062fc:	6033      	strmi	r3, [r6, #0]
 80062fe:	6825      	ldr	r5, [r4, #0]
 8006300:	f015 0506 	ands.w	r5, r5, #6
 8006304:	d106      	bne.n	8006314 <_printf_common+0x48>
 8006306:	f104 0a19 	add.w	sl, r4, #25
 800630a:	68e3      	ldr	r3, [r4, #12]
 800630c:	6832      	ldr	r2, [r6, #0]
 800630e:	1a9b      	subs	r3, r3, r2
 8006310:	42ab      	cmp	r3, r5
 8006312:	dc26      	bgt.n	8006362 <_printf_common+0x96>
 8006314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006318:	1e13      	subs	r3, r2, #0
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	bf18      	it	ne
 800631e:	2301      	movne	r3, #1
 8006320:	0692      	lsls	r2, r2, #26
 8006322:	d42b      	bmi.n	800637c <_printf_common+0xb0>
 8006324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006328:	4649      	mov	r1, r9
 800632a:	4638      	mov	r0, r7
 800632c:	47c0      	blx	r8
 800632e:	3001      	adds	r0, #1
 8006330:	d01e      	beq.n	8006370 <_printf_common+0xa4>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	68e5      	ldr	r5, [r4, #12]
 8006336:	6832      	ldr	r2, [r6, #0]
 8006338:	f003 0306 	and.w	r3, r3, #6
 800633c:	2b04      	cmp	r3, #4
 800633e:	bf08      	it	eq
 8006340:	1aad      	subeq	r5, r5, r2
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	6922      	ldr	r2, [r4, #16]
 8006346:	bf0c      	ite	eq
 8006348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800634c:	2500      	movne	r5, #0
 800634e:	4293      	cmp	r3, r2
 8006350:	bfc4      	itt	gt
 8006352:	1a9b      	subgt	r3, r3, r2
 8006354:	18ed      	addgt	r5, r5, r3
 8006356:	2600      	movs	r6, #0
 8006358:	341a      	adds	r4, #26
 800635a:	42b5      	cmp	r5, r6
 800635c:	d11a      	bne.n	8006394 <_printf_common+0xc8>
 800635e:	2000      	movs	r0, #0
 8006360:	e008      	b.n	8006374 <_printf_common+0xa8>
 8006362:	2301      	movs	r3, #1
 8006364:	4652      	mov	r2, sl
 8006366:	4649      	mov	r1, r9
 8006368:	4638      	mov	r0, r7
 800636a:	47c0      	blx	r8
 800636c:	3001      	adds	r0, #1
 800636e:	d103      	bne.n	8006378 <_printf_common+0xac>
 8006370:	f04f 30ff 	mov.w	r0, #4294967295
 8006374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006378:	3501      	adds	r5, #1
 800637a:	e7c6      	b.n	800630a <_printf_common+0x3e>
 800637c:	18e1      	adds	r1, r4, r3
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	2030      	movs	r0, #48	; 0x30
 8006382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006386:	4422      	add	r2, r4
 8006388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800638c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006390:	3302      	adds	r3, #2
 8006392:	e7c7      	b.n	8006324 <_printf_common+0x58>
 8006394:	2301      	movs	r3, #1
 8006396:	4622      	mov	r2, r4
 8006398:	4649      	mov	r1, r9
 800639a:	4638      	mov	r0, r7
 800639c:	47c0      	blx	r8
 800639e:	3001      	adds	r0, #1
 80063a0:	d0e6      	beq.n	8006370 <_printf_common+0xa4>
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7d9      	b.n	800635a <_printf_common+0x8e>
	...

080063a8 <_printf_i>:
 80063a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	7e0f      	ldrb	r7, [r1, #24]
 80063ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063b0:	2f78      	cmp	r7, #120	; 0x78
 80063b2:	4691      	mov	r9, r2
 80063b4:	4680      	mov	r8, r0
 80063b6:	460c      	mov	r4, r1
 80063b8:	469a      	mov	sl, r3
 80063ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063be:	d807      	bhi.n	80063d0 <_printf_i+0x28>
 80063c0:	2f62      	cmp	r7, #98	; 0x62
 80063c2:	d80a      	bhi.n	80063da <_printf_i+0x32>
 80063c4:	2f00      	cmp	r7, #0
 80063c6:	f000 80d8 	beq.w	800657a <_printf_i+0x1d2>
 80063ca:	2f58      	cmp	r7, #88	; 0x58
 80063cc:	f000 80a3 	beq.w	8006516 <_printf_i+0x16e>
 80063d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063d8:	e03a      	b.n	8006450 <_printf_i+0xa8>
 80063da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063de:	2b15      	cmp	r3, #21
 80063e0:	d8f6      	bhi.n	80063d0 <_printf_i+0x28>
 80063e2:	a101      	add	r1, pc, #4	; (adr r1, 80063e8 <_printf_i+0x40>)
 80063e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063e8:	08006441 	.word	0x08006441
 80063ec:	08006455 	.word	0x08006455
 80063f0:	080063d1 	.word	0x080063d1
 80063f4:	080063d1 	.word	0x080063d1
 80063f8:	080063d1 	.word	0x080063d1
 80063fc:	080063d1 	.word	0x080063d1
 8006400:	08006455 	.word	0x08006455
 8006404:	080063d1 	.word	0x080063d1
 8006408:	080063d1 	.word	0x080063d1
 800640c:	080063d1 	.word	0x080063d1
 8006410:	080063d1 	.word	0x080063d1
 8006414:	08006561 	.word	0x08006561
 8006418:	08006485 	.word	0x08006485
 800641c:	08006543 	.word	0x08006543
 8006420:	080063d1 	.word	0x080063d1
 8006424:	080063d1 	.word	0x080063d1
 8006428:	08006583 	.word	0x08006583
 800642c:	080063d1 	.word	0x080063d1
 8006430:	08006485 	.word	0x08006485
 8006434:	080063d1 	.word	0x080063d1
 8006438:	080063d1 	.word	0x080063d1
 800643c:	0800654b 	.word	0x0800654b
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	1d1a      	adds	r2, r3, #4
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	602a      	str	r2, [r5, #0]
 8006448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800644c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006450:	2301      	movs	r3, #1
 8006452:	e0a3      	b.n	800659c <_printf_i+0x1f4>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	6829      	ldr	r1, [r5, #0]
 8006458:	0606      	lsls	r6, r0, #24
 800645a:	f101 0304 	add.w	r3, r1, #4
 800645e:	d50a      	bpl.n	8006476 <_printf_i+0xce>
 8006460:	680e      	ldr	r6, [r1, #0]
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	2e00      	cmp	r6, #0
 8006466:	da03      	bge.n	8006470 <_printf_i+0xc8>
 8006468:	232d      	movs	r3, #45	; 0x2d
 800646a:	4276      	negs	r6, r6
 800646c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006470:	485e      	ldr	r0, [pc, #376]	; (80065ec <_printf_i+0x244>)
 8006472:	230a      	movs	r3, #10
 8006474:	e019      	b.n	80064aa <_printf_i+0x102>
 8006476:	680e      	ldr	r6, [r1, #0]
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800647e:	bf18      	it	ne
 8006480:	b236      	sxthne	r6, r6
 8006482:	e7ef      	b.n	8006464 <_printf_i+0xbc>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	6820      	ldr	r0, [r4, #0]
 8006488:	1d19      	adds	r1, r3, #4
 800648a:	6029      	str	r1, [r5, #0]
 800648c:	0601      	lsls	r1, r0, #24
 800648e:	d501      	bpl.n	8006494 <_printf_i+0xec>
 8006490:	681e      	ldr	r6, [r3, #0]
 8006492:	e002      	b.n	800649a <_printf_i+0xf2>
 8006494:	0646      	lsls	r6, r0, #25
 8006496:	d5fb      	bpl.n	8006490 <_printf_i+0xe8>
 8006498:	881e      	ldrh	r6, [r3, #0]
 800649a:	4854      	ldr	r0, [pc, #336]	; (80065ec <_printf_i+0x244>)
 800649c:	2f6f      	cmp	r7, #111	; 0x6f
 800649e:	bf0c      	ite	eq
 80064a0:	2308      	moveq	r3, #8
 80064a2:	230a      	movne	r3, #10
 80064a4:	2100      	movs	r1, #0
 80064a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064aa:	6865      	ldr	r5, [r4, #4]
 80064ac:	60a5      	str	r5, [r4, #8]
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	bfa2      	ittt	ge
 80064b2:	6821      	ldrge	r1, [r4, #0]
 80064b4:	f021 0104 	bicge.w	r1, r1, #4
 80064b8:	6021      	strge	r1, [r4, #0]
 80064ba:	b90e      	cbnz	r6, 80064c0 <_printf_i+0x118>
 80064bc:	2d00      	cmp	r5, #0
 80064be:	d04d      	beq.n	800655c <_printf_i+0x1b4>
 80064c0:	4615      	mov	r5, r2
 80064c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80064c6:	fb03 6711 	mls	r7, r3, r1, r6
 80064ca:	5dc7      	ldrb	r7, [r0, r7]
 80064cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064d0:	4637      	mov	r7, r6
 80064d2:	42bb      	cmp	r3, r7
 80064d4:	460e      	mov	r6, r1
 80064d6:	d9f4      	bls.n	80064c2 <_printf_i+0x11a>
 80064d8:	2b08      	cmp	r3, #8
 80064da:	d10b      	bne.n	80064f4 <_printf_i+0x14c>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	07de      	lsls	r6, r3, #31
 80064e0:	d508      	bpl.n	80064f4 <_printf_i+0x14c>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	6861      	ldr	r1, [r4, #4]
 80064e6:	4299      	cmp	r1, r3
 80064e8:	bfde      	ittt	le
 80064ea:	2330      	movle	r3, #48	; 0x30
 80064ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064f4:	1b52      	subs	r2, r2, r5
 80064f6:	6122      	str	r2, [r4, #16]
 80064f8:	f8cd a000 	str.w	sl, [sp]
 80064fc:	464b      	mov	r3, r9
 80064fe:	aa03      	add	r2, sp, #12
 8006500:	4621      	mov	r1, r4
 8006502:	4640      	mov	r0, r8
 8006504:	f7ff fee2 	bl	80062cc <_printf_common>
 8006508:	3001      	adds	r0, #1
 800650a:	d14c      	bne.n	80065a6 <_printf_i+0x1fe>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	b004      	add	sp, #16
 8006512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006516:	4835      	ldr	r0, [pc, #212]	; (80065ec <_printf_i+0x244>)
 8006518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800651c:	6829      	ldr	r1, [r5, #0]
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	f851 6b04 	ldr.w	r6, [r1], #4
 8006524:	6029      	str	r1, [r5, #0]
 8006526:	061d      	lsls	r5, r3, #24
 8006528:	d514      	bpl.n	8006554 <_printf_i+0x1ac>
 800652a:	07df      	lsls	r7, r3, #31
 800652c:	bf44      	itt	mi
 800652e:	f043 0320 	orrmi.w	r3, r3, #32
 8006532:	6023      	strmi	r3, [r4, #0]
 8006534:	b91e      	cbnz	r6, 800653e <_printf_i+0x196>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f023 0320 	bic.w	r3, r3, #32
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	2310      	movs	r3, #16
 8006540:	e7b0      	b.n	80064a4 <_printf_i+0xfc>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	f043 0320 	orr.w	r3, r3, #32
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	2378      	movs	r3, #120	; 0x78
 800654c:	4828      	ldr	r0, [pc, #160]	; (80065f0 <_printf_i+0x248>)
 800654e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006552:	e7e3      	b.n	800651c <_printf_i+0x174>
 8006554:	0659      	lsls	r1, r3, #25
 8006556:	bf48      	it	mi
 8006558:	b2b6      	uxthmi	r6, r6
 800655a:	e7e6      	b.n	800652a <_printf_i+0x182>
 800655c:	4615      	mov	r5, r2
 800655e:	e7bb      	b.n	80064d8 <_printf_i+0x130>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	6826      	ldr	r6, [r4, #0]
 8006564:	6961      	ldr	r1, [r4, #20]
 8006566:	1d18      	adds	r0, r3, #4
 8006568:	6028      	str	r0, [r5, #0]
 800656a:	0635      	lsls	r5, r6, #24
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	d501      	bpl.n	8006574 <_printf_i+0x1cc>
 8006570:	6019      	str	r1, [r3, #0]
 8006572:	e002      	b.n	800657a <_printf_i+0x1d2>
 8006574:	0670      	lsls	r0, r6, #25
 8006576:	d5fb      	bpl.n	8006570 <_printf_i+0x1c8>
 8006578:	8019      	strh	r1, [r3, #0]
 800657a:	2300      	movs	r3, #0
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	4615      	mov	r5, r2
 8006580:	e7ba      	b.n	80064f8 <_printf_i+0x150>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	602a      	str	r2, [r5, #0]
 8006588:	681d      	ldr	r5, [r3, #0]
 800658a:	6862      	ldr	r2, [r4, #4]
 800658c:	2100      	movs	r1, #0
 800658e:	4628      	mov	r0, r5
 8006590:	f7f9 fe1e 	bl	80001d0 <memchr>
 8006594:	b108      	cbz	r0, 800659a <_printf_i+0x1f2>
 8006596:	1b40      	subs	r0, r0, r5
 8006598:	6060      	str	r0, [r4, #4]
 800659a:	6863      	ldr	r3, [r4, #4]
 800659c:	6123      	str	r3, [r4, #16]
 800659e:	2300      	movs	r3, #0
 80065a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065a4:	e7a8      	b.n	80064f8 <_printf_i+0x150>
 80065a6:	6923      	ldr	r3, [r4, #16]
 80065a8:	462a      	mov	r2, r5
 80065aa:	4649      	mov	r1, r9
 80065ac:	4640      	mov	r0, r8
 80065ae:	47d0      	blx	sl
 80065b0:	3001      	adds	r0, #1
 80065b2:	d0ab      	beq.n	800650c <_printf_i+0x164>
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	079b      	lsls	r3, r3, #30
 80065b8:	d413      	bmi.n	80065e2 <_printf_i+0x23a>
 80065ba:	68e0      	ldr	r0, [r4, #12]
 80065bc:	9b03      	ldr	r3, [sp, #12]
 80065be:	4298      	cmp	r0, r3
 80065c0:	bfb8      	it	lt
 80065c2:	4618      	movlt	r0, r3
 80065c4:	e7a4      	b.n	8006510 <_printf_i+0x168>
 80065c6:	2301      	movs	r3, #1
 80065c8:	4632      	mov	r2, r6
 80065ca:	4649      	mov	r1, r9
 80065cc:	4640      	mov	r0, r8
 80065ce:	47d0      	blx	sl
 80065d0:	3001      	adds	r0, #1
 80065d2:	d09b      	beq.n	800650c <_printf_i+0x164>
 80065d4:	3501      	adds	r5, #1
 80065d6:	68e3      	ldr	r3, [r4, #12]
 80065d8:	9903      	ldr	r1, [sp, #12]
 80065da:	1a5b      	subs	r3, r3, r1
 80065dc:	42ab      	cmp	r3, r5
 80065de:	dcf2      	bgt.n	80065c6 <_printf_i+0x21e>
 80065e0:	e7eb      	b.n	80065ba <_printf_i+0x212>
 80065e2:	2500      	movs	r5, #0
 80065e4:	f104 0619 	add.w	r6, r4, #25
 80065e8:	e7f5      	b.n	80065d6 <_printf_i+0x22e>
 80065ea:	bf00      	nop
 80065ec:	080073bd 	.word	0x080073bd
 80065f0:	080073ce 	.word	0x080073ce

080065f4 <__swbuf_r>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	460e      	mov	r6, r1
 80065f8:	4614      	mov	r4, r2
 80065fa:	4605      	mov	r5, r0
 80065fc:	b118      	cbz	r0, 8006606 <__swbuf_r+0x12>
 80065fe:	6983      	ldr	r3, [r0, #24]
 8006600:	b90b      	cbnz	r3, 8006606 <__swbuf_r+0x12>
 8006602:	f000 f9d9 	bl	80069b8 <__sinit>
 8006606:	4b21      	ldr	r3, [pc, #132]	; (800668c <__swbuf_r+0x98>)
 8006608:	429c      	cmp	r4, r3
 800660a:	d12b      	bne.n	8006664 <__swbuf_r+0x70>
 800660c:	686c      	ldr	r4, [r5, #4]
 800660e:	69a3      	ldr	r3, [r4, #24]
 8006610:	60a3      	str	r3, [r4, #8]
 8006612:	89a3      	ldrh	r3, [r4, #12]
 8006614:	071a      	lsls	r2, r3, #28
 8006616:	d52f      	bpl.n	8006678 <__swbuf_r+0x84>
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	b36b      	cbz	r3, 8006678 <__swbuf_r+0x84>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	6820      	ldr	r0, [r4, #0]
 8006620:	1ac0      	subs	r0, r0, r3
 8006622:	6963      	ldr	r3, [r4, #20]
 8006624:	b2f6      	uxtb	r6, r6
 8006626:	4283      	cmp	r3, r0
 8006628:	4637      	mov	r7, r6
 800662a:	dc04      	bgt.n	8006636 <__swbuf_r+0x42>
 800662c:	4621      	mov	r1, r4
 800662e:	4628      	mov	r0, r5
 8006630:	f000 f92e 	bl	8006890 <_fflush_r>
 8006634:	bb30      	cbnz	r0, 8006684 <__swbuf_r+0x90>
 8006636:	68a3      	ldr	r3, [r4, #8]
 8006638:	3b01      	subs	r3, #1
 800663a:	60a3      	str	r3, [r4, #8]
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	6022      	str	r2, [r4, #0]
 8006642:	701e      	strb	r6, [r3, #0]
 8006644:	6963      	ldr	r3, [r4, #20]
 8006646:	3001      	adds	r0, #1
 8006648:	4283      	cmp	r3, r0
 800664a:	d004      	beq.n	8006656 <__swbuf_r+0x62>
 800664c:	89a3      	ldrh	r3, [r4, #12]
 800664e:	07db      	lsls	r3, r3, #31
 8006650:	d506      	bpl.n	8006660 <__swbuf_r+0x6c>
 8006652:	2e0a      	cmp	r6, #10
 8006654:	d104      	bne.n	8006660 <__swbuf_r+0x6c>
 8006656:	4621      	mov	r1, r4
 8006658:	4628      	mov	r0, r5
 800665a:	f000 f919 	bl	8006890 <_fflush_r>
 800665e:	b988      	cbnz	r0, 8006684 <__swbuf_r+0x90>
 8006660:	4638      	mov	r0, r7
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <__swbuf_r+0x9c>)
 8006666:	429c      	cmp	r4, r3
 8006668:	d101      	bne.n	800666e <__swbuf_r+0x7a>
 800666a:	68ac      	ldr	r4, [r5, #8]
 800666c:	e7cf      	b.n	800660e <__swbuf_r+0x1a>
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <__swbuf_r+0xa0>)
 8006670:	429c      	cmp	r4, r3
 8006672:	bf08      	it	eq
 8006674:	68ec      	ldreq	r4, [r5, #12]
 8006676:	e7ca      	b.n	800660e <__swbuf_r+0x1a>
 8006678:	4621      	mov	r1, r4
 800667a:	4628      	mov	r0, r5
 800667c:	f000 f80c 	bl	8006698 <__swsetup_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	d0cb      	beq.n	800661c <__swbuf_r+0x28>
 8006684:	f04f 37ff 	mov.w	r7, #4294967295
 8006688:	e7ea      	b.n	8006660 <__swbuf_r+0x6c>
 800668a:	bf00      	nop
 800668c:	08007400 	.word	0x08007400
 8006690:	08007420 	.word	0x08007420
 8006694:	080073e0 	.word	0x080073e0

08006698 <__swsetup_r>:
 8006698:	4b32      	ldr	r3, [pc, #200]	; (8006764 <__swsetup_r+0xcc>)
 800669a:	b570      	push	{r4, r5, r6, lr}
 800669c:	681d      	ldr	r5, [r3, #0]
 800669e:	4606      	mov	r6, r0
 80066a0:	460c      	mov	r4, r1
 80066a2:	b125      	cbz	r5, 80066ae <__swsetup_r+0x16>
 80066a4:	69ab      	ldr	r3, [r5, #24]
 80066a6:	b913      	cbnz	r3, 80066ae <__swsetup_r+0x16>
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 f985 	bl	80069b8 <__sinit>
 80066ae:	4b2e      	ldr	r3, [pc, #184]	; (8006768 <__swsetup_r+0xd0>)
 80066b0:	429c      	cmp	r4, r3
 80066b2:	d10f      	bne.n	80066d4 <__swsetup_r+0x3c>
 80066b4:	686c      	ldr	r4, [r5, #4]
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066bc:	0719      	lsls	r1, r3, #28
 80066be:	d42c      	bmi.n	800671a <__swsetup_r+0x82>
 80066c0:	06dd      	lsls	r5, r3, #27
 80066c2:	d411      	bmi.n	80066e8 <__swsetup_r+0x50>
 80066c4:	2309      	movs	r3, #9
 80066c6:	6033      	str	r3, [r6, #0]
 80066c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	f04f 30ff 	mov.w	r0, #4294967295
 80066d2:	e03e      	b.n	8006752 <__swsetup_r+0xba>
 80066d4:	4b25      	ldr	r3, [pc, #148]	; (800676c <__swsetup_r+0xd4>)
 80066d6:	429c      	cmp	r4, r3
 80066d8:	d101      	bne.n	80066de <__swsetup_r+0x46>
 80066da:	68ac      	ldr	r4, [r5, #8]
 80066dc:	e7eb      	b.n	80066b6 <__swsetup_r+0x1e>
 80066de:	4b24      	ldr	r3, [pc, #144]	; (8006770 <__swsetup_r+0xd8>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	bf08      	it	eq
 80066e4:	68ec      	ldreq	r4, [r5, #12]
 80066e6:	e7e6      	b.n	80066b6 <__swsetup_r+0x1e>
 80066e8:	0758      	lsls	r0, r3, #29
 80066ea:	d512      	bpl.n	8006712 <__swsetup_r+0x7a>
 80066ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066ee:	b141      	cbz	r1, 8006702 <__swsetup_r+0x6a>
 80066f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066f4:	4299      	cmp	r1, r3
 80066f6:	d002      	beq.n	80066fe <__swsetup_r+0x66>
 80066f8:	4630      	mov	r0, r6
 80066fa:	f000 fa63 	bl	8006bc4 <_free_r>
 80066fe:	2300      	movs	r3, #0
 8006700:	6363      	str	r3, [r4, #52]	; 0x34
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	2300      	movs	r3, #0
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6923      	ldr	r3, [r4, #16]
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	f043 0308 	orr.w	r3, r3, #8
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	b94b      	cbnz	r3, 8006732 <__swsetup_r+0x9a>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006728:	d003      	beq.n	8006732 <__swsetup_r+0x9a>
 800672a:	4621      	mov	r1, r4
 800672c:	4630      	mov	r0, r6
 800672e:	f000 fa09 	bl	8006b44 <__smakebuf_r>
 8006732:	89a0      	ldrh	r0, [r4, #12]
 8006734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006738:	f010 0301 	ands.w	r3, r0, #1
 800673c:	d00a      	beq.n	8006754 <__swsetup_r+0xbc>
 800673e:	2300      	movs	r3, #0
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	6963      	ldr	r3, [r4, #20]
 8006744:	425b      	negs	r3, r3
 8006746:	61a3      	str	r3, [r4, #24]
 8006748:	6923      	ldr	r3, [r4, #16]
 800674a:	b943      	cbnz	r3, 800675e <__swsetup_r+0xc6>
 800674c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006750:	d1ba      	bne.n	80066c8 <__swsetup_r+0x30>
 8006752:	bd70      	pop	{r4, r5, r6, pc}
 8006754:	0781      	lsls	r1, r0, #30
 8006756:	bf58      	it	pl
 8006758:	6963      	ldrpl	r3, [r4, #20]
 800675a:	60a3      	str	r3, [r4, #8]
 800675c:	e7f4      	b.n	8006748 <__swsetup_r+0xb0>
 800675e:	2000      	movs	r0, #0
 8006760:	e7f7      	b.n	8006752 <__swsetup_r+0xba>
 8006762:	bf00      	nop
 8006764:	20000098 	.word	0x20000098
 8006768:	08007400 	.word	0x08007400
 800676c:	08007420 	.word	0x08007420
 8006770:	080073e0 	.word	0x080073e0

08006774 <abort>:
 8006774:	b508      	push	{r3, lr}
 8006776:	2006      	movs	r0, #6
 8006778:	f000 fb3c 	bl	8006df4 <raise>
 800677c:	2001      	movs	r0, #1
 800677e:	f7fa fbd1 	bl	8000f24 <_exit>
	...

08006784 <__sflush_r>:
 8006784:	898a      	ldrh	r2, [r1, #12]
 8006786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800678a:	4605      	mov	r5, r0
 800678c:	0710      	lsls	r0, r2, #28
 800678e:	460c      	mov	r4, r1
 8006790:	d458      	bmi.n	8006844 <__sflush_r+0xc0>
 8006792:	684b      	ldr	r3, [r1, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	dc05      	bgt.n	80067a4 <__sflush_r+0x20>
 8006798:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800679a:	2b00      	cmp	r3, #0
 800679c:	dc02      	bgt.n	80067a4 <__sflush_r+0x20>
 800679e:	2000      	movs	r0, #0
 80067a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067a6:	2e00      	cmp	r6, #0
 80067a8:	d0f9      	beq.n	800679e <__sflush_r+0x1a>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067b0:	682f      	ldr	r7, [r5, #0]
 80067b2:	602b      	str	r3, [r5, #0]
 80067b4:	d032      	beq.n	800681c <__sflush_r+0x98>
 80067b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	075a      	lsls	r2, r3, #29
 80067bc:	d505      	bpl.n	80067ca <__sflush_r+0x46>
 80067be:	6863      	ldr	r3, [r4, #4]
 80067c0:	1ac0      	subs	r0, r0, r3
 80067c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067c4:	b10b      	cbz	r3, 80067ca <__sflush_r+0x46>
 80067c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067c8:	1ac0      	subs	r0, r0, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	4602      	mov	r2, r0
 80067ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d0:	6a21      	ldr	r1, [r4, #32]
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b0      	blx	r6
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	89a3      	ldrh	r3, [r4, #12]
 80067da:	d106      	bne.n	80067ea <__sflush_r+0x66>
 80067dc:	6829      	ldr	r1, [r5, #0]
 80067de:	291d      	cmp	r1, #29
 80067e0:	d82c      	bhi.n	800683c <__sflush_r+0xb8>
 80067e2:	4a2a      	ldr	r2, [pc, #168]	; (800688c <__sflush_r+0x108>)
 80067e4:	40ca      	lsrs	r2, r1
 80067e6:	07d6      	lsls	r6, r2, #31
 80067e8:	d528      	bpl.n	800683c <__sflush_r+0xb8>
 80067ea:	2200      	movs	r2, #0
 80067ec:	6062      	str	r2, [r4, #4]
 80067ee:	04d9      	lsls	r1, r3, #19
 80067f0:	6922      	ldr	r2, [r4, #16]
 80067f2:	6022      	str	r2, [r4, #0]
 80067f4:	d504      	bpl.n	8006800 <__sflush_r+0x7c>
 80067f6:	1c42      	adds	r2, r0, #1
 80067f8:	d101      	bne.n	80067fe <__sflush_r+0x7a>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	b903      	cbnz	r3, 8006800 <__sflush_r+0x7c>
 80067fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006802:	602f      	str	r7, [r5, #0]
 8006804:	2900      	cmp	r1, #0
 8006806:	d0ca      	beq.n	800679e <__sflush_r+0x1a>
 8006808:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800680c:	4299      	cmp	r1, r3
 800680e:	d002      	beq.n	8006816 <__sflush_r+0x92>
 8006810:	4628      	mov	r0, r5
 8006812:	f000 f9d7 	bl	8006bc4 <_free_r>
 8006816:	2000      	movs	r0, #0
 8006818:	6360      	str	r0, [r4, #52]	; 0x34
 800681a:	e7c1      	b.n	80067a0 <__sflush_r+0x1c>
 800681c:	6a21      	ldr	r1, [r4, #32]
 800681e:	2301      	movs	r3, #1
 8006820:	4628      	mov	r0, r5
 8006822:	47b0      	blx	r6
 8006824:	1c41      	adds	r1, r0, #1
 8006826:	d1c7      	bne.n	80067b8 <__sflush_r+0x34>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0c4      	beq.n	80067b8 <__sflush_r+0x34>
 800682e:	2b1d      	cmp	r3, #29
 8006830:	d001      	beq.n	8006836 <__sflush_r+0xb2>
 8006832:	2b16      	cmp	r3, #22
 8006834:	d101      	bne.n	800683a <__sflush_r+0xb6>
 8006836:	602f      	str	r7, [r5, #0]
 8006838:	e7b1      	b.n	800679e <__sflush_r+0x1a>
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	e7ad      	b.n	80067a0 <__sflush_r+0x1c>
 8006844:	690f      	ldr	r7, [r1, #16]
 8006846:	2f00      	cmp	r7, #0
 8006848:	d0a9      	beq.n	800679e <__sflush_r+0x1a>
 800684a:	0793      	lsls	r3, r2, #30
 800684c:	680e      	ldr	r6, [r1, #0]
 800684e:	bf08      	it	eq
 8006850:	694b      	ldreq	r3, [r1, #20]
 8006852:	600f      	str	r7, [r1, #0]
 8006854:	bf18      	it	ne
 8006856:	2300      	movne	r3, #0
 8006858:	eba6 0807 	sub.w	r8, r6, r7
 800685c:	608b      	str	r3, [r1, #8]
 800685e:	f1b8 0f00 	cmp.w	r8, #0
 8006862:	dd9c      	ble.n	800679e <__sflush_r+0x1a>
 8006864:	6a21      	ldr	r1, [r4, #32]
 8006866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006868:	4643      	mov	r3, r8
 800686a:	463a      	mov	r2, r7
 800686c:	4628      	mov	r0, r5
 800686e:	47b0      	blx	r6
 8006870:	2800      	cmp	r0, #0
 8006872:	dc06      	bgt.n	8006882 <__sflush_r+0xfe>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e78e      	b.n	80067a0 <__sflush_r+0x1c>
 8006882:	4407      	add	r7, r0
 8006884:	eba8 0800 	sub.w	r8, r8, r0
 8006888:	e7e9      	b.n	800685e <__sflush_r+0xda>
 800688a:	bf00      	nop
 800688c:	20400001 	.word	0x20400001

08006890 <_fflush_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	690b      	ldr	r3, [r1, #16]
 8006894:	4605      	mov	r5, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b913      	cbnz	r3, 80068a0 <_fflush_r+0x10>
 800689a:	2500      	movs	r5, #0
 800689c:	4628      	mov	r0, r5
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	b118      	cbz	r0, 80068aa <_fflush_r+0x1a>
 80068a2:	6983      	ldr	r3, [r0, #24]
 80068a4:	b90b      	cbnz	r3, 80068aa <_fflush_r+0x1a>
 80068a6:	f000 f887 	bl	80069b8 <__sinit>
 80068aa:	4b14      	ldr	r3, [pc, #80]	; (80068fc <_fflush_r+0x6c>)
 80068ac:	429c      	cmp	r4, r3
 80068ae:	d11b      	bne.n	80068e8 <_fflush_r+0x58>
 80068b0:	686c      	ldr	r4, [r5, #4]
 80068b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0ef      	beq.n	800689a <_fflush_r+0xa>
 80068ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068bc:	07d0      	lsls	r0, r2, #31
 80068be:	d404      	bmi.n	80068ca <_fflush_r+0x3a>
 80068c0:	0599      	lsls	r1, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_fflush_r+0x3a>
 80068c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068c6:	f000 f915 	bl	8006af4 <__retarget_lock_acquire_recursive>
 80068ca:	4628      	mov	r0, r5
 80068cc:	4621      	mov	r1, r4
 80068ce:	f7ff ff59 	bl	8006784 <__sflush_r>
 80068d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068d4:	07da      	lsls	r2, r3, #31
 80068d6:	4605      	mov	r5, r0
 80068d8:	d4e0      	bmi.n	800689c <_fflush_r+0xc>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	059b      	lsls	r3, r3, #22
 80068de:	d4dd      	bmi.n	800689c <_fflush_r+0xc>
 80068e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068e2:	f000 f908 	bl	8006af6 <__retarget_lock_release_recursive>
 80068e6:	e7d9      	b.n	800689c <_fflush_r+0xc>
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <_fflush_r+0x70>)
 80068ea:	429c      	cmp	r4, r3
 80068ec:	d101      	bne.n	80068f2 <_fflush_r+0x62>
 80068ee:	68ac      	ldr	r4, [r5, #8]
 80068f0:	e7df      	b.n	80068b2 <_fflush_r+0x22>
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <_fflush_r+0x74>)
 80068f4:	429c      	cmp	r4, r3
 80068f6:	bf08      	it	eq
 80068f8:	68ec      	ldreq	r4, [r5, #12]
 80068fa:	e7da      	b.n	80068b2 <_fflush_r+0x22>
 80068fc:	08007400 	.word	0x08007400
 8006900:	08007420 	.word	0x08007420
 8006904:	080073e0 	.word	0x080073e0

08006908 <std>:
 8006908:	2300      	movs	r3, #0
 800690a:	b510      	push	{r4, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	e9c0 3300 	strd	r3, r3, [r0]
 8006912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006916:	6083      	str	r3, [r0, #8]
 8006918:	8181      	strh	r1, [r0, #12]
 800691a:	6643      	str	r3, [r0, #100]	; 0x64
 800691c:	81c2      	strh	r2, [r0, #14]
 800691e:	6183      	str	r3, [r0, #24]
 8006920:	4619      	mov	r1, r3
 8006922:	2208      	movs	r2, #8
 8006924:	305c      	adds	r0, #92	; 0x5c
 8006926:	f7ff fb6f 	bl	8006008 <memset>
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <std+0x38>)
 800692c:	6263      	str	r3, [r4, #36]	; 0x24
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <std+0x3c>)
 8006930:	62a3      	str	r3, [r4, #40]	; 0x28
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <std+0x40>)
 8006934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <std+0x44>)
 8006938:	6224      	str	r4, [r4, #32]
 800693a:	6323      	str	r3, [r4, #48]	; 0x30
 800693c:	bd10      	pop	{r4, pc}
 800693e:	bf00      	nop
 8006940:	08006e2d 	.word	0x08006e2d
 8006944:	08006e4f 	.word	0x08006e4f
 8006948:	08006e87 	.word	0x08006e87
 800694c:	08006eab 	.word	0x08006eab

08006950 <_cleanup_r>:
 8006950:	4901      	ldr	r1, [pc, #4]	; (8006958 <_cleanup_r+0x8>)
 8006952:	f000 b8af 	b.w	8006ab4 <_fwalk_reent>
 8006956:	bf00      	nop
 8006958:	08006891 	.word	0x08006891

0800695c <__sfmoreglue>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	2268      	movs	r2, #104	; 0x68
 8006960:	1e4d      	subs	r5, r1, #1
 8006962:	4355      	muls	r5, r2
 8006964:	460e      	mov	r6, r1
 8006966:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800696a:	f000 f997 	bl	8006c9c <_malloc_r>
 800696e:	4604      	mov	r4, r0
 8006970:	b140      	cbz	r0, 8006984 <__sfmoreglue+0x28>
 8006972:	2100      	movs	r1, #0
 8006974:	e9c0 1600 	strd	r1, r6, [r0]
 8006978:	300c      	adds	r0, #12
 800697a:	60a0      	str	r0, [r4, #8]
 800697c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006980:	f7ff fb42 	bl	8006008 <memset>
 8006984:	4620      	mov	r0, r4
 8006986:	bd70      	pop	{r4, r5, r6, pc}

08006988 <__sfp_lock_acquire>:
 8006988:	4801      	ldr	r0, [pc, #4]	; (8006990 <__sfp_lock_acquire+0x8>)
 800698a:	f000 b8b3 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 800698e:	bf00      	nop
 8006990:	20004311 	.word	0x20004311

08006994 <__sfp_lock_release>:
 8006994:	4801      	ldr	r0, [pc, #4]	; (800699c <__sfp_lock_release+0x8>)
 8006996:	f000 b8ae 	b.w	8006af6 <__retarget_lock_release_recursive>
 800699a:	bf00      	nop
 800699c:	20004311 	.word	0x20004311

080069a0 <__sinit_lock_acquire>:
 80069a0:	4801      	ldr	r0, [pc, #4]	; (80069a8 <__sinit_lock_acquire+0x8>)
 80069a2:	f000 b8a7 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	20004312 	.word	0x20004312

080069ac <__sinit_lock_release>:
 80069ac:	4801      	ldr	r0, [pc, #4]	; (80069b4 <__sinit_lock_release+0x8>)
 80069ae:	f000 b8a2 	b.w	8006af6 <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	20004312 	.word	0x20004312

080069b8 <__sinit>:
 80069b8:	b510      	push	{r4, lr}
 80069ba:	4604      	mov	r4, r0
 80069bc:	f7ff fff0 	bl	80069a0 <__sinit_lock_acquire>
 80069c0:	69a3      	ldr	r3, [r4, #24]
 80069c2:	b11b      	cbz	r3, 80069cc <__sinit+0x14>
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f7ff bff0 	b.w	80069ac <__sinit_lock_release>
 80069cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069d0:	6523      	str	r3, [r4, #80]	; 0x50
 80069d2:	4b13      	ldr	r3, [pc, #76]	; (8006a20 <__sinit+0x68>)
 80069d4:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <__sinit+0x6c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80069da:	42a3      	cmp	r3, r4
 80069dc:	bf04      	itt	eq
 80069de:	2301      	moveq	r3, #1
 80069e0:	61a3      	streq	r3, [r4, #24]
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 f820 	bl	8006a28 <__sfp>
 80069e8:	6060      	str	r0, [r4, #4]
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f81c 	bl	8006a28 <__sfp>
 80069f0:	60a0      	str	r0, [r4, #8]
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f818 	bl	8006a28 <__sfp>
 80069f8:	2200      	movs	r2, #0
 80069fa:	60e0      	str	r0, [r4, #12]
 80069fc:	2104      	movs	r1, #4
 80069fe:	6860      	ldr	r0, [r4, #4]
 8006a00:	f7ff ff82 	bl	8006908 <std>
 8006a04:	68a0      	ldr	r0, [r4, #8]
 8006a06:	2201      	movs	r2, #1
 8006a08:	2109      	movs	r1, #9
 8006a0a:	f7ff ff7d 	bl	8006908 <std>
 8006a0e:	68e0      	ldr	r0, [r4, #12]
 8006a10:	2202      	movs	r2, #2
 8006a12:	2112      	movs	r1, #18
 8006a14:	f7ff ff78 	bl	8006908 <std>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	61a3      	str	r3, [r4, #24]
 8006a1c:	e7d2      	b.n	80069c4 <__sinit+0xc>
 8006a1e:	bf00      	nop
 8006a20:	080073a8 	.word	0x080073a8
 8006a24:	08006951 	.word	0x08006951

08006a28 <__sfp>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	f7ff ffac 	bl	8006988 <__sfp_lock_acquire>
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <__sfp+0x84>)
 8006a32:	681e      	ldr	r6, [r3, #0]
 8006a34:	69b3      	ldr	r3, [r6, #24]
 8006a36:	b913      	cbnz	r3, 8006a3e <__sfp+0x16>
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff ffbd 	bl	80069b8 <__sinit>
 8006a3e:	3648      	adds	r6, #72	; 0x48
 8006a40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a44:	3b01      	subs	r3, #1
 8006a46:	d503      	bpl.n	8006a50 <__sfp+0x28>
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	b30b      	cbz	r3, 8006a90 <__sfp+0x68>
 8006a4c:	6836      	ldr	r6, [r6, #0]
 8006a4e:	e7f7      	b.n	8006a40 <__sfp+0x18>
 8006a50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a54:	b9d5      	cbnz	r5, 8006a8c <__sfp+0x64>
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <__sfp+0x88>)
 8006a58:	60e3      	str	r3, [r4, #12]
 8006a5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a5e:	6665      	str	r5, [r4, #100]	; 0x64
 8006a60:	f000 f847 	bl	8006af2 <__retarget_lock_init_recursive>
 8006a64:	f7ff ff96 	bl	8006994 <__sfp_lock_release>
 8006a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a70:	6025      	str	r5, [r4, #0]
 8006a72:	61a5      	str	r5, [r4, #24]
 8006a74:	2208      	movs	r2, #8
 8006a76:	4629      	mov	r1, r5
 8006a78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a7c:	f7ff fac4 	bl	8006008 <memset>
 8006a80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a88:	4620      	mov	r0, r4
 8006a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a8c:	3468      	adds	r4, #104	; 0x68
 8006a8e:	e7d9      	b.n	8006a44 <__sfp+0x1c>
 8006a90:	2104      	movs	r1, #4
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7ff ff62 	bl	800695c <__sfmoreglue>
 8006a98:	4604      	mov	r4, r0
 8006a9a:	6030      	str	r0, [r6, #0]
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d1d5      	bne.n	8006a4c <__sfp+0x24>
 8006aa0:	f7ff ff78 	bl	8006994 <__sfp_lock_release>
 8006aa4:	230c      	movs	r3, #12
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	e7ee      	b.n	8006a88 <__sfp+0x60>
 8006aaa:	bf00      	nop
 8006aac:	080073a8 	.word	0x080073a8
 8006ab0:	ffff0001 	.word	0xffff0001

08006ab4 <_fwalk_reent>:
 8006ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab8:	4606      	mov	r6, r0
 8006aba:	4688      	mov	r8, r1
 8006abc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ac0:	2700      	movs	r7, #0
 8006ac2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ac6:	f1b9 0901 	subs.w	r9, r9, #1
 8006aca:	d505      	bpl.n	8006ad8 <_fwalk_reent+0x24>
 8006acc:	6824      	ldr	r4, [r4, #0]
 8006ace:	2c00      	cmp	r4, #0
 8006ad0:	d1f7      	bne.n	8006ac2 <_fwalk_reent+0xe>
 8006ad2:	4638      	mov	r0, r7
 8006ad4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ad8:	89ab      	ldrh	r3, [r5, #12]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d907      	bls.n	8006aee <_fwalk_reent+0x3a>
 8006ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	d003      	beq.n	8006aee <_fwalk_reent+0x3a>
 8006ae6:	4629      	mov	r1, r5
 8006ae8:	4630      	mov	r0, r6
 8006aea:	47c0      	blx	r8
 8006aec:	4307      	orrs	r7, r0
 8006aee:	3568      	adds	r5, #104	; 0x68
 8006af0:	e7e9      	b.n	8006ac6 <_fwalk_reent+0x12>

08006af2 <__retarget_lock_init_recursive>:
 8006af2:	4770      	bx	lr

08006af4 <__retarget_lock_acquire_recursive>:
 8006af4:	4770      	bx	lr

08006af6 <__retarget_lock_release_recursive>:
 8006af6:	4770      	bx	lr

08006af8 <__swhatbuf_r>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	460e      	mov	r6, r1
 8006afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b00:	2900      	cmp	r1, #0
 8006b02:	b096      	sub	sp, #88	; 0x58
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	da08      	bge.n	8006b1c <__swhatbuf_r+0x24>
 8006b0a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	602a      	str	r2, [r5, #0]
 8006b12:	061a      	lsls	r2, r3, #24
 8006b14:	d410      	bmi.n	8006b38 <__swhatbuf_r+0x40>
 8006b16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b1a:	e00e      	b.n	8006b3a <__swhatbuf_r+0x42>
 8006b1c:	466a      	mov	r2, sp
 8006b1e:	f000 f9eb 	bl	8006ef8 <_fstat_r>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	dbf1      	blt.n	8006b0a <__swhatbuf_r+0x12>
 8006b26:	9a01      	ldr	r2, [sp, #4]
 8006b28:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b2c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b30:	425a      	negs	r2, r3
 8006b32:	415a      	adcs	r2, r3
 8006b34:	602a      	str	r2, [r5, #0]
 8006b36:	e7ee      	b.n	8006b16 <__swhatbuf_r+0x1e>
 8006b38:	2340      	movs	r3, #64	; 0x40
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	b016      	add	sp, #88	; 0x58
 8006b40:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b44 <__smakebuf_r>:
 8006b44:	898b      	ldrh	r3, [r1, #12]
 8006b46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b48:	079d      	lsls	r5, r3, #30
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	d507      	bpl.n	8006b60 <__smakebuf_r+0x1c>
 8006b50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	6163      	str	r3, [r4, #20]
 8006b5c:	b002      	add	sp, #8
 8006b5e:	bd70      	pop	{r4, r5, r6, pc}
 8006b60:	ab01      	add	r3, sp, #4
 8006b62:	466a      	mov	r2, sp
 8006b64:	f7ff ffc8 	bl	8006af8 <__swhatbuf_r>
 8006b68:	9900      	ldr	r1, [sp, #0]
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f000 f895 	bl	8006c9c <_malloc_r>
 8006b72:	b948      	cbnz	r0, 8006b88 <__smakebuf_r+0x44>
 8006b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b78:	059a      	lsls	r2, r3, #22
 8006b7a:	d4ef      	bmi.n	8006b5c <__smakebuf_r+0x18>
 8006b7c:	f023 0303 	bic.w	r3, r3, #3
 8006b80:	f043 0302 	orr.w	r3, r3, #2
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	e7e3      	b.n	8006b50 <__smakebuf_r+0xc>
 8006b88:	4b0d      	ldr	r3, [pc, #52]	; (8006bc0 <__smakebuf_r+0x7c>)
 8006b8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b8c:	89a3      	ldrh	r3, [r4, #12]
 8006b8e:	6020      	str	r0, [r4, #0]
 8006b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b94:	81a3      	strh	r3, [r4, #12]
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	6163      	str	r3, [r4, #20]
 8006b9a:	9b01      	ldr	r3, [sp, #4]
 8006b9c:	6120      	str	r0, [r4, #16]
 8006b9e:	b15b      	cbz	r3, 8006bb8 <__smakebuf_r+0x74>
 8006ba0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f000 f9b9 	bl	8006f1c <_isatty_r>
 8006baa:	b128      	cbz	r0, 8006bb8 <__smakebuf_r+0x74>
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f023 0303 	bic.w	r3, r3, #3
 8006bb2:	f043 0301 	orr.w	r3, r3, #1
 8006bb6:	81a3      	strh	r3, [r4, #12]
 8006bb8:	89a0      	ldrh	r0, [r4, #12]
 8006bba:	4305      	orrs	r5, r0
 8006bbc:	81a5      	strh	r5, [r4, #12]
 8006bbe:	e7cd      	b.n	8006b5c <__smakebuf_r+0x18>
 8006bc0:	08006951 	.word	0x08006951

08006bc4 <_free_r>:
 8006bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bc6:	2900      	cmp	r1, #0
 8006bc8:	d044      	beq.n	8006c54 <_free_r+0x90>
 8006bca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bce:	9001      	str	r0, [sp, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f1a1 0404 	sub.w	r4, r1, #4
 8006bd6:	bfb8      	it	lt
 8006bd8:	18e4      	addlt	r4, r4, r3
 8006bda:	f000 f9c1 	bl	8006f60 <__malloc_lock>
 8006bde:	4a1e      	ldr	r2, [pc, #120]	; (8006c58 <_free_r+0x94>)
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	6813      	ldr	r3, [r2, #0]
 8006be4:	b933      	cbnz	r3, 8006bf4 <_free_r+0x30>
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	6014      	str	r4, [r2, #0]
 8006bea:	b003      	add	sp, #12
 8006bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006bf0:	f000 b9bc 	b.w	8006f6c <__malloc_unlock>
 8006bf4:	42a3      	cmp	r3, r4
 8006bf6:	d908      	bls.n	8006c0a <_free_r+0x46>
 8006bf8:	6825      	ldr	r5, [r4, #0]
 8006bfa:	1961      	adds	r1, r4, r5
 8006bfc:	428b      	cmp	r3, r1
 8006bfe:	bf01      	itttt	eq
 8006c00:	6819      	ldreq	r1, [r3, #0]
 8006c02:	685b      	ldreq	r3, [r3, #4]
 8006c04:	1949      	addeq	r1, r1, r5
 8006c06:	6021      	streq	r1, [r4, #0]
 8006c08:	e7ed      	b.n	8006be6 <_free_r+0x22>
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b10b      	cbz	r3, 8006c14 <_free_r+0x50>
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	d9fa      	bls.n	8006c0a <_free_r+0x46>
 8006c14:	6811      	ldr	r1, [r2, #0]
 8006c16:	1855      	adds	r5, r2, r1
 8006c18:	42a5      	cmp	r5, r4
 8006c1a:	d10b      	bne.n	8006c34 <_free_r+0x70>
 8006c1c:	6824      	ldr	r4, [r4, #0]
 8006c1e:	4421      	add	r1, r4
 8006c20:	1854      	adds	r4, r2, r1
 8006c22:	42a3      	cmp	r3, r4
 8006c24:	6011      	str	r1, [r2, #0]
 8006c26:	d1e0      	bne.n	8006bea <_free_r+0x26>
 8006c28:	681c      	ldr	r4, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	6053      	str	r3, [r2, #4]
 8006c2e:	4421      	add	r1, r4
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	e7da      	b.n	8006bea <_free_r+0x26>
 8006c34:	d902      	bls.n	8006c3c <_free_r+0x78>
 8006c36:	230c      	movs	r3, #12
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	e7d6      	b.n	8006bea <_free_r+0x26>
 8006c3c:	6825      	ldr	r5, [r4, #0]
 8006c3e:	1961      	adds	r1, r4, r5
 8006c40:	428b      	cmp	r3, r1
 8006c42:	bf04      	itt	eq
 8006c44:	6819      	ldreq	r1, [r3, #0]
 8006c46:	685b      	ldreq	r3, [r3, #4]
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	bf04      	itt	eq
 8006c4c:	1949      	addeq	r1, r1, r5
 8006c4e:	6021      	streq	r1, [r4, #0]
 8006c50:	6054      	str	r4, [r2, #4]
 8006c52:	e7ca      	b.n	8006bea <_free_r+0x26>
 8006c54:	b003      	add	sp, #12
 8006c56:	bd30      	pop	{r4, r5, pc}
 8006c58:	20004314 	.word	0x20004314

08006c5c <sbrk_aligned>:
 8006c5c:	b570      	push	{r4, r5, r6, lr}
 8006c5e:	4e0e      	ldr	r6, [pc, #56]	; (8006c98 <sbrk_aligned+0x3c>)
 8006c60:	460c      	mov	r4, r1
 8006c62:	6831      	ldr	r1, [r6, #0]
 8006c64:	4605      	mov	r5, r0
 8006c66:	b911      	cbnz	r1, 8006c6e <sbrk_aligned+0x12>
 8006c68:	f000 f88c 	bl	8006d84 <_sbrk_r>
 8006c6c:	6030      	str	r0, [r6, #0]
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4628      	mov	r0, r5
 8006c72:	f000 f887 	bl	8006d84 <_sbrk_r>
 8006c76:	1c43      	adds	r3, r0, #1
 8006c78:	d00a      	beq.n	8006c90 <sbrk_aligned+0x34>
 8006c7a:	1cc4      	adds	r4, r0, #3
 8006c7c:	f024 0403 	bic.w	r4, r4, #3
 8006c80:	42a0      	cmp	r0, r4
 8006c82:	d007      	beq.n	8006c94 <sbrk_aligned+0x38>
 8006c84:	1a21      	subs	r1, r4, r0
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 f87c 	bl	8006d84 <_sbrk_r>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d101      	bne.n	8006c94 <sbrk_aligned+0x38>
 8006c90:	f04f 34ff 	mov.w	r4, #4294967295
 8006c94:	4620      	mov	r0, r4
 8006c96:	bd70      	pop	{r4, r5, r6, pc}
 8006c98:	20004318 	.word	0x20004318

08006c9c <_malloc_r>:
 8006c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca0:	1ccd      	adds	r5, r1, #3
 8006ca2:	f025 0503 	bic.w	r5, r5, #3
 8006ca6:	3508      	adds	r5, #8
 8006ca8:	2d0c      	cmp	r5, #12
 8006caa:	bf38      	it	cc
 8006cac:	250c      	movcc	r5, #12
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	4607      	mov	r7, r0
 8006cb2:	db01      	blt.n	8006cb8 <_malloc_r+0x1c>
 8006cb4:	42a9      	cmp	r1, r5
 8006cb6:	d905      	bls.n	8006cc4 <_malloc_r+0x28>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	603b      	str	r3, [r7, #0]
 8006cbc:	2600      	movs	r6, #0
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	4e2e      	ldr	r6, [pc, #184]	; (8006d80 <_malloc_r+0xe4>)
 8006cc6:	f000 f94b 	bl	8006f60 <__malloc_lock>
 8006cca:	6833      	ldr	r3, [r6, #0]
 8006ccc:	461c      	mov	r4, r3
 8006cce:	bb34      	cbnz	r4, 8006d1e <_malloc_r+0x82>
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f7ff ffc2 	bl	8006c5c <sbrk_aligned>
 8006cd8:	1c43      	adds	r3, r0, #1
 8006cda:	4604      	mov	r4, r0
 8006cdc:	d14d      	bne.n	8006d7a <_malloc_r+0xde>
 8006cde:	6834      	ldr	r4, [r6, #0]
 8006ce0:	4626      	mov	r6, r4
 8006ce2:	2e00      	cmp	r6, #0
 8006ce4:	d140      	bne.n	8006d68 <_malloc_r+0xcc>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4638      	mov	r0, r7
 8006cec:	eb04 0803 	add.w	r8, r4, r3
 8006cf0:	f000 f848 	bl	8006d84 <_sbrk_r>
 8006cf4:	4580      	cmp	r8, r0
 8006cf6:	d13a      	bne.n	8006d6e <_malloc_r+0xd2>
 8006cf8:	6821      	ldr	r1, [r4, #0]
 8006cfa:	3503      	adds	r5, #3
 8006cfc:	1a6d      	subs	r5, r5, r1
 8006cfe:	f025 0503 	bic.w	r5, r5, #3
 8006d02:	3508      	adds	r5, #8
 8006d04:	2d0c      	cmp	r5, #12
 8006d06:	bf38      	it	cc
 8006d08:	250c      	movcc	r5, #12
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	4638      	mov	r0, r7
 8006d0e:	f7ff ffa5 	bl	8006c5c <sbrk_aligned>
 8006d12:	3001      	adds	r0, #1
 8006d14:	d02b      	beq.n	8006d6e <_malloc_r+0xd2>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	442b      	add	r3, r5
 8006d1a:	6023      	str	r3, [r4, #0]
 8006d1c:	e00e      	b.n	8006d3c <_malloc_r+0xa0>
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	1b52      	subs	r2, r2, r5
 8006d22:	d41e      	bmi.n	8006d62 <_malloc_r+0xc6>
 8006d24:	2a0b      	cmp	r2, #11
 8006d26:	d916      	bls.n	8006d56 <_malloc_r+0xba>
 8006d28:	1961      	adds	r1, r4, r5
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	6025      	str	r5, [r4, #0]
 8006d2e:	bf18      	it	ne
 8006d30:	6059      	strne	r1, [r3, #4]
 8006d32:	6863      	ldr	r3, [r4, #4]
 8006d34:	bf08      	it	eq
 8006d36:	6031      	streq	r1, [r6, #0]
 8006d38:	5162      	str	r2, [r4, r5]
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	4638      	mov	r0, r7
 8006d3e:	f104 060b 	add.w	r6, r4, #11
 8006d42:	f000 f913 	bl	8006f6c <__malloc_unlock>
 8006d46:	f026 0607 	bic.w	r6, r6, #7
 8006d4a:	1d23      	adds	r3, r4, #4
 8006d4c:	1af2      	subs	r2, r6, r3
 8006d4e:	d0b6      	beq.n	8006cbe <_malloc_r+0x22>
 8006d50:	1b9b      	subs	r3, r3, r6
 8006d52:	50a3      	str	r3, [r4, r2]
 8006d54:	e7b3      	b.n	8006cbe <_malloc_r+0x22>
 8006d56:	6862      	ldr	r2, [r4, #4]
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	bf0c      	ite	eq
 8006d5c:	6032      	streq	r2, [r6, #0]
 8006d5e:	605a      	strne	r2, [r3, #4]
 8006d60:	e7ec      	b.n	8006d3c <_malloc_r+0xa0>
 8006d62:	4623      	mov	r3, r4
 8006d64:	6864      	ldr	r4, [r4, #4]
 8006d66:	e7b2      	b.n	8006cce <_malloc_r+0x32>
 8006d68:	4634      	mov	r4, r6
 8006d6a:	6876      	ldr	r6, [r6, #4]
 8006d6c:	e7b9      	b.n	8006ce2 <_malloc_r+0x46>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	4638      	mov	r0, r7
 8006d74:	f000 f8fa 	bl	8006f6c <__malloc_unlock>
 8006d78:	e7a1      	b.n	8006cbe <_malloc_r+0x22>
 8006d7a:	6025      	str	r5, [r4, #0]
 8006d7c:	e7de      	b.n	8006d3c <_malloc_r+0xa0>
 8006d7e:	bf00      	nop
 8006d80:	20004314 	.word	0x20004314

08006d84 <_sbrk_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	; (8006da0 <_sbrk_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fa f940 	bl	8001014 <_sbrk>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_sbrk_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_sbrk_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	2000431c 	.word	0x2000431c

08006da4 <_raise_r>:
 8006da4:	291f      	cmp	r1, #31
 8006da6:	b538      	push	{r3, r4, r5, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	460d      	mov	r5, r1
 8006dac:	d904      	bls.n	8006db8 <_raise_r+0x14>
 8006dae:	2316      	movs	r3, #22
 8006db0:	6003      	str	r3, [r0, #0]
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006dba:	b112      	cbz	r2, 8006dc2 <_raise_r+0x1e>
 8006dbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dc0:	b94b      	cbnz	r3, 8006dd6 <_raise_r+0x32>
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 f830 	bl	8006e28 <_getpid_r>
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4601      	mov	r1, r0
 8006dcc:	4620      	mov	r0, r4
 8006dce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dd2:	f000 b817 	b.w	8006e04 <_kill_r>
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d00a      	beq.n	8006df0 <_raise_r+0x4c>
 8006dda:	1c59      	adds	r1, r3, #1
 8006ddc:	d103      	bne.n	8006de6 <_raise_r+0x42>
 8006dde:	2316      	movs	r3, #22
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	2001      	movs	r0, #1
 8006de4:	e7e7      	b.n	8006db6 <_raise_r+0x12>
 8006de6:	2400      	movs	r4, #0
 8006de8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006dec:	4628      	mov	r0, r5
 8006dee:	4798      	blx	r3
 8006df0:	2000      	movs	r0, #0
 8006df2:	e7e0      	b.n	8006db6 <_raise_r+0x12>

08006df4 <raise>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	; (8006e00 <raise+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f7ff bfd3 	b.w	8006da4 <_raise_r>
 8006dfe:	bf00      	nop
 8006e00:	20000098 	.word	0x20000098

08006e04 <_kill_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d07      	ldr	r5, [pc, #28]	; (8006e24 <_kill_r+0x20>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	f7fa f877 	bl	8000f04 <_kill>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d102      	bne.n	8006e20 <_kill_r+0x1c>
 8006e1a:	682b      	ldr	r3, [r5, #0]
 8006e1c:	b103      	cbz	r3, 8006e20 <_kill_r+0x1c>
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop
 8006e24:	2000431c 	.word	0x2000431c

08006e28 <_getpid_r>:
 8006e28:	f7fa b864 	b.w	8000ef4 <_getpid>

08006e2c <__sread>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	460c      	mov	r4, r1
 8006e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e34:	f000 f8a0 	bl	8006f78 <_read_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	bfab      	itete	ge
 8006e3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006e3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e40:	181b      	addge	r3, r3, r0
 8006e42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006e46:	bfac      	ite	ge
 8006e48:	6563      	strge	r3, [r4, #84]	; 0x54
 8006e4a:	81a3      	strhlt	r3, [r4, #12]
 8006e4c:	bd10      	pop	{r4, pc}

08006e4e <__swrite>:
 8006e4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e52:	461f      	mov	r7, r3
 8006e54:	898b      	ldrh	r3, [r1, #12]
 8006e56:	05db      	lsls	r3, r3, #23
 8006e58:	4605      	mov	r5, r0
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	4616      	mov	r6, r2
 8006e5e:	d505      	bpl.n	8006e6c <__swrite+0x1e>
 8006e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e64:	2302      	movs	r3, #2
 8006e66:	2200      	movs	r2, #0
 8006e68:	f000 f868 	bl	8006f3c <_lseek_r>
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e76:	81a3      	strh	r3, [r4, #12]
 8006e78:	4632      	mov	r2, r6
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e82:	f000 b817 	b.w	8006eb4 <_write_r>

08006e86 <__sseek>:
 8006e86:	b510      	push	{r4, lr}
 8006e88:	460c      	mov	r4, r1
 8006e8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e8e:	f000 f855 	bl	8006f3c <_lseek_r>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	bf15      	itete	ne
 8006e98:	6560      	strne	r0, [r4, #84]	; 0x54
 8006e9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ea2:	81a3      	strheq	r3, [r4, #12]
 8006ea4:	bf18      	it	ne
 8006ea6:	81a3      	strhne	r3, [r4, #12]
 8006ea8:	bd10      	pop	{r4, pc}

08006eaa <__sclose>:
 8006eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eae:	f000 b813 	b.w	8006ed8 <_close_r>
	...

08006eb4 <_write_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d07      	ldr	r5, [pc, #28]	; (8006ed4 <_write_r+0x20>)
 8006eb8:	4604      	mov	r4, r0
 8006eba:	4608      	mov	r0, r1
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	602a      	str	r2, [r5, #0]
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f7fa f855 	bl	8000f72 <_write>
 8006ec8:	1c43      	adds	r3, r0, #1
 8006eca:	d102      	bne.n	8006ed2 <_write_r+0x1e>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	b103      	cbz	r3, 8006ed2 <_write_r+0x1e>
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	bd38      	pop	{r3, r4, r5, pc}
 8006ed4:	2000431c 	.word	0x2000431c

08006ed8 <_close_r>:
 8006ed8:	b538      	push	{r3, r4, r5, lr}
 8006eda:	4d06      	ldr	r5, [pc, #24]	; (8006ef4 <_close_r+0x1c>)
 8006edc:	2300      	movs	r3, #0
 8006ede:	4604      	mov	r4, r0
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	602b      	str	r3, [r5, #0]
 8006ee4:	f7fa f861 	bl	8000faa <_close>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_close_r+0x1a>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_close_r+0x1a>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	2000431c 	.word	0x2000431c

08006ef8 <_fstat_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d07      	ldr	r5, [pc, #28]	; (8006f18 <_fstat_r+0x20>)
 8006efc:	2300      	movs	r3, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	4611      	mov	r1, r2
 8006f04:	602b      	str	r3, [r5, #0]
 8006f06:	f7fa f85c 	bl	8000fc2 <_fstat>
 8006f0a:	1c43      	adds	r3, r0, #1
 8006f0c:	d102      	bne.n	8006f14 <_fstat_r+0x1c>
 8006f0e:	682b      	ldr	r3, [r5, #0]
 8006f10:	b103      	cbz	r3, 8006f14 <_fstat_r+0x1c>
 8006f12:	6023      	str	r3, [r4, #0]
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	2000431c 	.word	0x2000431c

08006f1c <_isatty_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d06      	ldr	r5, [pc, #24]	; (8006f38 <_isatty_r+0x1c>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fa f85b 	bl	8000fe2 <_isatty>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_isatty_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_isatty_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	2000431c 	.word	0x2000431c

08006f3c <_lseek_r>:
 8006f3c:	b538      	push	{r3, r4, r5, lr}
 8006f3e:	4d07      	ldr	r5, [pc, #28]	; (8006f5c <_lseek_r+0x20>)
 8006f40:	4604      	mov	r4, r0
 8006f42:	4608      	mov	r0, r1
 8006f44:	4611      	mov	r1, r2
 8006f46:	2200      	movs	r2, #0
 8006f48:	602a      	str	r2, [r5, #0]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f7fa f854 	bl	8000ff8 <_lseek>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_lseek_r+0x1e>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_lseek_r+0x1e>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	2000431c 	.word	0x2000431c

08006f60 <__malloc_lock>:
 8006f60:	4801      	ldr	r0, [pc, #4]	; (8006f68 <__malloc_lock+0x8>)
 8006f62:	f7ff bdc7 	b.w	8006af4 <__retarget_lock_acquire_recursive>
 8006f66:	bf00      	nop
 8006f68:	20004310 	.word	0x20004310

08006f6c <__malloc_unlock>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	; (8006f74 <__malloc_unlock+0x8>)
 8006f6e:	f7ff bdc2 	b.w	8006af6 <__retarget_lock_release_recursive>
 8006f72:	bf00      	nop
 8006f74:	20004310 	.word	0x20004310

08006f78 <_read_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	; (8006f98 <_read_r+0x20>)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7f9 ffd6 	bl	8000f38 <_read>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_read_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_read_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000431c 	.word	0x2000431c

08006f9c <_init>:
 8006f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9e:	bf00      	nop
 8006fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa2:	bc08      	pop	{r3}
 8006fa4:	469e      	mov	lr, r3
 8006fa6:	4770      	bx	lr

08006fa8 <_fini>:
 8006fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006faa:	bf00      	nop
 8006fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fae:	bc08      	pop	{r3}
 8006fb0:	469e      	mov	lr, r3
 8006fb2:	4770      	bx	lr
